# Ricochet Task Configuration
# Copy this file to .env and configure your settings

# Basic Configuration
RICOCHET_CONFIG_DIR=~/.ricochet
RICOCHET_DEFAULT_CHAIN=default
RICOCHET_WORKSPACE_PATH=./

# PostgreSQL Configuration (optional)
# If not set, file-based storage will be used
POSTGRES_DSN=postgres://username:password@localhost:5432/ricochet_db?sslmode=disable

# MinIO Configuration (optional)  
# If not set, file-based checkpoint storage will be used
MINIO_ENDPOINT=localhost:9000
MINIO_ACCESS_KEY=minioadmin
MINIO_SECRET_KEY=minioadmin
MINIO_BUCKET=ricochet-checkpoints
MINIO_USE_SSL=false

# API Keys for Model Providers
# These should be managed through the ricochet CLI key management
# OPENAI_API_KEY=your_openai_key_here
# ANTHROPIC_API_KEY=your_anthropic_key_here
# DEEPSEEK_API_KEY=your_deepseek_key_here

# Development/Testing Settings
DEBUG=false
LOG_LEVEL=info

# Database Migration Settings
AUTO_MIGRATE=true

# MinIO Development Setup
# For local development with Docker:
# docker run -p 9000:9000 -p 9001:9001 --name minio \
#   -e "MINIO_ROOT_USER=minioadmin" \
#   -e "MINIO_ROOT_PASSWORD=minioadmin" \
#   minio/minio server /data --console-address ":9001"

# PostgreSQL Development Setup  
# For local development with Docker:
# docker run --name postgres -e POSTGRES_PASSWORD=password \
#   -e POSTGRES_DB=ricochet_db -p 5432:5432 -d postgres:15

# Production Considerations:
# - Use strong passwords and proper SSL configuration
# - Store sensitive credentials in secure vaults
# - Configure backup strategies for PostgreSQL and MinIO
# - Set up monitoring and alerting
# - Use connection pooling for database connections