package workflows

import (
	"context"
	"fmt"
	"os"
	"path/filepath"
	"strings"

	"github.com/grik-ai/ricochet-task/pkg/ai"
	"github.com/grik-ai/ricochet-task/pkg/workflow"
	"github.com/spf13/cobra"
)

// SimpleLogger –ø—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è Logger –¥–ª—è workflow –∫–æ–º–∞–Ω–¥
type SimpleLogger struct{}

func (l *SimpleLogger) Info(msg string, args ...interface{}) {
	fmt.Printf("[INFO] %s %v\n", msg, args)
}

func (l *SimpleLogger) Error(msg string, err error, args ...interface{}) {
	fmt.Printf("[ERROR] %s: %v %v\n", msg, err, args)
}

func (l *SimpleLogger) Warn(msg string, args ...interface{}) {
	fmt.Printf("[WARN] %s %v\n", msg, args)
}

func (l *SimpleLogger) Debug(msg string, args ...interface{}) {
	fmt.Printf("[DEBUG] %s %v\n", msg, args)
}

var WorkflowCmd = &cobra.Command{
	Use:   "workflow",
	Short: "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ workflow –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏",
	Long: `–ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è workflow - –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏.
–ü–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å, –∑–∞–ø—É—Å–∫–∞—Ç—å –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å —Å–ª–æ–∂–Ω—ã–µ workflow —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º AI.`,
}

var (
	workflowsDir string
	aiEnabled    bool
	dryRun       bool
)

func init() {
	// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ–ª–∞–≥–∏ –¥–ª—è workflow –∫–æ–º–∞–Ω–¥
	WorkflowCmd.PersistentFlags().StringVar(&workflowsDir, "workflows-dir", "./pkg/workflow/workflows", "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å workflow —Ñ–∞–π–ª–∞–º–∏")
	WorkflowCmd.PersistentFlags().BoolVar(&aiEnabled, "ai", true, "–í–∫–ª—é—á–∏—Ç—å AI-–∞—Å—Å–∏—Å—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ")
	WorkflowCmd.PersistentFlags().BoolVar(&dryRun, "dry-run", false, "–ü–æ–∫–∞–∑–∞—Ç—å —á—Ç–æ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞")

	// –ü–æ–¥–∫–æ–º–∞–Ω–¥—ã
	WorkflowCmd.AddCommand(listCmd)
	WorkflowCmd.AddCommand(createCmd)
	WorkflowCmd.AddCommand(runCmd)
	WorkflowCmd.AddCommand(statusCmd)
	WorkflowCmd.AddCommand(validateCmd)
	WorkflowCmd.AddCommand(templatesCmd)
}

// listCmd - —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö workflow
var listCmd = &cobra.Command{
	Use:   "list",
	Short: "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö workflow",
	Run: func(cmd *cobra.Command, args []string) {
		log := &SimpleLogger{}
		loader := workflow.NewWorkflowLoader(workflowsDir, log)

		workflows, err := loader.LoadAllWorkflows()
		if err != nil {
			fmt.Fprintf(os.Stderr, "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ workflow: %v\n", err)
			os.Exit(1)
		}

		fmt.Println("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ Workflow:")
		fmt.Println(strings.Repeat("=", 50))

		for name, wf := range workflows {
			fmt.Printf("üîß %s (v%s)\n", name, wf.Version)
			fmt.Printf("   üìù %s\n", wf.Description)
			fmt.Printf("   üìä –°—Ç–∞–¥–∏–∏: %d | AI: %v\n", len(wf.Stages), wf.Settings.AIEnabled)
			
			// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç–∞–¥–∏–∏
			var stages []string
			for stageName := range wf.Stages {
				stages = append(stages, stageName)
			}
			fmt.Printf("   üîÑ %s\n", strings.Join(stages, " ‚Üí "))
			fmt.Println()
		}
	},
}

// createCmd - —Å–æ–∑–¥–∞–Ω–∏–µ workflow —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
var createCmd = &cobra.Command{
	Use:   "create [workflow-name] [context]",
	Short: "–°–æ–∑–¥–∞—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä workflow",
	Args:  cobra.RangeArgs(1, 2),
	Run: func(cmd *cobra.Command, args []string) {
		workflowName := args[0]
		workflowContext := make(map[string]interface{})
		
		if len(args) > 1 {
			workflowContext["project_name"] = args[1]
		}

		log := &SimpleLogger{}
		loader := workflow.NewWorkflowLoader(workflowsDir, log)
		
		// –ó–∞–≥—Ä—É–∂–∞–µ–º workflow
		workflowDef, err := loader.LoadWorkflow(workflowName + ".yaml")
		if err != nil {
			fmt.Fprintf(os.Stderr, "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ workflow '%s': %v\n", workflowName, err)
			os.Exit(1)
		}

		// –°–æ–∑–¥–∞–µ–º AI chains –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω AI —Ä–µ–∂–∏–º
		var aiChains *ai.AIChains
		if aiEnabled {
			aiChains = &ai.AIChains{} // TODO: –ü–æ–¥–∫–ª—é—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ AI chains
		}

		// –°–æ–∑–¥–∞–µ–º workflow engine
		config := workflow.GetDefaultCompleteConfig()
		engine, err := workflow.NewCompleteWorkflowEngine(aiChains, config, log)
		if err != nil {
			fmt.Fprintf(os.Stderr, "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è workflow engine: %v\n", err)
			os.Exit(1)
		}

		if dryRun {
			fmt.Printf("üîç DRY RUN: –°–æ–∑–¥–∞–Ω–∏–µ workflow '%s'\n", workflowName)
			fmt.Printf("üìù –û–ø–∏—Å–∞–Ω–∏–µ: %s\n", workflowDef.Description)
			fmt.Printf("üîß –°—Ç–∞–¥–∏–∏: %d\n", len(workflowDef.Stages))
			fmt.Printf("ü§ñ AI –≤–∫–ª—é—á–µ–Ω: %v\n", aiEnabled)
			return
		}

		// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä workflow
		instance, err := engine.CreateWorkflow(context.Background(), workflowDef)
		if err != nil {
			fmt.Fprintf(os.Stderr, "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ workflow: %v\n", err)
			os.Exit(1)
		}

		fmt.Printf("‚úÖ Workflow —Å–æ–∑–¥–∞–Ω!\n")
		fmt.Printf("üÜî ID: %s\n", instance.ID)
		fmt.Printf("üìä –°—Ç–∞—Ç—É—Å: %s\n", instance.Status)
		fmt.Printf("üîÑ –¢–µ–∫—É—â–∞—è —Å—Ç–∞–¥–∏—è: %s\n", instance.CurrentStage)

		// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ –Ω–µ dry-run
		fmt.Printf("üöÄ –ó–∞–ø—É—Å–∫ workflow...\n")
		if err := engine.ExecuteWorkflow(context.Background(), instance.ID); err != nil {
			fmt.Fprintf(os.Stderr, "–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ workflow: %v\n", err)
			os.Exit(1)
		}

		fmt.Printf("‚úÖ Workflow –∑–∞–ø—É—â–µ–Ω! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'workflow status %s' –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.\n", instance.ID)
	},
}

// runCmd - –∑–∞–ø—É—Å–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ workflow
var runCmd = &cobra.Command{
	Use:   "run [workflow-id]",
	Short: "–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π workflow",
	Args:  cobra.ExactArgs(1),
	Run: func(cmd *cobra.Command, args []string) {
		workflowID := args[0]

		
		// TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ workflow –ø–æ ID
		// –ü–æ–∫–∞ —á—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç
		
		if dryRun {
			fmt.Printf("üîç DRY RUN: –ó–∞–ø—É—Å–∫ workflow '%s'\n", workflowID)
			return
		}

		fmt.Printf("üöÄ –ó–∞–ø—É—Å–∫ workflow %s...\n", workflowID)
		fmt.Printf("‚úÖ Workflow –∑–∞–ø—É—â–µ–Ω! (–∑–∞–≥–ª—É—à–∫–∞)\n")
	},
}

// statusCmd - —Å—Ç–∞—Ç—É—Å workflow
var statusCmd = &cobra.Command{
	Use:   "status [workflow-id]",
	Short: "–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å workflow",
	Args:  cobra.ExactArgs(1),
	Run: func(cmd *cobra.Command, args []string) {
		workflowID := args[0]

		fmt.Printf("üìä –°—Ç–∞—Ç—É—Å Workflow: %s\n", workflowID)
		fmt.Println(strings.Repeat("=", 50))
		
		// TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
		fmt.Printf("üÜî ID: %s\n", workflowID)
		fmt.Printf("üìä –°—Ç–∞—Ç—É—Å: running\n")
		fmt.Printf("üîÑ –¢–µ–∫—É—â–∞—è —Å—Ç–∞–¥–∏—è: development\n")
		fmt.Printf("üìà –ü—Ä–æ–≥—Ä–µ—Å—Å: 65%%\n")
		fmt.Printf("‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: 2h 15m\n")
		fmt.Printf("‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏: 8/12\n")
		
		fmt.Println("\nüéØ –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏:")
		fmt.Println("  ‚Ä¢ Implement core feature (In Progress)")
		fmt.Println("  ‚Ä¢ Write unit tests (Pending)")
		fmt.Println("  ‚Ä¢ Code review (Pending)")
	},
}

// validateCmd - –≤–∞–ª–∏–¥–∞—Ü–∏—è workflow —Ñ–∞–π–ª–æ–≤
var validateCmd = &cobra.Command{
	Use:   "validate [workflow-file]",
	Short: "–í–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å workflow —Ñ–∞–π–ª",
	Args:  cobra.ExactArgs(1),
	Run: func(cmd *cobra.Command, args []string) {
		workflowFile := args[0]
		
		log := &SimpleLogger{}
		loader := workflow.NewWorkflowLoader(workflowsDir, log)

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
		fullPath := filepath.Join(workflowsDir, workflowFile)
		if !strings.HasSuffix(workflowFile, ".yaml") && !strings.HasSuffix(workflowFile, ".yml") {
			fullPath += ".yaml"
		}

		if _, err := os.Stat(fullPath); os.IsNotExist(err) {
			fmt.Fprintf(os.Stderr, "‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: %s\n", fullPath)
			os.Exit(1)
		}

		// –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º
		fmt.Printf("üîç –í–∞–ª–∏–¥–∞—Ü–∏—è workflow: %s\n", workflowFile)
		
		workflow, err := loader.LoadWorkflow(filepath.Base(fullPath))
		if err != nil {
			fmt.Fprintf(os.Stderr, "‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: %v\n", err)
			os.Exit(1)
		}

		fmt.Printf("‚úÖ Workflow –≤–∞–ª–∏–¥–µ–Ω!\n")
		fmt.Printf("üìù –ù–∞–∑–≤–∞–Ω–∏–µ: %s\n", workflow.Name)
		fmt.Printf("üîñ –í–µ—Ä—Å–∏—è: %s\n", workflow.Version)
		fmt.Printf("üìä –°—Ç–∞–¥–∏–∏: %d\n", len(workflow.Stages))
		fmt.Printf("üéØ –¢—Ä–∏–≥–≥–µ—Ä—ã: %d\n", len(workflow.Triggers))
		fmt.Printf("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã\n")
	},
}

// templatesCmd - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞–º–∏ workflow
var templatesCmd = &cobra.Command{
	Use:   "templates",
	Short: "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞–º–∏ workflow",
}

func init() {
	// –ü–æ–¥–∫–æ–º–∞–Ω–¥—ã –¥–ª—è templates
	templatesCmd.AddCommand(&cobra.Command{
		Use:   "list",
		Short: "–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤",
		Run: func(cmd *cobra.Command, args []string) {
			fmt.Println("üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã workflow:")
			fmt.Println(strings.Repeat("=", 40))
			
			templates := []struct {
				name        string
				description string
				complexity  string
			}{
				{"feature-development", "–ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∏—á–∏", "–°–ª–æ–∂–Ω—ã–π"},
				{"bugfix", "–≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–≥–æ–≤", "–ü—Ä–æ—Å—Ç–æ–π"},
				{"code-review", "–ü—Ä–æ—Ü–µ—Å—Å code review", "–°—Ä–µ–¥–Ω–∏–π"},
				{"release", "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏ –≤—ã–ø—É—Å–∫ —Ä–µ–ª–∏–∑–∞", "–°–ª–æ–∂–Ω—ã–π"},
				{"hotfix", "–ö—Ä–∏—Ç–∏—á–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ", "–°—Ä–µ–¥–Ω–∏–π"},
			}

			for _, tmpl := range templates {
				fmt.Printf("üîß %s\n", tmpl.name)
				fmt.Printf("   üìù %s\n", tmpl.description)
				fmt.Printf("   üìä –°–ª–æ–∂–Ω–æ—Å—Ç—å: %s\n", tmpl.complexity)
				fmt.Println()
			}
		},
	})

	templatesCmd.AddCommand(&cobra.Command{
		Use:   "init [template-name] [output-file]",
		Short: "–°–æ–∑–¥–∞—Ç—å workflow –∏–∑ —à–∞–±–ª–æ–Ω–∞",
		Args:  cobra.ExactArgs(2),
		Run: func(cmd *cobra.Command, args []string) {
			templateName := args[0]
			outputFile := args[1]

			if !strings.HasSuffix(outputFile, ".yaml") && !strings.HasSuffix(outputFile, ".yml") {
				outputFile += ".yaml"
			}

			fmt.Printf("üîß –°–æ–∑–¥–∞–Ω–∏–µ workflow –∏–∑ —à–∞–±–ª–æ–Ω–∞ '%s'\n", templateName)
			fmt.Printf("üìÅ –§–∞–π–ª: %s\n", outputFile)

			// TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∏–∑ —à–∞–±–ª–æ–Ω–æ–≤
			fmt.Printf("‚úÖ Workflow —Å–æ–∑–¥–∞–Ω –∏–∑ —à–∞–±–ª–æ–Ω–∞!\n")
		},
	})
}