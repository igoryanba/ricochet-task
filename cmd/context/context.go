package context

import (
	"fmt"
	"os"
	"strings"

	"github.com/grik-ai/ricochet-task/pkg/ai"
	"github.com/grik-ai/ricochet-task/pkg/context"
	"github.com/grik-ai/ricochet-task/pkg/providers"
	"github.com/spf13/cobra"
)

// ContextLogger —Ä–µ–∞–ª–∏–∑—É–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å context.Logger
type ContextLogger struct{}

func (l *ContextLogger) Info(msg string, args ...interface{}) {
	fmt.Printf("[INFO] %s %v\n", msg, args)
}

func (l *ContextLogger) Error(msg string, err error, args ...interface{}) {
	fmt.Printf("[ERROR] %s: %v %v\n", msg, err, args)
}

func (l *ContextLogger) Warn(msg string, args ...interface{}) {
	fmt.Printf("[WARN] %s %v\n", msg, args)
}

func (l *ContextLogger) Debug(msg string, args ...interface{}) {
	fmt.Printf("[DEBUG] %s %v\n", msg, args)
}

var ContextCmd = &cobra.Command{
	Use:   "context",
	Short: "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞–º–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤",
	Long: `–ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞–º–∏ —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–µ–∫—Ç–∞–º–∏.
–ü–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å, –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å—Å—è –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞–º–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏ –¥–æ—Å–æ–∫.`,
}

var (
	contextName        string
	contextDescription string
	boardID            string
	projectID          string
	providerName       string
	defaultAssignee    string
	defaultPriority    string
	projectType        string
	complexity         string
	timeline           int
	teamSize           int
	aiEnabled          bool
	autoAssignment     bool
)

func init() {
	// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ–ª–∞–≥–∏
	ContextCmd.PersistentFlags().StringVar(&contextName, "name", "", "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞")
	ContextCmd.PersistentFlags().StringVar(&contextDescription, "description", "", "–û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞")
	ContextCmd.PersistentFlags().StringVar(&boardID, "board-id", "", "ID –¥–æ—Å–∫–∏")
	ContextCmd.PersistentFlags().StringVar(&projectID, "project-id", "", "ID –ø—Ä–æ–µ–∫—Ç–∞")
	ContextCmd.PersistentFlags().StringVar(&providerName, "provider", "", "–ò–º—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞")
	ContextCmd.PersistentFlags().StringVar(&defaultAssignee, "assignee", "", "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
	ContextCmd.PersistentFlags().StringVar(&defaultPriority, "priority", "medium", "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
	ContextCmd.PersistentFlags().StringVar(&projectType, "type", "", "–¢–∏–ø –ø—Ä–æ–µ–∫—Ç–∞")
	ContextCmd.PersistentFlags().StringVar(&complexity, "complexity", "medium", "–°–ª–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞")
	ContextCmd.PersistentFlags().IntVar(&timeline, "timeline", 14, "–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏ –≤ –¥–Ω—è—Ö")
	ContextCmd.PersistentFlags().IntVar(&teamSize, "team-size", 1, "–†–∞–∑–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã")
	ContextCmd.PersistentFlags().BoolVar(&aiEnabled, "ai", true, "–í–∫–ª—é—á–∏—Ç—å AI")
	ContextCmd.PersistentFlags().BoolVar(&autoAssignment, "auto-assign", false, "–ê–≤—Ç–æ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ")

	// –ü–æ–¥–∫–æ–º–∞–Ω–¥—ã
	ContextCmd.AddCommand(listCmd)
	ContextCmd.AddCommand(createCmd)
	ContextCmd.AddCommand(switchCmd)
	ContextCmd.AddCommand(currentCmd)
	ContextCmd.AddCommand(updateCmd)
	ContextCmd.AddCommand(deleteCmd)
	ContextCmd.AddCommand(analyzeCmd)
	ContextCmd.AddCommand(boardsCmd)
	ContextCmd.AddCommand(multiCmd)
}

// listCmd - —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤
var listCmd = &cobra.Command{
	Use:   "list",
	Short: "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤",
	Run: func(cmd *cobra.Command, args []string) {
		log := &ContextLogger{}
		cm := context.NewContextManager("", log)

		contexts := cm.ListContexts()
		if len(contexts) == 0 {
			fmt.Println("üì≠ –ù–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤")
			fmt.Println("–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç: ricochet context create")
			return
		}

		fmt.Println("üìã –ö–æ–Ω—Ç–µ–∫—Å—Ç—ã –ø—Ä–æ–µ–∫—Ç–æ–≤:")
		fmt.Println(strings.Repeat("=", 60))

		for _, ctx := range contexts {
			status := ""
			if ctx.IsActive {
				status = "üü¢ –ê–ö–¢–ò–í–ï–ù"
			} else {
				status = "‚ö™ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω"
			}

			fmt.Printf("%s %s (%s)\n", status, ctx.Name, ctx.ID)
			fmt.Printf("   üìù %s\n", ctx.Description)
			fmt.Printf("   üìä –î–æ—Å–∫–∞: %s | –ü—Ä–æ–µ–∫—Ç: %s\n", ctx.BoardID, ctx.ProjectID)
			fmt.Printf("   üîß –ü—Ä–æ–≤–∞–π–¥–µ—Ä: %s | –¢–∏–ø: %s\n", ctx.ProviderName, ctx.ProjectType)
			
			if ctx.Stats != nil {
				fmt.Printf("   üìà –ó–∞–¥–∞—á: %d —Å–æ–∑–¥–∞–Ω–æ, %d –≤—ã–ø–æ–ª–Ω–µ–Ω–æ\n", 
					ctx.Stats.TasksCreated, ctx.Stats.TasksCompleted)
			}
			
			fmt.Printf("   üïê –°–æ–∑–¥–∞–Ω: %s | –û–±–Ω–æ–≤–ª–µ–Ω: %s\n", 
				ctx.CreatedAt.Format("2006-01-02 15:04"), 
				ctx.UpdatedAt.Format("2006-01-02 15:04"))
			fmt.Println()
		}
	},
}

// createCmd - —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
var createCmd = &cobra.Command{
	Use:   "create [name]",
	Short: "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç",
	Args:  cobra.RangeArgs(0, 1),
	Run: func(cmd *cobra.Command, args []string) {
		log := &ContextLogger{}
		cm := context.NewContextManager("", log)

		// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
		name := contextName
		if len(args) > 0 {
			name = args[0]
		}
		if name == "" {
			fmt.Print("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: ")
			fmt.Scanln(&name)
		}

		// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
		description := contextDescription
		if description == "" {
			fmt.Print("üìã –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ): ")
			fmt.Scanln(&description)
		}

		// –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤–≤–æ–¥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –µ—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω—ã
		if boardID == "" {
			fmt.Print("üéØ –í–≤–µ–¥–∏—Ç–µ ID –¥–æ—Å–∫–∏: ")
			fmt.Scanln(&boardID)
		}

		if projectID == "" {
			fmt.Print("üìÅ –í–≤–µ–¥–∏—Ç–µ ID –ø—Ä–æ–µ–∫—Ç–∞: ")
			fmt.Scanln(&projectID)
		}

		if providerName == "" {
			fmt.Print("üîß –í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞: ")
			fmt.Scanln(&providerName)
		}

		// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
		config := &context.ContextConfig{
			BoardID:         boardID,
			ProjectID:       projectID,
			ProviderName:    providerName,
			DefaultAssignee: defaultAssignee,
			DefaultLabels:   []string{"ricochet-managed"},
			DefaultPriority: providers.TaskPriority(defaultPriority),
			ProjectType:     projectType,
			Complexity:      complexity,
			Timeline:        timeline,
			TeamSize:        teamSize,
			WorkflowType:    "agile",
			AutoAssignment:  autoAssignment,
			AutoProgress:    true,
			AIEnabled:       aiEnabled,
			CustomFields:    make(map[string]interface{}),
		}

		// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
		ctx, err := cm.CreateContext(name, description, config)
		if err != nil {
			fmt.Fprintf(os.Stderr, "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: %v\n", err)
			os.Exit(1)
		}

		fmt.Printf("‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ–∑–¥–∞–Ω!\n")
		fmt.Printf("üÜî ID: %s\n", ctx.ID)
		fmt.Printf("üìù –ù–∞–∑–≤–∞–Ω–∏–µ: %s\n", ctx.Name)
		fmt.Printf("üìä –î–æ—Å–∫–∞: %s | –ü—Ä–æ–µ–∫—Ç: %s\n", ctx.BoardID, ctx.ProjectID)
		fmt.Printf("üîß –ü—Ä–æ–≤–∞–π–¥–µ—Ä: %s\n", ctx.ProviderName)

		// –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–¥–µ–ª–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–º
		fmt.Print("üîÑ –°–¥–µ–ª–∞—Ç—å —ç—Ç–æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –∞–∫—Ç–∏–≤–Ω—ã–º? (y/N): ")
		var response string
		fmt.Scanln(&response)
		if strings.ToLower(response) == "y" || strings.ToLower(response) == "yes" {
			if err := cm.SetActiveContext(ctx.ID); err != nil {
				fmt.Fprintf(os.Stderr, "‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: %v\n", err)
			} else {
				fmt.Printf("‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç '%s' –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n", ctx.Name)
			}
		}
	},
}

// switchCmd - –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
var switchCmd = &cobra.Command{
	Use:   "switch [context-id-or-name]",
	Short: "–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –¥—Ä—É–≥–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç",
	Args:  cobra.RangeArgs(0, 1),
	Run: func(cmd *cobra.Command, args []string) {
		log := &ContextLogger{}
		cm := context.NewContextManager("", log)

		contexts := cm.ListContexts()
		if len(contexts) == 0 {
			fmt.Println("üì≠ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤")
			return
		}

		var targetID string

		// –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –∞—Ä–≥—É–º–µ–Ω—Ç, –∏—â–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
		if len(args) > 0 {
			search := args[0]
			for _, ctx := range contexts {
				if ctx.ID == search || strings.EqualFold(ctx.Name, search) {
					targetID = ctx.ID
					break
				}
			}

			if targetID == "" {
				fmt.Printf("‚ùå –ö–æ–Ω—Ç–µ–∫—Å—Ç '%s' –Ω–µ –Ω–∞–π–¥–µ–Ω\n", search)
				os.Exit(1)
			}
		} else {
			// –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤—ã–±–æ—Ä
			fmt.Println("üìã –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç:")
			for i, ctx := range contexts {
				status := ""
				if ctx.IsActive {
					status = "üü¢"
				} else {
					status = "‚ö™"
				}
				fmt.Printf("%d. %s %s - %s\n", i+1, status, ctx.Name, ctx.Description)
			}

			fmt.Print("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: ")
			var choice int
			fmt.Scanln(&choice)

			if choice < 1 || choice > len(contexts) {
				fmt.Println("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
				os.Exit(1)
			}

			targetID = contexts[choice-1].ID
		}

		// –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç
		if err := cm.SetActiveContext(targetID); err != nil {
			fmt.Fprintf(os.Stderr, "‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è: %v\n", err)
			os.Exit(1)
		}

		// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫—Ç–∏–≤–Ω–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
		ctx, _ := cm.GetActiveContext()
		fmt.Printf("‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç '%s'\n", ctx.Name)
		fmt.Printf("üìä –î–æ—Å–∫–∞: %s | –ü—Ä–æ–µ–∫—Ç: %s\n", ctx.BoardID, ctx.ProjectID)
	},
}

// currentCmd - —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
var currentCmd = &cobra.Command{
	Use:   "current",
	Short: "–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç",
	Run: func(cmd *cobra.Command, args []string) {
		log := &ContextLogger{}
		cm := context.NewContextManager("", log)

		ctx, err := cm.GetActiveContext()
		if err != nil {
			fmt.Println("üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞")
			fmt.Println("–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π: ricochet context create")
			return
		}

		fmt.Println("üéØ –¢–µ–∫—É—â–∏–π —Ä–∞–±–æ—á–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç:")
		fmt.Println(strings.Repeat("=", 40))
		fmt.Printf("üìù –ù–∞–∑–≤–∞–Ω–∏–µ: %s\n", ctx.Name)
		fmt.Printf("üìã –û–ø–∏—Å–∞–Ω–∏–µ: %s\n", ctx.Description)
		fmt.Printf("üÜî ID: %s\n", ctx.ID)
		fmt.Println()

		fmt.Println("üìä –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å–∫–∏:")
		fmt.Printf("  ‚Ä¢ –î–æ—Å–∫–∞: %s\n", ctx.BoardID)
		fmt.Printf("  ‚Ä¢ –ü—Ä–æ–µ–∫—Ç: %s\n", ctx.ProjectID)
		fmt.Printf("  ‚Ä¢ –ü—Ä–æ–≤–∞–π–¥–µ—Ä: %s\n", ctx.ProviderName)
		fmt.Println()

		fmt.Println("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:")
		fmt.Printf("  ‚Ä¢ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: %s\n", ctx.DefaultAssignee)
		fmt.Printf("  ‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: %s\n", ctx.DefaultPriority)
		fmt.Printf("  ‚Ä¢ –ú–µ—Ç–∫–∏: %v\n", ctx.DefaultLabels)
		fmt.Println()

		fmt.Println("üöÄ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞:")
		fmt.Printf("  ‚Ä¢ –¢–∏–ø: %s\n", ctx.ProjectType)
		fmt.Printf("  ‚Ä¢ –°–ª–æ–∂–Ω–æ—Å—Ç—å: %s\n", ctx.Complexity)
		fmt.Printf("  ‚Ä¢ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏: %d –¥–Ω–µ–π\n", ctx.Timeline)
		fmt.Printf("  ‚Ä¢ –†–∞–∑–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã: %d\n", ctx.TeamSize)
		fmt.Printf("  ‚Ä¢ AI –≤–∫–ª—é—á–µ–Ω: %v\n", ctx.AIEnabled)
		fmt.Printf("  ‚Ä¢ –ê–≤—Ç–æ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ: %v\n", ctx.AutoAssignment)
		fmt.Println()

		if ctx.Stats != nil {
			fmt.Println("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
			fmt.Printf("  ‚Ä¢ –ó–∞–¥–∞—á —Å–æ–∑–¥–∞–Ω–æ: %d\n", ctx.Stats.TasksCreated)
			fmt.Printf("  ‚Ä¢ –ó–∞–¥–∞—á –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: %d\n", ctx.Stats.TasksCompleted)
			fmt.Printf("  ‚Ä¢ –ü–ª–∞–Ω–æ–≤ —Å–æ–∑–¥–∞–Ω–æ: %d\n", ctx.Stats.PlansGenerated)
			if ctx.Stats.TasksCreated > 0 {
				fmt.Printf("  ‚Ä¢ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: %.1f%%\n", ctx.Stats.SuccessRate*100)
			}
			if !ctx.Stats.LastActivity.IsZero() {
				fmt.Printf("  ‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: %s\n", 
					ctx.Stats.LastActivity.Format("2006-01-02 15:04"))
			}
		}

		fmt.Println()
		fmt.Printf("üïê –°–æ–∑–¥–∞–Ω: %s\n", ctx.CreatedAt.Format("2006-01-02 15:04:05"))
		fmt.Printf("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω: %s\n", ctx.UpdatedAt.Format("2006-01-02 15:04:05"))
	},
}

// updateCmd - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
var updateCmd = &cobra.Command{
	Use:   "update [context-id]",
	Short: "–û–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞",
	Args:  cobra.RangeArgs(0, 1),
	Run: func(cmd *cobra.Command, args []string) {
		log := &ContextLogger{}
		cm := context.NewContextManager("", log)

		var targetID string

		// –û–ø—Ä–µ–¥–µ–ª—è–µ–º ID –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
		if len(args) > 0 {
			targetID = args[0]
		} else {
			// –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
			ctx, err := cm.GetActiveContext()
			if err != nil {
				fmt.Println("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
				os.Exit(1)
			}
			targetID = ctx.ID
		}

		// –°–æ–±–∏—Ä–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
		updates := make(map[string]interface{})

		if cmd.Flags().Changed("name") {
			updates["name"] = contextName
		}
		if cmd.Flags().Changed("description") {
			updates["description"] = contextDescription
		}
		if cmd.Flags().Changed("board-id") {
			updates["board_id"] = boardID
		}
		if cmd.Flags().Changed("project-id") {
			updates["project_id"] = projectID
		}
		if cmd.Flags().Changed("provider") {
			updates["provider_name"] = providerName
		}
		if cmd.Flags().Changed("assignee") {
			updates["default_assignee"] = defaultAssignee
		}
		if cmd.Flags().Changed("priority") {
			updates["default_priority"] = defaultPriority
		}
		if cmd.Flags().Changed("type") {
			updates["project_type"] = projectType
		}
		if cmd.Flags().Changed("complexity") {
			updates["complexity"] = complexity
		}
		if cmd.Flags().Changed("timeline") {
			updates["timeline"] = timeline
		}
		if cmd.Flags().Changed("team-size") {
			updates["team_size"] = teamSize
		}
		if cmd.Flags().Changed("ai") {
			updates["ai_enabled"] = aiEnabled
		}

		if len(updates) == 0 {
			fmt.Println("‚ùå –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
			fmt.Println("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–ª–∞–≥–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π, –Ω–∞–ø—Ä–∏–º–µ—Ä:")
			fmt.Println("  ricochet context update --name \"–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ\"")
			return
		}

		// –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
		if err := cm.UpdateContext(targetID, updates); err != nil {
			fmt.Fprintf(os.Stderr, "‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: %v\n", err)
			os.Exit(1)
		}

		fmt.Printf("‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω!\n")
		fmt.Printf("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª–µ–π: %d\n", len(updates))
	},
}

// deleteCmd - —É–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
var deleteCmd = &cobra.Command{
	Use:   "delete [context-id-or-name]",
	Short: "–£–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç",
	Args:  cobra.ExactArgs(1),
	Run: func(cmd *cobra.Command, args []string) {
		log := &ContextLogger{}
		cm := context.NewContextManager("", log)

		search := args[0]
		contexts := cm.ListContexts()

		var targetID string
		var targetName string

		// –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
		for _, ctx := range contexts {
			if ctx.ID == search || strings.EqualFold(ctx.Name, search) {
				targetID = ctx.ID
				targetName = ctx.Name
				break
			}
		}

		if targetID == "" {
			fmt.Printf("‚ùå –ö–æ–Ω—Ç–µ–∫—Å—Ç '%s' –Ω–µ –Ω–∞–π–¥–µ–Ω\n", search)
			os.Exit(1)
		}

		// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
		fmt.Printf("‚ö†Ô∏è  –í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç '%s'? (y/N): ", targetName)
		var response string
		fmt.Scanln(&response)

		if strings.ToLower(response) != "y" && strings.ToLower(response) != "yes" {
			fmt.Println("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
			return
		}

		// –£–¥–∞–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
		if err := cm.DeleteContext(targetID); err != nil {
			fmt.Fprintf(os.Stderr, "‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: %v\n", err)
			os.Exit(1)
		}

		fmt.Printf("‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç '%s' —É–¥–∞–ª–µ–Ω\n", targetName)
	},
}

// analyzeCmd - –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–µ–∫—Ç–∞
var analyzeCmd = &cobra.Command{
	Use:   "analyze [description]",
	Short: "–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞",
	Args:  cobra.RangeArgs(0, 1),
	Run: func(cmd *cobra.Command, args []string) {
		log := &ContextLogger{}
		
		// –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
		description := ""
		if len(args) > 0 {
			description = args[0]
		} else {
			fmt.Print("üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞: ")
			fmt.Scanln(&description)
		}

		if description == "" {
			fmt.Println("‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ")
			os.Exit(1)
		}

		// –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
		aiChains := &ai.AIChains{} // TODO: –ü–æ–¥–∫–ª—é—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ AI chains
		analyzer := context.NewProjectAnalyzer(aiChains, log)

		fmt.Println("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –ø—Ä–æ–µ–∫—Ç...")
		
		// –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑
		analysis, err := analyzer.AnalyzeProject(description, "")
		if err != nil {
			fmt.Fprintf(os.Stderr, "‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: %v\n", err)
			os.Exit(1)
		}

		// –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
		fmt.Println("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:")
		fmt.Println(strings.Repeat("=", 50))
		fmt.Printf("üìù –ù–∞–∑–≤–∞–Ω–∏–µ: %s\n", analysis.ProjectName)
		fmt.Printf("üîß –¢–∏–ø –ø—Ä–æ–µ–∫—Ç–∞: %s\n", analysis.ProjectType)
		fmt.Printf("‚öôÔ∏è  –§—Ä–µ–π–º–≤–æ—Ä–∫: %s\n", analysis.Framework)
		fmt.Printf("üìä –°–ª–æ–∂–Ω–æ—Å—Ç—å: %s\n", analysis.Complexity)
		fmt.Printf("‚è±Ô∏è  –û—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏: %d —á–∞—Å–æ–≤\n", analysis.EstimatedHours)
		fmt.Printf("üë• –†–∞–∑–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã: %d\n", analysis.TeamSize)
		fmt.Printf("üìÖ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏: %d –¥–Ω–µ–π\n", analysis.Timeline)
		fmt.Printf("üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: %.1f%%\n", analysis.Confidence*100)

		if len(analysis.RequiredSkills) > 0 {
			fmt.Printf("üéì –ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –Ω–∞–≤—ã–∫–∏: %s\n", strings.Join(analysis.RequiredSkills, ", "))
		}

		if len(analysis.Risks) > 0 {
			fmt.Println("\n‚ö†Ô∏è  –í—ã—è–≤–ª–µ–Ω–Ω—ã–µ —Ä–∏—Å–∫–∏:")
			for _, risk := range analysis.Risks {
				fmt.Printf("  ‚Ä¢ %s (%s): %s\n", risk.Type, risk.Severity, risk.Description)
			}
		}

		if len(analysis.Recommendations) > 0 {
			fmt.Println("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
			for _, rec := range analysis.Recommendations {
				fmt.Printf("  ‚Ä¢ %s\n", rec)
			}
		}

		// –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç
		fmt.Print("\nüîÑ –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞? (y/N): ")
		var response string
		fmt.Scanln(&response)

		if strings.ToLower(response) == "y" || strings.ToLower(response) == "yes" {
			// –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤–≤–æ–¥ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
			fmt.Print("üéØ –í–≤–µ–¥–∏—Ç–µ ID –¥–æ—Å–∫–∏: ")
			fmt.Scanln(&boardID)

			fmt.Print("üìÅ –í–≤–µ–¥–∏—Ç–µ ID –ø—Ä–æ–µ–∫—Ç–∞: ")
			fmt.Scanln(&projectID)

			fmt.Print("üîß –í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞: ")
			fmt.Scanln(&providerName)

			// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –º–µ–Ω–µ–¥–∂–µ—Ä
			cm := context.NewContextManager("", log)

			// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞
			ctx, err := cm.CreateContext(
				analysis.ProjectName,
				description,
				analysis.Context,
			)
			if err != nil {
				fmt.Fprintf(os.Stderr, "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: %v\n", err)
				os.Exit(1)
			}

			// –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–æ—Å–∫–∏
			updates := map[string]interface{}{
				"board_id":      boardID,
				"project_id":    projectID,
				"provider_name": providerName,
			}

			if err := cm.UpdateContext(ctx.ID, updates); err != nil {
				fmt.Fprintf(os.Stderr, "‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: %v\n", err)
				os.Exit(1)
			}

			fmt.Printf("‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç '%s' —Å–æ–∑–¥–∞–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞!\n", ctx.Name)
			fmt.Printf("üÜî ID: %s\n", ctx.ID)
		}
	},
}

// boardsCmd - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å–∫–∞–º–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
var boardsCmd = &cobra.Command{
	Use:   "boards",
	Short: "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å–∫–∞–º–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ",
}

func init() {
	boardsCmd.AddCommand(&cobra.Command{
		Use:   "list",
		Short: "–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–æ—Å–æ–∫",
		Run: func(cmd *cobra.Command, args []string) {
			log := &ContextLogger{}
			registry := context.NewBoardRegistry("", log)

			// TODO: –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã
			fmt.Println("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–æ—Å–∫–∏:")
			fmt.Println("(–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ - –Ω—É–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã)")
			
			_ = registry // –≤—Ä–µ–º–µ–Ω–Ω–æ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–∫–∏ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏
		},
	})

	boardsCmd.AddCommand(&cobra.Command{
		Use:   "sync",
		Short: "–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Å–∫–∏ —Å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º–∏",
		Run: func(cmd *cobra.Command, args []string) {
			log := &ContextLogger{}
			registry := context.NewBoardRegistry("", log)

			fmt.Println("üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–æ—Å–æ–∫...")
			if err := registry.SyncBoards(); err != nil {
				fmt.Fprintf(os.Stderr, "‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: %v\n", err)
				os.Exit(1)
			}
			fmt.Println("‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
		},
	})
}

// multiCmd - –º—É–ª—å—Ç–∏-–ø—Ä–æ–µ–∫—Ç–Ω—ã–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã
var multiCmd = &cobra.Command{
	Use:   "multi",
	Short: "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º—É–ª—å—Ç–∏-–ø—Ä–æ–µ–∫—Ç–Ω—ã–º–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞–º–∏",
}

func init() {
	multiCmd.AddCommand(&cobra.Command{
		Use:   "set [context-ids...]",
		Short: "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤",
		Args:  cobra.MinimumNArgs(1),
		Run: func(cmd *cobra.Command, args []string) {
			log := &ContextLogger{}
			cm := context.NewContextManager("", log)

			if err := cm.SetMultiProjectContext(args); err != nil {
				fmt.Fprintf(os.Stderr, "‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –º—É–ª—å—Ç–∏-–∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: %v\n", err)
				os.Exit(1)
			}

			fmt.Printf("‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ %d –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤\n", len(args))
			
			// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã
			activeContexts := cm.GetActiveContexts()
			for _, ctx := range activeContexts {
				fmt.Printf("  üü¢ %s - %s\n", ctx.Name, ctx.ProjectID)
			}
		},
	})

	multiCmd.AddCommand(&cobra.Command{
		Use:   "active",
		Short: "–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã",
		Run: func(cmd *cobra.Command, args []string) {
			log := &ContextLogger{}
			cm := context.NewContextManager("", log)

			activeContexts := cm.GetActiveContexts()
			if len(activeContexts) == 0 {
				fmt.Println("üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤")
				return
			}

			fmt.Printf("üü¢ –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã (%d):\n", len(activeContexts))
			fmt.Println(strings.Repeat("=", 40))

			for i, ctx := range activeContexts {
				fmt.Printf("%d. %s\n", i+1, ctx.Name)
				fmt.Printf("   üìä –î–æ—Å–∫–∞: %s | –ü—Ä–æ–µ–∫—Ç: %s\n", ctx.BoardID, ctx.ProjectID)
				fmt.Printf("   üîß –ü—Ä–æ–≤–∞–π–¥–µ—Ä: %s\n", ctx.ProviderName)
				fmt.Println()
			}
		},
	})
}