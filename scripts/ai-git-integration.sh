#!/bin/bash
# –ú–æ—â–Ω–∞—è Git –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –¥–ª—è AI

PROJECT_PATH=${1:-.}
MODE=${2:-"analyze"}  # analyze, sync, create, update, report
OUTPUT_FORMAT=${3:-"ai"}  # ai, json, table

echo "üîó AI Git Integration - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Git –¥–ª—è AI"
echo "üìÅ –ü—Ä–æ–µ–∫—Ç: $PROJECT_PATH"
echo "üîç –†–µ–∂–∏–º: $MODE"
echo "üìä –§–æ—Ä–º–∞—Ç: $OUTPUT_FORMAT"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è AI-–¥—Ä—É–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
ai_git_output() {
    local message="$1"
    local level="$2"  # info, warning, critical, success
    local action="$3"  # optional action for AI
    
    case "$level" in
        "critical")
            echo "üö® CRITICAL: $message"
            if [ ! -z "$action" ]; then
                echo "   üí° AI Action: $action"
            fi
            ;;
        "warning")
            echo "‚ö†Ô∏è  WARNING: $message"
            if [ ! -z "$action" ]; then
                echo "   üí° AI Action: $action"
            fi
            ;;
        "success")
            echo "‚úÖ SUCCESS: $message"
            ;;
        *)
            echo "‚ÑπÔ∏è  INFO: $message"
            ;;
    esac
}

# –§—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
analyze_git_repo() {
    echo "ÔøΩÔøΩ –ê–Ω–∞–ª–∏–∑ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è..."
    
    if [ ! -d "$PROJECT_PATH/.git" ]; then
        ai_git_output "–ù–µ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π" "warning" "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–π Git: git init"
        return
    fi
    
    # –ê–Ω–∞–ª–∏–∑ –∫–æ–º–º–∏—Ç–æ–≤
    local total_commits=$(git -C "$PROJECT_PATH" rev-list --count HEAD 2>/dev/null || echo "0")
    local recent_commits=$(git -C "$PROJECT_PATH" log --oneline -10 2>/dev/null | wc -l)
    local branches=$(git -C "$PROJECT_PATH" branch -r 2>/dev/null | wc -l)
    local current_branch=$(git -C "$PROJECT_PATH" branch --show-current 2>/dev/null || echo "unknown")
    
    ai_git_output "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è:" "info"
    echo "   üìä –í—Å–µ–≥–æ –∫–æ–º–º–∏—Ç–æ–≤: $total_commits"
    echo "   üîÑ –ù–µ–¥–∞–≤–Ω–∏—Ö –∫–æ–º–º–∏—Ç–æ–≤: $recent_commits"
    echo "   üåø –í–µ—Ç–æ–∫: $branches"
    echo "   üìç –¢–µ–∫—É—â–∞—è –≤–µ—Ç–∫–∞: $current_branch"
    
    # –ê–Ω–∞–ª–∏–∑ —Å–≤—è–∑–µ–π —Å –∑–∞–¥–∞—á–∞–º–∏
    local task_commits=$(git -C "$PROJECT_PATH" log --oneline --grep="#[0-9]" 2>/dev/null | wc -l)
    local task_percentage=0
    if [ $total_commits -gt 0 ]; then
        task_percentage=$((task_commits * 100 / total_commits))
    fi
    
    echo "   üîó –ö–æ–º–º–∏—Ç–æ–≤ —Å –∑–∞–¥–∞—á–∞–º–∏: $task_commits ($task_percentage%)"
    
    if [ $task_percentage -lt 20 ]; then
        ai_git_output "–ù–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —Å–≤—è–∑—ã–≤–∞–Ω–∏—è —Å –∑–∞–¥–∞—á–∞–º–∏ ($task_percentage%)" "warning" "–ò—Å–ø–æ–ª—å–∑—É–π 'ai-git-integration.sh sync' –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"
    elif [ $task_percentage -lt 50 ]; then
        ai_git_output "–£–º–µ—Ä–µ–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —Å–≤—è–∑—ã–≤–∞–Ω–∏—è —Å –∑–∞–¥–∞—á–∞–º–∏ ($task_percentage%)" "info" "–†–∞—Å—Å–º–æ—Ç—Ä–∏ –±–æ–ª—å—à–µ —Å–≤—è–∑—ã–≤–∞–Ω–∏—è"
    else
        ai_git_output "–í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —Å–≤—è–∑—ã–≤–∞–Ω–∏—è —Å –∑–∞–¥–∞—á–∞–º–∏ ($task_percentage%)" "success"
    fi
}

# –§—É–Ω–∫—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–æ–º–º–∏—Ç–æ–≤ —Å –∑–∞–¥–∞—á–∞–º–∏
sync_commits_with_tasks() {
    echo "üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–æ–º–º–∏—Ç–æ–≤ —Å –∑–∞–¥–∞—á–∞–º–∏..."
    
    if [ ! -d "$PROJECT_PATH/.git" ]; then
        ai_git_output "–ù–µ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π" "warning" "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–π Git: git init"
        return
    fi
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–æ–≤ —Å ID –∑–∞–¥–∞—á
    local commits_with_tasks=$(git -C "$PROJECT_PATH" log --oneline --grep="#[0-9]" -20 2>/dev/null)
    
    if [ -z "$commits_with_tasks" ]; then
        ai_git_output "–ù–µ—Ç –∫–æ–º–º–∏—Ç–æ–≤ —Å ID –∑–∞–¥–∞—á" "warning" "–ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç: git commit -m 'feat: –æ–ø–∏—Å–∞–Ω–∏–µ #3-45'"
        return
    fi
    
    local synced_count=0
    local updated_count=0
    
    while IFS= read -r commit_line; do
        if [ ! -z "$commit_line" ]; then
            local commit_hash=$(echo "$commit_line" | awk '{print $1}')
            local commit_message=$(echo "$commit_line" | sed 's/^[^ ]* //')
            
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ ID –∑–∞–¥–∞—á–∏
            local task_id=$(echo "$commit_message" | grep -o "#[0-9-]*" | head -1 | sed 's/#//')
            
            if [ ! -z "$task_id" ]; then
                echo "   ÔøΩÔøΩ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–æ–º–º–∏—Ç–∞ $commit_hash —Å –∑–∞–¥–∞—á–µ–π $task_id"
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
                local task_exists=$(./ricochet-task tasks get "$task_id" 2>/dev/null | grep -c "Task ID")
                
                if [ $task_exists -gt 0 ]; then
                    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–æ–º–º–∏—Ç–µ
                    local commit_url=""
                    if command -v git >/dev/null 2>&1; then
                        local remote_url=$(git -C "$PROJECT_PATH" remote get-url origin 2>/dev/null)
                        if [ ! -z "$remote_url" ]; then
                            commit_url="${remote_url}/commit/${commit_hash}"
                        fi
                    fi
                    
                    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–æ–º–º–∏—Ç–µ
                    local comment="üîó Git commit: $commit_hash\nüìù Message: $commit_message"
                    if [ ! -z "$commit_url" ]; then
                        comment="${comment}\nüåê URL: $commit_url"
                    fi
                    
                    echo "   ‚úÖ –ó–∞–¥–∞—á–∞ $task_id –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —Å –∫–æ–º–º–∏—Ç–æ–º $commit_hash"
                    synced_count=$((synced_count + 1))
                else
                    echo "   ‚ö†Ô∏è  –ó–∞–¥–∞—á–∞ $task_id –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
                fi
            fi
        fi
    done <<< "$commits_with_tasks"
    
    ai_git_output "–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ $synced_count –∫–æ–º–º–∏—Ç–æ–≤ —Å –∑–∞–¥–∞—á–∞–º–∏" "success"
}

# –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á –∏–∑ TODO –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
create_tasks_from_todos() {
    echo "üìù –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á –∏–∑ TODO –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤..."
    
    if [ ! -d "$PROJECT_PATH" ]; then
        ai_git_output "–ü–∞–ø–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" "warning" "–£–∫–∞–∂–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É"
        return
    fi
    
    # –ü–æ–∏—Å–∫ TODO –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
    local todo_files=$(find "$PROJECT_PATH" -type f \( -name "*.js" -o -name "*.ts" -o -name "*.py" -o -name "*.go" -o -name "*.rs" -o -name "*.java" \) -exec grep -l "TODO\|FIXME\|HACK" {} \; 2>/dev/null)
    
    if [ -z "$todo_files" ]; then
        ai_git_output "TODO –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã" "info" "–î–æ–±–∞–≤—å TODO –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤ –∫–æ–¥"
        return
    fi
    
    local created_count=0
    
    while IFS= read -r file; do
        if [ ! -z "$file" ]; then
            local relative_file=$(echo "$file" | sed "s|$PROJECT_PATH/||")
            
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ TODO –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
            local todos=$(grep -n "TODO\|FIXME\|HACK" "$file" 2>/dev/null)
            
            while IFS= read -r todo_line; do
                if [ ! -z "$todo_line" ]; then
                    local line_number=$(echo "$todo_line" | cut -d: -f1)
                    local todo_text=$(echo "$todo_line" | sed 's/.*TODO[:\s]*//' | sed 's/.*FIXME[:\s]*//' | sed 's/.*HACK[:\s]*//' | sed 's/^[[:space:]]*//')
                    
                    if [ ! -z "$todo_text" ]; then
                        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏
                        local task_type="task"
                        if echo "$todo_text" | grep -qi "bug\|fix\|error"; then
                            task_type="bug"
                        elif echo "$todo_text" | grep -qi "feature\|add\|implement"; then
                            task_type="feature"
                        fi
                        
                        # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
                        local task_title="TODO: $todo_text"
                        local task_description="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–æ –∏–∑ TODO –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –≤ —Ñ–∞–π–ª–µ $relative_file:$line_number"
                        
                        echo "   üìù –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏: $task_title"
                        
                        # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ —á–µ—Ä–µ–∑ Ricochet
                        # ./ricochet-task tasks create --title "$task_title" --type "$task_type" --description "$task_description" --project "0-1"
                        
                        created_count=$((created_count + 1))
                    fi
                fi
            done <<< "$todos"
        fi
    done <<< "$todo_files"
    
    ai_git_output "–°–æ–∑–¥–∞–Ω–æ $created_count –∑–∞–¥–∞—á –∏–∑ TODO –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤" "success"
}

# –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–¥–∞—á –∏–∑ Git
update_task_status_from_git() {
    echo "üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–¥–∞—á –∏–∑ Git..."
    
    if [ ! -d "$PROJECT_PATH/.git" ]; then
        ai_git_output "–ù–µ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π" "warning" "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–π Git: git init"
        return
    fi
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∫–æ–º–º–∏—Ç–æ–≤
    local recent_commits=$(git -C "$PROJECT_PATH" log --oneline -10 2>/dev/null)
    
    if [ -z "$recent_commits" ]; then
        ai_git_output "–ù–µ—Ç –∫–æ–º–º–∏—Ç–æ–≤" "info" "–°–¥–µ–ª–∞–π –ø–µ—Ä–≤—ã–π –∫–æ–º–º–∏—Ç"
        return
    fi
    
    local updated_count=0
    
    while IFS= read -r commit_line; do
        if [ ! -z "$commit_line" ]; then
            local commit_hash=$(echo "$commit_line" | awk '{print $1}')
            local commit_message=$(echo "$commit_line" | sed 's/^[^ ]* //')
            
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ ID –∑–∞–¥–∞—á–∏
            local task_id=$(echo "$commit_message" | grep -o "#[0-9-]*" | head -1 | sed 's/#//')
            
            if [ ! -z "$task_id" ]; then
                # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ —Ç–∏–ø—É –∫–æ–º–º–∏—Ç–∞
                local new_status="in_progress"
                if echo "$commit_message" | grep -qi "fix\|bug"; then
                    new_status="in_progress"
                elif echo "$commit_message" | grep -qi "feat\|feature"; then
                    new_status="in_progress"
                elif echo "$commit_message" | grep -qi "done\|complete\|finish"; then
                    new_status="completed"
                elif echo "$commit_message" | grep -qi "test"; then
                    new_status="testing"
                fi
                
                echo "   üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ $task_id: $new_status"
                
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏
                # ./ricochet-task tasks update "$task_id" --status "$new_status"
                
                updated_count=$((updated_count + 1))
            fi
        fi
    done <<< "$recent_commits"
    
    ai_git_output "–û–±–Ω–æ–≤–ª–µ–Ω–æ $updated_count –∑–∞–¥–∞—á" "success"
}

# –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ –ø–æ Git –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
generate_git_report() {
    echo "üìã –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ Git –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏..."
    
    local report_file="git-integration-report-$(date +%Y%m%d-%H%M%S).md"
    
    cat > "$report_file" << REPORT
# üîó –û—Ç—á–µ—Ç –ø–æ Git –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ - $(date '+%d.%m.%Y %H:%M')

## üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
REPORT
    
    if [ -d "$PROJECT_PATH/.git" ]; then
        local total_commits=$(git -C "$PROJECT_PATH" rev-list --count HEAD 2>/dev/null || echo "0")
        local branches=$(git -C "$PROJECT_PATH" branch -r 2>/dev/null | wc -l)
        local current_branch=$(git -C "$PROJECT_PATH" branch --show-current 2>/dev/null || echo "unknown")
        
        echo "- –í—Å–µ–≥–æ –∫–æ–º–º–∏—Ç–æ–≤: $total_commits" >> "$report_file"
        echo "- –í–µ—Ç–æ–∫: $branches" >> "$report_file"
        echo "- –¢–µ–∫—É—â–∞—è –≤–µ—Ç–∫–∞: $current_branch" >> "$report_file"
        
        # –ê–Ω–∞–ª–∏–∑ —Å–≤—è–∑–µ–π —Å –∑–∞–¥–∞—á–∞–º–∏
        local task_commits=$(git -C "$PROJECT_PATH" log --oneline --grep="#[0-9]" 2>/dev/null | wc -l)
        local task_percentage=0
        if [ $total_commits -gt 0 ]; then
            task_percentage=$((task_commits * 100 / total_commits))
        fi
        
        echo "- –ö–æ–º–º–∏—Ç–æ–≤ —Å –∑–∞–¥–∞—á–∞–º–∏: $task_commits ($task_percentage%)" >> "$report_file"
    else
        echo "- Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω" >> "$report_file"
    fi
    
    cat >> "$report_file" << REPORT

## üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è AI
- –ò—Å–ø–æ–ª—å–∑—É–π 'ai-git-integration.sh analyze' –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
- –ò—Å–ø–æ–ª—å–∑—É–π 'ai-git-integration.sh sync' –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–æ–º–º–∏—Ç–æ–≤
- –ò—Å–ø–æ–ª—å–∑—É–π 'ai-git-integration.sh create' –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á –∏–∑ TODO
- –ò—Å–ø–æ–ª—å–∑—É–π 'ai-git-integration.sh update' –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤
REPORT
    
    ai_git_output "–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ $report_file" "success"
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    case "$MODE" in
        "analyze")
            analyze_git_repo
            ;;
        "sync")
            sync_commits_with_tasks
            ;;
        "create")
            create_tasks_from_todos
            ;;
        "update")
            update_task_status_from_git
            ;;
        "report")
            generate_git_report
            ;;
        *)
            echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [–ø—É—Ç—å] [—Ä–µ–∂–∏–º] [—Ñ–æ—Ä–º–∞—Ç]"
            echo "–†–µ–∂–∏–º—ã: analyze, sync, create, update, report"
            ;;
    esac
}

# –ó–∞–ø—É—Å–∫
main
