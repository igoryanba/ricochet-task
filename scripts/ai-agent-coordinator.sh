#!/bin/bash
# AI Agent Coordinator - –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è –º–µ–∂–¥—É —Ä–∞–∑–Ω—ã–º–∏ AI –∞–≥–µ–Ω—Ç–∞–º–∏

PROJECT_PATH=${1:-.}
COORDINATION_TYPE=${2:-"assign"}  # assign, sync, handoff, review
AGENT_FROM=${3:-"coordinator"}  # –∞–≥–µ–Ω—Ç, –ø–µ—Ä–µ–¥–∞—é—â–∏–π –∑–∞–¥–∞—á—É
AGENT_TO=${4:-"executor"}  # –∞–≥–µ–Ω—Ç, –ø–æ–ª—É—á–∞—é—â–∏–π –∑–∞–¥–∞—á—É
TASK_ID=${5:-""}  # ID –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏

echo "ü§ù AI Agent Coordinator - –ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è –º–µ–∂–¥—É AI –∞–≥–µ–Ω—Ç–∞–º–∏"
echo "üìÅ –ü—Ä–æ–µ–∫—Ç: $PROJECT_PATH"
echo "üîç –¢–∏–ø: $COORDINATION_TYPE"
echo "üë§ –û—Ç: $AGENT_FROM"
echo "üë§ –ö: $AGENT_TO"
echo "üìù –ó–∞–¥–∞—á–∞: $TASK_ID"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è AI-–¥—Ä—É–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
ai_coordinator_output() {
    local message="$1"
    local level="$2"  # info, warning, critical, success
    local action="$3"  # optional action for AI
    local agent="$4"  # optional agent name
    
    local prefix="ü§ù"
    if [ ! -z "$agent" ]; then
        prefix="ü§ù[$agent]"
    fi
    
    case "$level" in
        "critical")
            echo "$prefix üö® CRITICAL: $message"
            if [ ! -z "$action" ]; then
                echo "   üí° AI Action: $action"
            fi
            ;;
        "warning")
            echo "$prefix ‚ö†Ô∏è  WARNING: $message"
            if [ ! -z "$action" ]; then
                echo "   üí° AI Action: $action"
            fi
            ;;
        "success")
            echo "$prefix ‚úÖ SUCCESS: $message"
            ;;
        *)
            echo "$prefix ‚ÑπÔ∏è  INFO: $message"
            ;;
    esac
}

# –§—É–Ω–∫—Ü–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∑–∞–¥–∞—á –∞–≥–µ–Ω—Ç–∞–º
assign_tasks_to_agents() {
    echo "üìã –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞–¥–∞—á –∞–≥–µ–Ω—Ç–∞–º..."
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ–∑–∞–Ω—è—Ç—ã—Ö –∑–∞–¥–∞—á
    local unassigned_tasks=$(./ricochet-task tasks list --status "open" --limit 20 2>/dev/null | grep -v "ID.*PROVIDER" | grep -v "^--")
    
    if [ -z "$unassigned_tasks" ]; then
        ai_coordinator_output "–ù–µ—Ç –Ω–µ–∑–∞–Ω—è—Ç—ã—Ö –∑–∞–¥–∞—á" "info"
        return
    fi
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–æ–≤ –∏ –∏—Ö —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    local agents=(
        "code-reviewer:code,review,quality"
        "feature-developer:feature,enhancement,new"
        "bug-fixer:bug,fix,debug"
        "test-engineer:test,testing,qa"
        "documentation-writer:docs,documentation,readme"
        "devops-engineer:deploy,infrastructure,ci-cd"
        "security-expert:security,vulnerability,audit"
        "performance-optimizer:performance,optimization,speed"
    )
    
    local assigned_count=0
    
    while IFS= read -r task_line; do
        if [ ! -z "$task_line" ]; then
            local task_id=$(echo "$task_line" | awk '{print $1}')
            local task_title=$(echo "$task_line" | awk '{print $2}')
            local task_type=$(echo "$task_line" | awk '{print $3}')
            
            # –ü–æ–∏—Å–∫ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –∞–≥–µ–Ω—Ç–∞
            local best_agent=""
            local best_score=0
            
            for agent_data in "${agents[@]}"; do
                local agent_name=$(echo "$agent_data" | cut -d: -f1)
                local agent_skills=$(echo "$agent_data" | cut -d: -f2)
                
                local score=0
                for skill in $(echo "$agent_skills" | tr ',' ' '); do
                    if echo "$task_type" | grep -qi "$skill"; then
                        score=$((score + 1))
                    fi
                    if echo "$task_title" | grep -qi "$skill"; then
                        score=$((score + 1))
                    fi
                done
                
                if [ $score -gt $best_score ]; then
                    best_score=$score
                    best_agent="$agent_name"
                fi
            done
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–≥–µ–Ω—Ç, –Ω–∞–∑–Ω–∞—á–∞–µ–º –ø–æ –æ—á–µ—Ä–µ–¥–∏
            if [ -z "$best_agent" ]; then
                local agent_index=$((assigned_count % ${#agents[@]}))
                best_agent=$(echo "${agents[$agent_index]}" | cut -d: -f1)
            fi
            
            echo "   üìù –ó–∞–¥–∞—á–∞ $task_id: $task_title ‚Üí $best_agent"
            
            # –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∞–≥–µ–Ω—Ç—É
            # ./ricochet-task tasks update "$task_id" --assignee "$best_agent"
            
            assigned_count=$((assigned_count + 1))
        fi
    done <<< "$unassigned_tasks"
    
    ai_coordinator_output "–ù–∞–∑–Ω–∞—á–µ–Ω–æ $assigned_count –∑–∞–¥–∞—á –∞–≥–µ–Ω—Ç–∞–º" "success"
}

# –§—É–Ω–∫—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –º–µ–∂–¥—É –∞–≥–µ–Ω—Ç–∞–º–∏
sync_agents() {
    echo "üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –º–µ–∂–¥—É –∞–≥–µ–Ω—Ç–∞–º–∏..."
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á –≤ —Ä–∞–±–æ—Ç–µ
    local active_tasks=$(./ricochet-task tasks list --status "in_progress" --limit 50 2>/dev/null | grep -v "ID.*PROVIDER" | grep -v "^--")
    
    if [ -z "$active_tasks" ]; then
        ai_coordinator_output "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á" "info"
        return
    fi
    
    local synced_count=0
    
    while IFS= read -r task_line; do
        if [ ! -z "$task_line" ]; then
            local task_id=$(echo "$task_line" | awk '{print $1}')
            local task_title=$(echo "$task_line" | awk '{print $2}')
            local assignee=$(echo "$task_line" | awk '{print $NF}')
            
            echo "   üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–¥–∞—á–∏ $task_id —Å $assignee"
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏
            local task_status=$(./ricochet-task tasks get "$task_id" 2>/dev/null | grep "Status" | awk '{print $2}')
            
            if [ "$task_status" = "completed" ]; then
                echo "      ‚úÖ –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –ø–µ—Ä–µ–¥–∞—á–∞ –Ω–∞ —Ä–µ–≤—å—é"
                # –ü–µ—Ä–µ–¥–∞—á–∞ –Ω–∞ —Ä–µ–≤—å—é
                # ./ricochet-task tasks update "$task_id" --assignee "code-reviewer"
            elif [ "$task_status" = "blocked" ]; then
                echo "      üö´ –ó–∞–¥–∞—á–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞, –ø–µ—Ä–µ–¥–∞—á–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—É"
                # –ü–µ—Ä–µ–¥–∞—á–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—É
                # ./ricochet-task tasks update "$task_id" --assignee "coordinator"
            else
                echo "      üîÑ –ó–∞–¥–∞—á–∞ –≤ —Ä–∞–±–æ—Ç–µ, –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"
            fi
            
            synced_count=$((synced_count + 1))
        fi
    done <<< "$active_tasks"
    
    ai_coordinator_output "–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ $synced_count –∑–∞–¥–∞—á" "success"
}

# –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–¥–∞—á–∏ –∑–∞–¥–∞—á –º–µ–∂–¥—É –∞–≥–µ–Ω—Ç–∞–º–∏
handoff_task() {
    echo "ü§ù –ü–µ—Ä–µ–¥–∞—á–∞ –∑–∞–¥–∞—á–∏ –º–µ–∂–¥—É –∞–≥–µ–Ω—Ç–∞–º–∏..."
    
    if [ -z "$TASK_ID" ]; then
        ai_coordinator_output "–ù–µ —É–∫–∞–∑–∞–Ω ID –∑–∞–¥–∞—á–∏" "warning" "–ò—Å–ø–æ–ª—å–∑—É–π: $0 . handoff coordinator executor 3-45"
        return
    fi
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–¥–∞—á–µ
    local task_info=$(./ricochet-task tasks get "$TASK_ID" 2>/dev/null)
    
    if [ -z "$task_info" ]; then
        ai_coordinator_output "–ó–∞–¥–∞—á–∞ $TASK_ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" "warning"
        return
    fi
    
    local task_title=$(echo "$task_info" | grep "Title" | sed 's/Title: *//')
    local current_assignee=$(echo "$task_info" | grep "Assignee" | sed 's/Assignee: *//')
    
    echo "   üìù –ó–∞–¥–∞—á–∞: $task_title"
    echo "   üë§ –¢–µ–∫—É—â–∏–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: $current_assignee"
    echo "   üë§ –ù–æ–≤—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: $AGENT_TO"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ–¥–∞—á–∏
    if [ "$current_assignee" = "$AGENT_TO" ]; then
        ai_coordinator_output "–ó–∞–¥–∞—á–∞ —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –Ω–∞ $AGENT_TO" "warning"
        return
    fi
    
    # –õ–æ–≥–∏–∫–∞ –ø–µ—Ä–µ–¥–∞—á–∏ –∑–∞–¥–∞—á–∏
    case "$AGENT_FROM" in
        "coordinator")
            echo "      üìã –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –ø–µ—Ä–µ–¥–∞–µ—Ç –∑–∞–¥–∞—á—É $AGENT_TO"
            ;;
        "code-reviewer")
            if [ "$AGENT_TO" = "feature-developer" ]; then
                echo "      üîÑ –†–µ–≤—å—é–µ—Ä –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–∞–¥–∞—á—É —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É"
            elif [ "$AGENT_TO" = "test-engineer" ]; then
                echo "      ‚úÖ –†–µ–≤—å—é–µ—Ä –ø–µ—Ä–µ–¥–∞–µ—Ç –∑–∞–¥–∞—á—É —Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫—É"
            fi
            ;;
        "feature-developer")
            if [ "$AGENT_TO" = "code-reviewer" ]; then
                echo "      üìù –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–¥–∞–µ—Ç –∑–∞–¥–∞—á—É –Ω–∞ —Ä–µ–≤—å—é"
            elif [ "$AGENT_TO" = "test-engineer" ]; then
                echo "      üß™ –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–¥–∞–µ—Ç –∑–∞–¥–∞—á—É –Ω–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"
            fi
            ;;
        *)
            echo "      ü§ù –ü–µ—Ä–µ–¥–∞—á–∞ –∑–∞–¥–∞—á–∏ –æ—Ç $AGENT_FROM –∫ $AGENT_TO"
            ;;
    esac
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
    # ./ricochet-task tasks update "$TASK_ID" --assignee "$AGENT_TO"
    
    ai_coordinator_output "–ó–∞–¥–∞—á–∞ $TASK_ID –ø–µ—Ä–µ–¥–∞–Ω–∞ –æ—Ç $AGENT_FROM –∫ $AGENT_TO" "success"
}

# –§—É–Ω–∫—Ü–∏—è —Ä–µ–≤—å—é —Ä–∞–±–æ—Ç—ã –∞–≥–µ–Ω—Ç–æ–≤
review_agent_work() {
    echo "üëÄ –†–µ–≤—å—é —Ä–∞–±–æ—Ç—ã –∞–≥–µ–Ω—Ç–æ–≤..."
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
    local completed_tasks=$(./ricochet-task tasks list --status "completed" --limit 20 2>/dev/null | grep -v "ID.*PROVIDER" | grep -v "^--")
    
    if [ -z "$completed_tasks" ]; then
        ai_coordinator_output "–ù–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è —Ä–µ–≤—å—é" "info"
        return
    fi
    
    local reviewed_count=0
    
    while IFS= read -r task_line; do
        if [ ! -z "$task_line" ]; then
            local task_id=$(echo "$task_line" | awk '{print $1}')
            local task_title=$(echo "$task_line" | awk '{print $2}')
            local assignee=$(echo "$task_line" | awk '{print $NF}')
            
            echo "   üëÄ –†–µ–≤—å—é –∑–∞–¥–∞—á–∏ $task_id: $task_title (–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: $assignee)"
            
            # –°–∏–º—É–ª—è—Ü–∏—è —Ä–µ–≤—å—é
            local review_score=$((RANDOM % 10 + 1))
            
            if [ $review_score -ge 8 ]; then
                echo "      ‚úÖ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞ (–æ—Ü–µ–Ω–∫–∞: $review_score/10)"
                ai_coordinator_output "–ó–∞–¥–∞—á–∞ $task_id –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –æ—Ç–ª–∏—á–Ω–æ" "success"
            elif [ $review_score -ge 6 ]; then
                echo "      üëç –•–æ—Ä–æ—à–∞—è —Ä–∞–±–æ—Ç–∞ (–æ—Ü–µ–Ω–∫–∞: $review_score/10)"
                ai_coordinator_output "–ó–∞–¥–∞—á–∞ $task_id –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —Ö–æ—Ä–æ—à–æ" "info"
            else
                echo "      ‚ö†Ô∏è  –¢—Ä–µ–±—É—é—Ç—Å—è —É–ª—É—á—à–µ–Ω–∏—è (–æ—Ü–µ–Ω–∫–∞: $review_score/10)"
                ai_coordinator_output "–ó–∞–¥–∞—á–∞ $task_id —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏" "warning" "–ü–µ—Ä–µ–¥–∞–π –∑–∞–¥–∞—á—É –æ–±—Ä–∞—Ç–Ω–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é"
            fi
            
            reviewed_count=$((reviewed_count + 1))
        fi
    done <<< "$completed_tasks"
    
    ai_coordinator_output "–ü—Ä–æ–≤–µ–¥–µ–Ω —Ä–µ–≤—å—é $reviewed_count –∑–∞–¥–∞—á" "success"
}

# –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏
generate_coordination_report() {
    echo "üìã –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–æ–≤..."
    
    local report_file="ai-coordination-report-$(date +%Y%m%d-%H%M%S).md"
    
    cat > "$report_file" << REPORT
# ü§ù –û—Ç—á–µ—Ç –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏ AI –∞–≥–µ–Ω—Ç–æ–≤ - $(date '+%d.%m.%Y %H:%M')

## üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏
REPORT
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–≥–µ–Ω—Ç–æ–≤
    local agent_stats=$(./ricochet-task tasks list --limit 100 2>/dev/null | grep -v "ID.*PROVIDER" | grep -v "^--" | awk '{print $NF}' | sort | uniq -c | sort -nr)
    
    while IFS= read -r line; do
        local count=$(echo "$line" | awk '{print $1}')
        local agent=$(echo "$line" | awk '{print $2}')
        
        if [ "$agent" != "admin" ] && [ ! -z "$agent" ]; then
            echo "- **$agent**: $count –∑–∞–¥–∞—á" >> "$report_file"
        fi
    done <<< "$agent_stats"
    
    cat >> "$report_file" << REPORT

## üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è AI
- –ò—Å–ø–æ–ª—å–∑—É–π 'ai-agent-coordinator.sh assign' –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∑–∞–¥–∞—á
- –ò—Å–ø–æ–ª—å–∑—É–π 'ai-agent-coordinator.sh sync' –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
- –ò—Å–ø–æ–ª—å–∑—É–π 'ai-agent-coordinator.sh handoff' –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –∑–∞–¥–∞—á
- –ò—Å–ø–æ–ª—å–∑—É–π 'ai-agent-coordinator.sh review' –¥–ª—è —Ä–µ–≤—å—é —Ä–∞–±–æ—Ç—ã
REPORT
    
    ai_coordinator_output "–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ $report_file" "success"
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    case "$COORDINATION_TYPE" in
        "assign")
            assign_tasks_to_agents
            ;;
        "sync")
            sync_agents
            ;;
        "handoff")
            handoff_task
            ;;
        "review")
            review_agent_work
            ;;
        "report")
            generate_coordination_report
            ;;
        *)
            echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [–ø—É—Ç—å] [—Ç–∏–ø] [–∞–≥–µ–Ω—Ç_–æ—Ç] [–∞–≥–µ–Ω—Ç_–∫] [–∑–∞–¥–∞—á–∞]"
            echo "–¢–∏–ø—ã: assign, sync, handoff, review, report"
            echo "–ê–≥–µ–Ω—Ç—ã: coordinator, code-reviewer, feature-developer, bug-fixer, test-engineer, documentation-writer"
            ;;
    esac
}

# –ó–∞–ø—É—Å–∫
main
