#!/bin/bash
# AI Workflow Orchestrator - –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è –º–µ–∂–¥—É AI –∞–≥–µ–Ω—Ç–∞–º–∏

PROJECT_PATH=${1:-.}
WORKFLOW_TYPE=${2:-"analyze"}  # analyze, coordinate, execute, monitor
AGENT_ROLE=${3:-"coordinator"}  # coordinator, executor, reviewer, monitor
OUTPUT_FORMAT=${4:-"ai"}  # ai, json, table

echo "ü§ñ AI Workflow Orchestrator - –ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è –º–µ–∂–¥—É AI –∞–≥–µ–Ω—Ç–∞–º–∏"
echo "üìÅ –ü—Ä–æ–µ–∫—Ç: $PROJECT_PATH"
echo "üîç –¢–∏–ø: $WORKFLOW_TYPE"
echo "üë§ –†–æ–ª—å: $AGENT_ROLE"
echo "üìä –§–æ—Ä–º–∞—Ç: $OUTPUT_FORMAT"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è AI-–¥—Ä—É–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
ai_workflow_output() {
    local message="$1"
    local level="$2"  # info, warning, critical, success
    local action="$3"  # optional action for AI
    local agent="$4"  # optional agent name
    
    local prefix="ü§ñ"
    if [ ! -z "$agent" ]; then
        prefix="ü§ñ[$agent]"
    fi
    
    case "$level" in
        "critical")
            echo "$prefix üö® CRITICAL: $message"
            if [ ! -z "$action" ]; then
                echo "   üí° AI Action: $action"
            fi
            ;;
        "warning")
            echo "$prefix ‚ö†Ô∏è  WARNING: $message"
            if [ ! -z "$action" ]; then
                echo "   üí° AI Action: $action"
            fi
            ;;
        "success")
            echo "$prefix ‚úÖ SUCCESS: $message"
            ;;
        *)
            echo "$prefix ‚ÑπÔ∏è  INFO: $message"
            ;;
    esac
}

# –§—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ workflow
analyze_workflow() {
    echo "üìä –ê–Ω–∞–ª–∏–∑ AI workflow..."
    
    # –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–∏—Ö –∑–∞–¥–∞—á
    local pending_tasks=$(./ricochet-task tasks list --status "open" --limit 50 2>/dev/null | grep -v "ID.*PROVIDER" | grep -v "^--" | wc -l)
    local in_progress_tasks=$(./ricochet-task tasks list --status "in_progress" --limit 50 2>/dev/null | grep -v "ID.*PROVIDER" | grep -v "^--" | wc -l)
    local completed_tasks=$(./ricochet-task tasks list --status "completed" --limit 50 2>/dev/null | grep -v "ID.*PROVIDER" | grep -v "^--" | wc -l)
    
    ai_workflow_output "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–¥–∞—á:" "info"
    echo "   üìã –û—Ç–∫—Ä—ã—Ç—ã—Ö: $pending_tasks"
    echo "   üîÑ –í —Ä–∞–±–æ—Ç–µ: $in_progress_tasks"
    echo "   ‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: $completed_tasks"
    
    # –ê–Ω–∞–ª–∏–∑ –±–ª–æ–∫–µ—Ä–æ–≤
    local blocked_tasks=$(./ricochet-task tasks list --status "blocked" --limit 50 2>/dev/null | grep -v "ID.*PROVIDER" | grep -v "^--" | wc -l)
    
    if [ $blocked_tasks -gt 0 ]; then
        ai_workflow_output "–ù–∞–π–¥–µ–Ω–æ $blocked_tasks –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á" "warning" "–ò—Å–ø–æ–ª—å–∑—É–π 'ai-workflow-orchestrator.sh unblock' –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏"
    else
        ai_workflow_output "–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –Ω–µ –Ω–∞–π–¥–µ–Ω–æ" "success"
    fi
    
    # –ê–Ω–∞–ª–∏–∑ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤
    local high_priority=$(./ricochet-task tasks list --limit 100 2>/dev/null | grep -v "ID.*PROVIDER" | grep -v "^--" | grep -c "high" || echo "0")
    local medium_priority=$(./ricochet-task tasks list --limit 100 2>/dev/null | grep -v "ID.*PROVIDER" | grep -v "^--" | grep -c "medium" || echo "0")
    local low_priority=$(./ricochet-task tasks list --limit 100 2>/dev/null | grep -v "ID.*PROVIDER" | grep -v "^--" | grep -c "low" || echo "0")
    
    echo "   üö® –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: $high_priority"
    echo "   ‚ö†Ô∏è  –°—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: $medium_priority"
    echo "   ‚ÑπÔ∏è  –ù–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: $low_priority"
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏
    if [ $high_priority -gt 0 ]; then
        ai_workflow_output "–ï—Å—Ç—å –∑–∞–¥–∞—á–∏ –≤—ã—Å–æ–∫–æ–≥–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞" "warning" "–ù–∞–∑–Ω–∞—á—å –∞–≥–µ–Ω—Ç–∞ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—ã—Å–æ–∫–æ–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö –∑–∞–¥–∞—á"
    fi
    
    if [ $in_progress_tasks -gt 5 ]; then
        ai_workflow_output "–ú–Ω–æ–≥–æ –∑–∞–¥–∞—á –≤ —Ä–∞–±–æ—Ç–µ ($in_progress_tasks)" "warning" "–†–∞—Å—Å–º–æ—Ç—Ä–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–≥—Ä—É–∑–∫–∏ –º–µ–∂–¥—É –∞–≥–µ–Ω—Ç–∞–º–∏"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏ –º–µ–∂–¥—É –∞–≥–µ–Ω—Ç–∞–º–∏
coordinate_agents() {
    echo "ü§ù –ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è –º–µ–∂–¥—É AI –∞–≥–µ–Ω—Ç–∞–º–∏..."
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
    local tasks_to_distribute=$(./ricochet-task tasks list --status "open" --limit 20 2>/dev/null | grep -v "ID.*PROVIDER" | grep -v "^--")
    
    if [ -z "$tasks_to_distribute" ]; then
        ai_workflow_output "–ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è" "info"
        return
    fi
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–æ–≤
    local agents=("code-reviewer" "feature-developer" "bug-fixer" "documentation-writer" "test-engineer")
    local agent_index=0
    local distributed_count=0
    
    ai_workflow_output "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á –º–µ–∂–¥—É –∞–≥–µ–Ω—Ç–∞–º–∏:" "info"
    
    while IFS= read -r task_line; do
        if [ ! -z "$task_line" ]; then
            local task_id=$(echo "$task_line" | awk '{print $1}')
            local task_title=$(echo "$task_line" | awk '{print $2}')
            local task_type=$(echo "$task_line" | awk '{print $3}')
            local agent="${agents[$agent_index]}"
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞ –ø–æ —Ç–∏–ø—É –∑–∞–¥–∞—á–∏
            case "$task_type" in
                "bug"|"fix")
                    agent="bug-fixer"
                    ;;
                "feature"|"enhancement")
                    agent="feature-developer"
                    ;;
                "test"|"testing")
                    agent="test-engineer"
                    ;;
                "docs"|"documentation")
                    agent="documentation-writer"
                    ;;
                *)
                    agent="${agents[$agent_index]}"
                    ;;
            esac
            
            echo "   üìù –ó–∞–¥–∞—á–∞ $task_id: $task_title ‚Üí $agent"
            
            # –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∞–≥–µ–Ω—Ç—É (–µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)
            # ./ricochet-task tasks update "$task_id" --assignee "$agent"
            
            agent_index=$((agent_index + 1))
            if [ $agent_index -ge ${#agents[@]} ]; then
                agent_index=0
            fi
            
            distributed_count=$((distributed_count + 1))
        fi
    done <<< "$tasks_to_distribute"
    
    ai_workflow_output "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–æ $distributed_count –∑–∞–¥–∞—á –º–µ–∂–¥—É –∞–≥–µ–Ω—Ç–∞–º–∏" "success"
}

# –§—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è workflow
execute_workflow() {
    echo "‚ö° –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ AI workflow..."
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    local tasks_to_execute=$(./ricochet-task tasks list --status "in_progress" --limit 10 2>/dev/null | grep -v "ID.*PROVIDER" | grep -v "^--")
    
    if [ -z "$tasks_to_execute" ]; then
        ai_workflow_output "–ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è" "info"
        return
    fi
    
    local executed_count=0
    
    while IFS= read -r task_line; do
        if [ ! -z "$task_line" ]; then
            local task_id=$(echo "$task_line" | awk '{print $1}')
            local task_title=$(echo "$task_line" | awk '{print $2}')
            local task_type=$(echo "$task_line" | awk '{print $3}')
            
            echo "   ÔøΩÔøΩ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ $task_id: $task_title"
            
            # –°–∏–º—É–ª—è—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
            case "$task_type" in
                "bug"|"fix")
                    echo "      üêõ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–≥–∞..."
                    # –õ–æ–≥–∏–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–≥–∞
                    ;;
                "feature"|"enhancement")
                    echo "      ‚ú® –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏..."
                    # –õ–æ–≥–∏–∫–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ —Ñ—É–Ω–∫—Ü–∏–∏
                    ;;
                "test"|"testing")
                    echo "      üß™ –ù–∞–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤..."
                    # –õ–æ–≥–∏–∫–∞ –Ω–∞–ø–∏—Å–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤
                    ;;
                "docs"|"documentation")
                    echo "      üìö –ù–∞–ø–∏—Å–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏..."
                    # –õ–æ–≥–∏–∫–∞ –Ω–∞–ø–∏—Å–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
                    ;;
                *)
                    echo "      ‚öôÔ∏è  –û–±—â–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞..."
                    # –û–±—â–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
                    ;;
            esac
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏
            # ./ricochet-task tasks update "$task_id" --status "completed"
            
            executed_count=$((executed_count + 1))
        fi
    done <<< "$tasks_to_execute"
    
    ai_workflow_output "–í—ã–ø–æ–ª–Ω–µ–Ω–æ $executed_count –∑–∞–¥–∞—á" "success"
}

# –§—É–Ω–∫—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ workflow
monitor_workflow() {
    echo "üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ AI workflow..."
    
    # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∞–≥–µ–Ω—Ç–æ–≤
    local agent_stats=$(./ricochet-task tasks list --limit 100 2>/dev/null | grep -v "ID.*PROVIDER" | grep -v "^--" | awk '{print $NF}' | sort | uniq -c | sort -nr)
    
    if [ ! -z "$agent_stats" ]; then
        ai_workflow_output "–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞–≥–µ–Ω—Ç–æ–≤:" "info"
        while IFS= read -r line; do
            local count=$(echo "$line" | awk '{print $1}')
            local agent=$(echo "$line" | awk '{print $2}')
            
            if [ "$agent" != "admin" ] && [ ! -z "$agent" ]; then
                echo "   üë§ $agent: $count –∑–∞–¥–∞—á"
                
                # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∞–≥–µ–Ω—Ç–∞
                if [ $count -gt 10 ]; then
                    ai_workflow_output "$agent –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω ($count –∑–∞–¥–∞—á)" "warning" "–†–∞—Å—Å–º–æ—Ç—Ä–∏ –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á"
                elif [ $count -lt 2 ]; then
                    ai_workflow_output "$agent –Ω–µ–¥–æ–≥—Ä—É–∂–µ–Ω ($count –∑–∞–¥–∞—á)" "warning" "–ù–∞–∑–Ω–∞—á—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏"
                else
                    ai_workflow_output "$agent —Ä–∞–±–æ—Ç–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ ($count –∑–∞–¥–∞—á)" "success"
                fi
            fi
        done <<< "$agent_stats"
    fi
    
    # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–ª–æ–∫–µ—Ä–æ–≤
    local blocked_tasks=$(./ricochet-task tasks list --status "blocked" --limit 50 2>/dev/null | grep -v "ID.*PROVIDER" | grep -v "^--")
    
    if [ ! -z "$blocked_tasks" ]; then
        ai_workflow_output "–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:" "warning"
        while IFS= read -r task_line; do
            if [ ! -z "$task_line" ]; then
                local task_id=$(echo "$task_line" | awk '{print $1}')
                local task_title=$(echo "$task_line" | awk '{print $2}')
                echo "   üö´ $task_id: $task_title"
            fi
        done <<< "$blocked_tasks"
        
        ai_workflow_output "–¢—Ä–µ–±—É–µ—Ç—Å—è –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏" "critical" "–ò—Å–ø–æ–ª—å–∑—É–π 'ai-workflow-orchestrator.sh unblock'"
    fi
    
    # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    local total_tasks=$(./ricochet-task tasks list --limit 100 2>/dev/null | grep -v "ID.*PROVIDER" | grep -v "^--" | wc -l)
    local completed_tasks=$(./ricochet-task tasks list --status "completed" --limit 100 2>/dev/null | grep -v "ID.*PROVIDER" | grep -v "^--" | wc -l)
    local progress_percentage=0
    
    if [ $total_tasks -gt 0 ]; then
        progress_percentage=$((completed_tasks * 100 / total_tasks))
    fi
    
    echo "   üìà –û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å: $progress_percentage% ($completed_tasks/$total_tasks)"
    
    if [ $progress_percentage -gt 80 ]; then
        ai_workflow_output "–û—Ç–ª–∏—á–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å ($progress_percentage%)" "success"
    elif [ $progress_percentage -gt 50 ]; then
        ai_workflow_output "–•–æ—Ä–æ—à–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å ($progress_percentage%)" "info"
    else
        ai_workflow_output "–ù–∏–∑–∫–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å ($progress_percentage%)" "warning" "–†–∞—Å—Å–º–æ—Ç—Ä–∏ —É—Å–∫–æ—Ä–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –∞–≥–µ–Ω—Ç–æ–≤"
    fi
}

# –§—É–Ω–∫—Ü–∏—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∑–∞–¥–∞—á
unblock_tasks() {
    echo "üîì –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∑–∞–¥–∞—á..."
    
    local blocked_tasks=$(./ricochet-task tasks list --status "blocked" --limit 50 2>/dev/null | grep -v "ID.*PROVIDER" | grep -v "^--")
    
    if [ -z "$blocked_tasks" ]; then
        ai_workflow_output "–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –Ω–µ –Ω–∞–π–¥–µ–Ω–æ" "info"
        return
    fi
    
    local unblocked_count=0
    
    while IFS= read -r task_line; do
        if [ ! -z "$task_line" ]; then
            local task_id=$(echo "$task_line" | awk '{print $1}')
            local task_title=$(echo "$task_line" | awk '{print $2}')
            
            echo "   üîì –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∑–∞–¥–∞—á–∏ $task_id: $task_title"
            
            # –õ–æ–≥–∏–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
            # 2. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
            # 3. –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞
            
            # ./ricochet-task tasks update "$task_id" --status "open"
            
            unblocked_count=$((unblocked_count + 1))
        fi
    done <<< "$blocked_tasks"
    
    ai_workflow_output "–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ $unblocked_count –∑–∞–¥–∞—á" "success"
}

# –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ –ø–æ workflow
generate_workflow_report() {
    echo "üìã –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ AI workflow..."
    
    local report_file="ai-workflow-report-$(date +%Y%m%d-%H%M%S).md"
    
    cat > "$report_file" << REPORT
# ü§ñ –û—Ç—á–µ—Ç –ø–æ AI Workflow - $(date '+%d.%m.%Y %H:%M')

## üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ workflow
REPORT
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–¥–∞—á
    local total_tasks=$(./ricochet-task tasks list --limit 100 2>/dev/null | grep -v "ID.*PROVIDER" | grep -v "^--" | wc -l)
    local completed_tasks=$(./ricochet-task tasks list --status "completed" --limit 100 2>/dev/null | grep -v "ID.*PROVIDER" | grep -v "^--" | wc -l)
    local in_progress_tasks=$(./ricochet-task tasks list --status "in_progress" --limit 100 2>/dev/null | grep -v "ID.*PROVIDER" | grep -v "^--" | wc -l)
    local blocked_tasks=$(./ricochet-task tasks list --status "blocked" --limit 100 2>/dev/null | grep -v "ID.*PROVIDER" | grep -v "^--" | wc -l)
    
    echo "- –í—Å–µ–≥–æ –∑–∞–¥–∞—á: $total_tasks" >> "$report_file"
    echo "- –ó–∞–≤–µ—Ä—à–µ–Ω–æ: $completed_tasks" >> "$report_file"
    echo "- –í —Ä–∞–±–æ—Ç–µ: $in_progress_tasks" >> "$report_file"
    echo "- –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: $blocked_tasks" >> "$report_file"
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–≥–µ–Ω—Ç–æ–≤
    local agent_stats=$(./ricochet-task tasks list --limit 100 2>/dev/null | grep -v "ID.*PROVIDER" | grep -v "^--" | awk '{print $NF}' | sort | uniq -c | sort -nr)
    
    cat >> "$report_file" << REPORT

## üë• –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞–≥–µ–Ω—Ç–æ–≤
REPORT
    
    while IFS= read -r line; do
        local count=$(echo "$line" | awk '{print $1}')
        local agent=$(echo "$line" | awk '{print $2}')
        
        if [ "$agent" != "admin" ] && [ ! -z "$agent" ]; then
            echo "- **$agent**: $count –∑–∞–¥–∞—á" >> "$report_file"
        fi
    done <<< "$agent_stats"
    
    cat >> "$report_file" << REPORT

## üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è AI
- –ò—Å–ø–æ–ª—å–∑—É–π 'ai-workflow-orchestrator.sh analyze' –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ workflow
- –ò—Å–ø–æ–ª—å–∑—É–π 'ai-workflow-orchestrator.sh coordinate' –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–æ–≤
- –ò—Å–ø–æ–ª—å–∑—É–π 'ai-workflow-orchestrator.sh execute' –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á
- –ò—Å–ø–æ–ª—å–∑—É–π 'ai-workflow-orchestrator.sh monitor' –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
REPORT
    
    ai_workflow_output "–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ $report_file" "success"
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    case "$WORKFLOW_TYPE" in
        "analyze")
            analyze_workflow
            ;;
        "coordinate")
            coordinate_agents
            ;;
        "execute")
            execute_workflow
            ;;
        "monitor")
            monitor_workflow
            ;;
        "unblock")
            unblock_tasks
            ;;
        "report")
            generate_workflow_report
            ;;
        *)
            echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [–ø—É—Ç—å] [—Ç–∏–ø] [—Ä–æ–ª—å] [—Ñ–æ—Ä–º–∞—Ç]"
            echo "–¢–∏–ø—ã: analyze, coordinate, execute, monitor, unblock, report"
            echo "–†–æ–ª–∏: coordinator, executor, reviewer, monitor"
            ;;
    esac
}

# –ó–∞–ø—É—Å–∫
main
