#!/bin/bash
# AI Git Hooks - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ö—É–∫–∏ –¥–ª—è Git –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏

HOOK_TYPE=${1:-"pre-commit"}  # pre-commit, post-commit, pre-push, post-merge
PROJECT_PATH=${2:-.}

echo "ü™ù AI Git Hooks - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ö—É–∫–∏ –¥–ª—è AI"
echo "üîç –¢–∏–ø —Ö—É–∫–∞: $HOOK_TYPE"
echo "üìÅ –ü—Ä–æ–µ–∫—Ç: $PROJECT_PATH"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è AI-–¥—Ä—É–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
ai_hook_output() {
    local message="$1"
    local level="$2"  # info, warning, critical, success
    
    case "$level" in
        "critical")
            echo "üö® CRITICAL: $message"
            ;;
        "warning")
            echo "‚ö†Ô∏è  WARNING: $message"
            ;;
        "success")
            echo "‚úÖ SUCCESS: $message"
            ;;
        *)
            echo "‚ÑπÔ∏è  INFO: $message"
            ;;
    esac
}

# Pre-commit hook - –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥ –∫–æ–º–º–∏—Ç–æ–º
pre_commit_hook() {
    echo "üîç Pre-commit hook - –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥ –∫–æ–º–º–∏—Ç–æ–º..."
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–º–º–∏—Ç–∞
    local commit_message_file="$1"
    if [ -f "$commit_message_file" ]; then
        local commit_message=$(cat "$commit_message_file")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è ID –∑–∞–¥–∞—á–∏
        if echo "$commit_message" | grep -q "#[0-9]"; then
            ai_hook_output "–ö–æ–º–º–∏—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç ID –∑–∞–¥–∞—á–∏" "success"
        else
            ai_hook_output "–ö–æ–º–º–∏—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç ID –∑–∞–¥–∞—á–∏" "warning"
            echo "   üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç 'feat: –æ–ø–∏—Å–∞–Ω–∏–µ #3-45'"
        fi
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ –∫–æ–º–º–∏—Ç–∞
        if echo "$commit_message" | grep -qE "^(feat|fix|docs|style|refactor|test|chore):"; then
            ai_hook_output "–ö–æ–º–º–∏—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç" "success"
        else
            ai_hook_output "–ö–æ–º–º–∏—Ç –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç conventional commits" "warning"
            echo "   üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ò—Å–ø–æ–ª—å–∑—É–π 'feat:', 'fix:', 'docs:' –∏ —Ç.–¥."
        fi
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ TODO –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
    local staged_files=$(git diff --cached --name-only --diff-filter=ACM)
    local todo_count=0
    
    for file in $staged_files; do
        if [ -f "$file" ]; then
            local todos=$(git diff --cached "$file" | grep -c "TODO\|FIXME\|HACK" 2>/dev/null || echo "0")
            if [[ "$todos" =~ ^[0-9]+$ ]]; then
                todo_count=$((todo_count + todos))
            fi
        fi
    done
    
    if [ $todo_count -gt 0 ]; then
        ai_hook_output "–ù–∞–π–¥–µ–Ω–æ $todo_count TODO –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –≤ staged —Ñ–∞–π–ª–∞—Ö" "warning"
        echo "   üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ò—Å–ø–æ–ª—å–∑—É–π 'ai-git-integration.sh create' –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á"
    fi
}

# Post-commit hook - –¥–µ–π—Å—Ç–≤–∏—è –ø–æ—Å–ª–µ –∫–æ–º–º–∏—Ç–∞
post_commit_hook() {
    echo "üîÑ Post-commit hook - –¥–µ–π—Å—Ç–≤–∏—è –ø–æ—Å–ª–µ –∫–æ–º–º–∏—Ç–∞..."
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–æ–º–º–∏—Ç–∞
    local last_commit=$(git log -1 --pretty=format:"%H %s")
    local commit_hash=$(echo "$last_commit" | awk '{print $1}')
    local commit_message=$(echo "$last_commit" | sed 's/^[^ ]* //')
    
    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ ID –∑–∞–¥–∞—á–∏
    local task_id=$(echo "$commit_message" | grep -o "#[0-9-]*" | head -1 | sed 's/#//')
    
    if [ ! -z "$task_id" ]; then
        ai_hook_output "–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∑–∞–¥–∞—á–∞ $task_id –≤ –∫–æ–º–º–∏—Ç–µ $commit_hash" "info"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
        local task_exists=$(./ricochet-task tasks get "$task_id" 2>/dev/null | grep -c "Task ID")
        
        if [ $task_exists -gt 0 ]; then
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
            echo "   üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ $task_id..."
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ —Ç–∏–ø—É –∫–æ–º–º–∏—Ç–∞
            local new_status="in_progress"
            if echo "$commit_message" | grep -qi "done\|complete\|finish"; then
                new_status="completed"
            elif echo "$commit_message" | grep -qi "test"; then
                new_status="testing"
            fi
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏
            # ./ricochet-task tasks update "$task_id" --status "$new_status"
            
            ai_hook_output "–ó–∞–¥–∞—á–∞ $task_id –æ–±–Ω–æ–≤–ª–µ–Ω–∞: $new_status" "success"
        else
            ai_hook_output "–ó–∞–¥–∞—á–∞ $task_id –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ Ricochet" "warning"
        fi
    else
        ai_hook_output "–ö–æ–º–º–∏—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç ID –∑–∞–¥–∞—á–∏" "info"
    fi
}

# Pre-push hook - –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥ push
pre_push_hook() {
    echo "üöÄ Pre-push hook - –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥ push..."
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–∑–∞–∫–æ–º–º–∏—á–µ–Ω–Ω—ã—Ö TODO
    local uncommitted_todos=$(git diff --name-only | xargs grep -l "TODO\|FIXME\|HACK" 2>/dev/null | wc -l)
    
    if [ $uncommitted_todos -gt 0 ]; then
        ai_hook_output "–ù–∞–π–¥–µ–Ω–æ $uncommitted_todos —Ñ–∞–π–ª–æ–≤ —Å –Ω–µ–∑–∞–∫–æ–º–º–∏—á–µ–Ω–Ω—ã–º–∏ TODO" "warning"
        echo "   üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –°–æ–∑–¥–∞–π –∑–∞–¥–∞—á–∏ –∏–∑ TODO –ø–µ—Ä–µ–¥ push"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑—ã–≤–∞–Ω–∏—è —Å –∑–∞–¥–∞—á–∞–º–∏
    local recent_commits=$(git log --oneline -5)
    local task_commits=0
    
    while IFS= read -r commit_line; do
        if echo "$commit_line" | grep -q "#[0-9]"; then
            task_commits=$((task_commits + 1))
        fi
    done <<< "$recent_commits"
    
    if [ $task_commits -eq 0 ]; then
        ai_hook_output "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∫–æ–º–º–∏—Ç—ã –Ω–µ —Å–≤—è–∑–∞–Ω—ã —Å –∑–∞–¥–∞—á–∞–º–∏" "warning"
        echo "   üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ò—Å–ø–æ–ª—å–∑—É–π ID –∑–∞–¥–∞—á –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –∫–æ–º–º–∏—Ç–æ–≤"
    else
        ai_hook_output "–ù–∞–π–¥–µ–Ω–æ $task_commits –∫–æ–º–º–∏—Ç–æ–≤ —Å –∑–∞–¥–∞—á–∞–º–∏" "success"
    fi
}

# Post-merge hook - –¥–µ–π—Å—Ç–≤–∏—è –ø–æ—Å–ª–µ merge
post_merge_hook() {
    echo "üîÄ Post-merge hook - –¥–µ–π—Å—Ç–≤–∏—è –ø–æ—Å–ª–µ merge..."
    
    # –ê–Ω–∞–ª–∏–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–æ—Å–ª–µ merge
    local changed_files=$(git diff --name-only HEAD~1 HEAD)
    local todo_files=0
    
    for file in $changed_files; do
        if [ -f "$file" ]; then
            local todos=$(git diff HEAD~1 HEAD "$file" | grep -c "TODO\|FIXME\|HACK" || echo "0")
            if [ $todos -gt 0 ]; then
                todo_files=$((todo_files + 1))
            fi
        fi
    done
    
    if [ $todo_files -gt 0 ]; then
        ai_hook_output "–ù–∞–π–¥–µ–Ω–æ $todo_files —Ñ–∞–π–ª–æ–≤ —Å TODO –ø–æ—Å–ª–µ merge" "info"
        echo "   üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ò—Å–ø–æ–ª—å–∑—É–π 'ai-git-integration.sh create' –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á"
    fi
    
    # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –∑–∞–¥–∞—á–∞–º–∏
    echo "   üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –∑–∞–¥–∞—á–∞–º–∏..."
    # ./scripts/ai-git-integration.sh "$PROJECT_PATH" sync
    
    ai_hook_output "Post-merge hook –∑–∞–≤–µ—Ä—à–µ–Ω" "success"
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Git —Ö—É–∫–æ–≤
install_git_hooks() {
    echo "ü™ù –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Git —Ö—É–∫–æ–≤..."
    
    if [ ! -d "$PROJECT_PATH/.git" ]; then
        ai_hook_output "–ù–µ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π" "warning" "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–π Git: git init"
        return
    fi
    
    local hooks_dir="$PROJECT_PATH/.git/hooks"
    
    # Pre-commit hook
    cat > "$hooks_dir/pre-commit" << 'PRE_COMMIT'
#!/bin/bash
./scripts/ai-git-hooks.sh pre-commit "$1"
PRE_COMMIT
    
    # Post-commit hook
    cat > "$hooks_dir/post-commit" << 'POST_COMMIT'
#!/bin/bash
./scripts/ai-git-hooks.sh post-commit
POST_COMMIT
    
    # Pre-push hook
    cat > "$hooks_dir/pre-push" << 'PRE_PUSH'
#!/bin/bash
./scripts/ai-git-hooks.sh pre-push
PRE_PUSH
    
    # Post-merge hook
    cat > "$hooks_dir/post-merge" << 'POST_MERGE'
#!/bin/bash
./scripts/ai-git-hooks.sh post-merge
POST_MERGE
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    chmod +x "$hooks_dir/pre-commit"
    chmod +x "$hooks_dir/post-commit"
    chmod +x "$hooks_dir/pre-push"
    chmod +x "$hooks_dir/post-merge"
    
    ai_hook_output "Git —Ö—É–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã" "success"
    echo "   üìÅ –•—É–∫–∏: $hooks_dir"
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    case "$HOOK_TYPE" in
        "pre-commit")
            pre_commit_hook "$3"
            ;;
        "post-commit")
            post_commit_hook
            ;;
        "pre-push")
            pre_push_hook
            ;;
        "post-merge")
            post_merge_hook
            ;;
        "install")
            install_git_hooks
            ;;
        *)
            echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [—Ç–∏–ø_—Ö—É–∫–∞] [–ø—É—Ç—å] [–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ_–ø–∞—Ä–∞–º–µ—Ç—Ä—ã]"
            echo "–¢–∏–ø—ã —Ö—É–∫–æ–≤: pre-commit, post-commit, pre-push, post-merge, install"
            ;;
    esac
}

# –ó–∞–ø—É—Å–∫
main
