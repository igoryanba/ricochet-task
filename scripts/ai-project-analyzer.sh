#!/bin/bash
# –ú–æ—â–Ω—ã–π AI-–∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ø—Ä–æ–µ–∫—Ç–∞

PROJECT_PATH=${1:-.}
ANALYSIS_DEPTH=${2:-"deep"}  # quick, deep, full
OUTPUT_FORMAT=${3:-"ai"}  # ai, json, table

echo "üß† AI Project Analyzer - –ú–æ—â–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è AI"
echo "üìÅ –ü—Ä–æ–µ–∫—Ç: $PROJECT_PATH"
echo "üîç –ì–ª—É–±–∏–Ω–∞: $ANALYSIS_DEPTH"
echo "üìä –§–æ—Ä–º–∞—Ç: $OUTPUT_FORMAT"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è AI-–¥—Ä—É–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
ai_analyze() {
    local category="$1"
    local message="$2"
    local score="$3"  # 1-10
    local recommendation="$4"
    
    echo "üìä $category: $message"
    echo "   üéØ –û—Ü–µ–Ω–∫–∞: $score/10"
    if [ ! -z "$recommendation" ]; then
        echo "   üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: $recommendation"
    fi
    echo ""
}

# –ê–Ω–∞–ª–∏–∑ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞
analyze_architecture() {
    echo "üèóÔ∏è –ê–Ω–∞–ª–∏–∑ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞..."
    
    local score=5
    local issues=()
    local strengths=()
    
    # –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞–ø–æ–∫
    local has_src=$(find "$PROJECT_PATH" -type d -name "src" | wc -l)
    local has_docs=$(find "$PROJECT_PATH" -type d -name "docs" -o -name "doc" | wc -l)
    local has_tests=$(find "$PROJECT_PATH" -type d -name "test" -o -name "tests" -o -name "__tests__" | wc -l)
    local has_config=$(find "$PROJECT_PATH" -name "*.json" -o -name "*.yaml" -o -name "*.yml" -o -name "*.toml" | wc -l)
    
    if [ "$has_src" -gt 0 ]; then
        strengths+=("–ï—Å—Ç—å –ø–∞–ø–∫–∞ src")
        score=$((score + 1))
    else
        issues+=("–ù–µ—Ç –ø–∞–ø–∫–∏ src")
    fi
    
    if [ "$has_docs" -gt 0 ]; then
        strengths+=("–ï—Å—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è")
        score=$((score + 1))
    else
        issues+=("–ù–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏")
    fi
    
    if [ "$has_tests" -gt 0 ]; then
        strengths+=("–ï—Å—Ç—å —Ç–µ—Å—Ç—ã")
        score=$((score + 1))
    else
        issues+=("–ù–µ—Ç —Ç–µ—Å—Ç–æ–≤")
    fi
    
    if [ "$has_config" -gt 0 ]; then
        strengths+=("–ï—Å—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è")
        score=$((score + 1))
    else
        issues+=("–ù–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
    fi
    
    # –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–æ–≤
    local total_files=$(find "$PROJECT_PATH" -type f \( -name "*.js" -o -name "*.ts" -o -name "*.go" -o -name "*.py" -o -name "*.rs" -o -name "*.java" \) | wc -l)
    local avg_file_size=$(find "$PROJECT_PATH" -type f \( -name "*.js" -o -name "*.ts" -o -name "*.go" -o -name "*.py" \) -exec wc -l {} + 2>/dev/null | tail -1 | awk '{print $1}' | awk '{print $1/'$total_files'}' 2>/dev/null || echo "0")
    
    if [ "$total_files" -gt 10 ]; then
        strengths+=("–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ñ–∞–π–ª–æ–≤ ($total_files)")
        score=$((score + 1))
    else
        issues+=("–ú–∞–ª–æ —Ñ–∞–π–ª–æ–≤ ($total_files)")
    fi
    
    # –í—ã–≤–æ–¥ –∞–Ω–∞–ª–∏–∑–∞
    local message="–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞"
    if [ ${#strengths[@]} -gt 0 ]; then
        message+=" (—Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã: ${strengths[*]})"
    fi
    if [ ${#issues[@]} -gt 0 ]; then
        message+=" (–ø—Ä–æ–±–ª–µ–º—ã: ${issues[*]})"
    fi
    
    local recommendation=""
    if [ $score -lt 6 ]; then
        recommendation="–†–∞—Å—Å–º–æ—Ç—Ä–∏ —É–ª—É—á—à–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞: –¥–æ–±–∞–≤—å –ø–∞–ø–∫–∏ src, docs, tests"
    elif [ $score -gt 8 ]; then
        recommendation="–û—Ç–ª–∏—á–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞! –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ"
    fi
    
    ai_analyze "–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞" "$message" "$score" "$recommendation"
}

# –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞
analyze_code_quality() {
    echo "üîç –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞..."
    
    local score=5
    local issues=()
    local strengths=()
    
    # –ê–Ω–∞–ª–∏–∑ TODO –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
    local todo_count=$(find "$PROJECT_PATH" -name "*.js" -o -name "*.ts" -o -name "*.go" -o -name "*.py" 2>/dev/null | xargs grep -c "TODO\|FIXME\|HACK" 2>/dev/null | awk '{sum+=$1} END {print sum+0}')
    local file_count=$(find "$PROJECT_PATH" -name "*.js" -o -name "*.ts" -o -name "*.go" -o -name "*.py" 2>/dev/null | wc -l)
    local todo_ratio=0
    if [ "$file_count" -gt 0 ]; then
        todo_ratio=$((todo_count * 100 / file_count))
    fi
    
    if [ "$todo_ratio" -lt 5 ]; then
        strengths+=("–ú–∞–ª–æ TODO ($todo_ratio%)")
        score=$((score + 2))
    elif [ "$todo_ratio" -gt 20 ]; then
        issues+=("–ú–Ω–æ–≥–æ TODO ($todo_ratio%)")
        score=$((score - 2))
    fi
    
    # –ê–Ω–∞–ª–∏–∑ –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
    local large_files=$(find "$PROJECT_PATH" -name "*.js" -o -name "*.ts" -o -name "*.go" -o -name "*.py" 2>/dev/null | xargs wc -l 2>/dev/null | awk '$1 > 500 {print $2}' | wc -l)
    if [ "$large_files" -eq 0 ]; then
        strengths+=("–ù–µ—Ç –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤")
        score=$((score + 2))
    else
        issues+=("$large_files –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤")
        score=$((score - 1))
    fi
    
    # –ê–Ω–∞–ª–∏–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
    local duplicate_files=$(find "$PROJECT_PATH" -name "*.js" -o -name "*.ts" 2>/dev/null | head -10 | xargs -I {} sh -c 'echo "{}:$(sort "{}" | uniq -d | wc -l)"' 2>/dev/null | awk -F: '$2 > 10 {print $1}' | wc -l)
    if [ "$duplicate_files" -eq 0 ]; then
        strengths+=("–ù–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è")
        score=$((score + 1))
    else
        issues+=("$duplicate_files —Ñ–∞–π–ª–æ–≤ —Å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ–º")
        score=$((score - 1))
    fi
    
    # –í—ã–≤–æ–¥ –∞–Ω–∞–ª–∏–∑–∞
    local message="–ö–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞"
    if [ ${#strengths[@]} -gt 0 ]; then
        message+=" (—Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã: ${strengths[*]})"
    fi
    if [ ${#issues[@]} -gt 0 ]; then
        message+=" (–ø—Ä–æ–±–ª–µ–º—ã: ${issues[*]})"
    fi
    
    local recommendation=""
    if [ $score -lt 6 ]; then
        recommendation="–£–ª—É—á—à–∏ –∫–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞: –∏—Å–ø—Ä–∞–≤—å TODO, —Ä–∞–∑–±–µ–π –±–æ–ª—å—à–∏–µ —Ñ–∞–π–ª—ã, —É—Å—Ç—Ä–∞–Ω–∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ"
    elif [ $score -gt 8 ]; then
        recommendation="–û—Ç–ª–∏—á–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞! –ü—Ä–æ–¥–æ–ª–∂–∞–π –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –≤—ã—Å–æ–∫–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã"
    fi
    
    ai_analyze "–ö–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞" "$message" "$score" "$recommendation"
}

# –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—ã
analyze_team_performance() {
    echo "üë• –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—ã..."
    
    local score=5
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–¥–∞—á
    local total_tasks=$(./ricochet-task tasks list --limit 100 2>/dev/null | grep -v "ID.*PROVIDER" | grep -v "^--" | wc -l)
    local completed_tasks=$(./ricochet-task tasks list --status "completed" --limit 100 2>/dev/null | grep -v "ID.*PROVIDER" | grep -v "^--" | wc -l)
    local in_progress_tasks=$(./ricochet-task tasks list --status "in_progress" --limit 100 2>/dev/null | grep -v "ID.*PROVIDER" | grep -v "^--" | wc -l)
    local critical_tasks=$(./ricochet-task tasks list --priority "critical" --status "open" --limit 100 2>/dev/null | grep -v "ID.*PROVIDER" | grep -v "^--" | wc -l)
    
    # –†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫
    local completion_rate=0
    if [ $total_tasks -gt 0 ]; then
        completion_rate=$((completed_tasks * 100 / total_tasks))
    fi
    
    local active_rate=0
    if [ $total_tasks -gt 0 ]; then
        active_rate=$((in_progress_tasks * 100 / total_tasks))
    fi
    
    local critical_rate=0
    if [ $total_tasks -gt 0 ]; then
        critical_rate=$((critical_tasks * 100 / total_tasks))
    fi
    
    # –û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    if [ $completion_rate -gt 70 ]; then
        score=$((score + 2))
    elif [ $completion_rate -lt 30 ]; then
        score=$((score - 2))
    fi
    
    if [ $active_rate -gt 20 ] && [ $active_rate -lt 60 ]; then
        score=$((score + 1))
    elif [ $active_rate -gt 80 ]; then
        score=$((score - 1))
    fi
    
    if [ $critical_rate -lt 10 ]; then
        score=$((score + 1))
    elif [ $critical_rate -gt 30 ]; then
        score=$((score - 2))
    fi
    
    # –í—ã–≤–æ–¥ –∞–Ω–∞–ª–∏–∑–∞
    local message="–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–æ–º–∞–Ω–¥—ã (–∑–∞–≤–µ—Ä—à–µ–Ω–æ: $completion_rate%, –≤ —Ä–∞–±–æ—Ç–µ: $active_rate%, –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö: $critical_rate%)"
    
    local recommendation=""
    if [ $score -lt 6 ]; then
        recommendation="–£–ª—É—á—à–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: —É–ø—Ä–æ—Å—Ç–∏ –∑–∞–¥–∞—á–∏, —É–≤–µ–ª–∏—á—å –∫–æ–º–∞–Ω–¥—É, —Ä–µ—à–∞–π –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã"
    elif [ $score -gt 8 ]; then
        recommendation="–û—Ç–ª–∏—á–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å! –ö–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ"
    fi
    
    ai_analyze "–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–æ–º–∞–Ω–¥—ã" "$message" "$score" "$recommendation"
}

# –ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞
analyze_project_risks() {
    echo "‚ö†Ô∏è –ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞..."
    
    local score=8
    local risks=()
    
    # –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–º–µ—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞
    local project_size=$(find "$PROJECT_PATH" -name "*.js" -o -name "*.ts" -o -name "*.go" -o -name "*.py" 2>/dev/null | wc -l)
    if [ "$project_size" -gt 200 ]; then
        risks+=("–ë–æ–ª—å—à–æ–π –ø—Ä–æ–µ–∫—Ç ($project_size —Ñ–∞–π–ª–æ–≤)")
        score=$((score - 1))
    fi
    
    # –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    if [ -f "package.json" ]; then
        local dep_count=$(grep -A 20 '"dependencies"' package.json | grep -c '".*":' 2>/dev/null || echo "0")
        if [ "$dep_count" -gt 100 ]; then
            risks+=("–ú–Ω–æ–≥–æ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π ($dep_count)")
            score=$((score - 1))
        fi
    fi
    
    # –ê–Ω–∞–ª–∏–∑ git —Å—Ç–∞—Ç—É—Å–∞
    if [ -d ".git" ]; then
        local uncommitted=$(git status --porcelain 2>/dev/null | wc -l)
        if [ "$uncommitted" -gt 100 ]; then
            risks+=("–ú–Ω–æ–≥–æ –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π ($uncommitted)")
            score=$((score - 1))
        fi
        
        local unpushed=$(git log --oneline origin/HEAD..HEAD 2>/dev/null | wc -l)
        if [ "$unpushed" -gt 50 ]; then
            risks+=("–ú–Ω–æ–≥–æ –Ω–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–æ–º–º–∏—Ç–æ–≤ ($unpushed)")
            score=$((score - 1))
        fi
    fi
    
    # –ê–Ω–∞–ª–∏–∑ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á
    local critical_tasks=$(./ricochet-task tasks list --priority "critical" --status "open" --limit 100 2>/dev/null | grep -v "ID.*PROVIDER" | grep -v "^--" | wc -l)
    if [ "$critical_tasks" -gt 5 ]; then
        risks+=("–ú–Ω–æ–≥–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á ($critical_tasks)")
        score=$((score - 2))
    fi
    
    # –í—ã–≤–æ–¥ –∞–Ω–∞–ª–∏–∑–∞
    local message="–†–∏—Å–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞"
    if [ ${#risks[@]} -gt 0 ]; then
        message+=" (—Ä–∏—Å–∫–∏: ${risks[*]})"
    else
        message+=" (—Ä–∏—Å–∫–æ–≤ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ)"
    fi
    
    local recommendation=""
    if [ $score -lt 6 ]; then
        recommendation="–í—ã—Å–æ–∫–∏–µ —Ä–∏—Å–∫–∏! –£—Å—Ç—Ä–∞–Ω–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã, —É–ø—Ä–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç"
    elif [ $score -gt 8 ]; then
        recommendation="–ù–∏–∑–∫–∏–µ —Ä–∏—Å–∫–∏! –ü—Ä–æ–µ–∫—Ç –≤ —Ö–æ—Ä–æ—à–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏"
    fi
    
    ai_analyze "–†–∏—Å–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞" "$message" "$score" "$recommendation"
}

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±—â–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è AI
generate_ai_recommendations() {
    echo "üí° –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è AI..."
    
    local recommendations=()
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞
    local critical_tasks=$(./ricochet-task tasks list --priority "critical" --status "open" --limit 100 2>/dev/null | grep -v "ID.*PROVIDER" | grep -v "^--" | wc -l)
    if [ "$critical_tasks" -gt 0 ]; then
        recommendations+=("–°–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Å—è –Ω–∞ $critical_tasks –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á–∞—Ö")
    fi
    
    local todo_count=$(find "$PROJECT_PATH" -name "*.js" -o -name "*.ts" -o -name "*.go" -o -name "*.py" 2>/dev/null | xargs grep -c "TODO\|FIXME" 2>/dev/null | awk '{sum+=$1} END {print sum+0}')
    if [ "$todo_count" -gt 10 ]; then
        recommendations+=("–û–±—Ä–∞—Ç–∏ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ $todo_count TODO –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤")
    fi
    
    local large_files=$(find "$PROJECT_PATH" -name "*.js" -o -name "*.ts" -o -name "*.go" -o -name "*.py" 2>/dev/null | xargs wc -l 2>/dev/null | awk '$1 > 500 {print $2}' | wc -l)
    if [ "$large_files" -gt 0 ]; then
        recommendations+=("–†–∞—Å—Å–º–æ—Ç—Ä–∏ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ $large_files –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤")
    fi
    
    local completion_rate=0
    local total_tasks=$(./ricochet-task tasks list --limit 100 2>/dev/null | grep -v "ID.*PROVIDER" | grep -v "^--" | wc -l)
    local completed_tasks=$(./ricochet-task tasks list --status "completed" --limit 100 2>/dev/null | grep -v "ID.*PROVIDER" | grep -v "^--" | wc -l)
    if [ $total_tasks -gt 0 ]; then
        completion_rate=$((completed_tasks * 100 / total_tasks))
    fi
    
    if [ $completion_rate -lt 30 ]; then
        recommendations+=("–£–ª—É—á—à–∏ —Å–∫–æ—Ä–æ—Å—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á ($completion_rate%)")
    fi
    
    # –í—ã–≤–æ–¥ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    if [ ${#recommendations[@]} -gt 0 ]; then
        echo "üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è AI:"
        for rec in "${recommendations[@]}"; do
            echo "   üí° $rec"
        done
    else
        echo "‚úÖ –ü—Ä–æ–µ–∫—Ç –≤ –æ—Ç–ª–∏—á–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏! –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ"
    fi
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞
main_analysis() {
    local start_time=$(date +%s)
    
    echo "üöÄ –ó–∞–ø—É—Å–∫ AI Project Analyzer..."
    echo "=========================================="
    
    # –ê–Ω–∞–ª–∏–∑ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
    analyze_architecture
    
    # –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞
    analyze_code_quality
    
    # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—ã
    analyze_team_performance
    
    # –ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞
    analyze_project_risks
    
    echo "=========================================="
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    generate_ai_recommendations
    
    local end_time=$(date +%s)
    local duration=$((end_time - start_time))
    
    echo ""
    echo "‚è±Ô∏è –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ ${duration}—Å"
}

# –ó–∞–ø—É—Å–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≥–ª—É–±–∏–Ω—ã
case "$ANALYSIS_DEPTH" in
    "quick")
        echo "‚ö° –ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑"
        analyze_architecture
        analyze_code_quality
        ;;
    "deep")
        main_analysis
        ;;
    "full")
        echo "üîç –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑"
        main_analysis
        generate_ai_recommendations
        ;;
    *)
        main_analysis
        ;;
esac
