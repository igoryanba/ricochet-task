#!/bin/bash
# –°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∫–æ–¥–∞

FILE_PATH=${1:-.}
COMPLEXITY_THRESHOLD=${2:-8}

echo "üîç –ê–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∫–æ–¥–∞: $FILE_PATH"

# –§—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ JavaScript/TypeScript
analyze_js_complexity() {
    local file="$1"
    local complexity=0
    
    # –ü–æ–¥—Å—á–µ—Ç —É—Å–ª–æ–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
    local if_count=$(grep -c "if\|else\|switch\|case" "$file" 2>/dev/null || echo "0")
    local loop_count=$(grep -c "for\|while\|do" "$file" 2>/dev/null || echo "0")
    local try_count=$(grep -c "try\|catch\|finally" "$file" 2>/dev/null || echo "0")
    
    # –ü–æ–¥—Å—á–µ—Ç —Ñ—É–Ω–∫—Ü–∏–π
    local function_count=$(grep -c "function\|=>" "$file" 2>/dev/null || echo "0")
    
    # –ü–æ–¥—Å—á–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ñ—É–Ω–∫—Ü–∏–π
    local max_params=0
    while IFS= read -r line; do
        local param_count=$(echo "$line" | grep -o "," | wc -l)
        param_count=$((param_count + 1))
        if [ $param_count -gt $max_params ]; then
            max_params=$param_count
        fi
    done < <(grep "function.*(" "$file" 2>/dev/null)
    
    # –†–∞—Å—á–µ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    complexity=$((if_count + loop_count + try_count + function_count))
    
    # –®—Ç—Ä–∞—Ñ –∑–∞ –¥–ª–∏–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    local line_count=$(wc -l < "$file" 2>/dev/null || echo "0")
    if [ $line_count -gt 50 ]; then
        complexity=$((complexity + 2))
    fi
    
    # –®—Ç—Ä–∞—Ñ –∑–∞ –º–Ω–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    if [ $max_params -gt 5 ]; then
        complexity=$((complexity + 2))
    fi
    
    echo "$complexity"
}

# –§—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ Go –∫–æ–¥–∞
analyze_go_complexity() {
    local file="$1"
    local complexity=0
    
    # –ü–æ–¥—Å—á–µ—Ç —É—Å–ª–æ–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
    local if_count=$(grep -c "if\|else\|switch\|case" "$file" 2>/dev/null || echo "0")
    local loop_count=$(grep -c "for\|range" "$file" 2>/dev/null || echo "0")
    local defer_count=$(grep -c "defer" "$file" 2>/dev/null || echo "0")
    
    # –ü–æ–¥—Å—á–µ—Ç —Ñ—É–Ω–∫—Ü–∏–π
    local function_count=$(grep -c "func " "$file" 2>/dev/null || echo "0")
    
    # –ü–æ–¥—Å—á–µ—Ç –≥–æ—Ä—É—Ç–∏–Ω
    local goroutine_count=$(grep -c "go " "$file" 2>/dev/null || echo "0")
    
    # –†–∞—Å—á–µ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    complexity=$((if_count + loop_count + defer_count + function_count + goroutine_count))
    
    # –®—Ç—Ä–∞—Ñ –∑–∞ –¥–ª–∏–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    local line_count=$(wc -l < "$file" 2>/dev/null || echo "0")
    if [ $line_count -gt 100 ]; then
        complexity=$((complexity + 3))
    fi
    
    echo "$complexity"
}

# –§—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ Python –∫–æ–¥–∞
analyze_python_complexity() {
    local file="$1"
    local complexity=0
    
    # –ü–æ–¥—Å—á–µ—Ç —É—Å–ª–æ–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
    local if_count=$(grep -c "if\|elif\|else" "$file" 2>/dev/null || echo "0")
    local loop_count=$(grep -c "for\|while" "$file" 2>/dev/null || echo "0")
    local try_count=$(grep -c "try\|except\|finally" "$file" 2>/dev/null || echo "0")
    
    # –ü–æ–¥—Å—á–µ—Ç —Ñ—É–Ω–∫—Ü–∏–π –∏ –∫–ª–∞—Å—Å–æ–≤
    local function_count=$(grep -c "def " "$file" 2>/dev/null || echo "0")
    local class_count=$(grep -c "class " "$file" 2>/dev/null || echo "0")
    
    # –ü–æ–¥—Å—á–µ—Ç –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏ (–æ—Ç—Å—Ç—É–ø—ã)
    local max_indent=0
    while IFS= read -r line; do
        local indent=$(echo "$line" | sed 's/[^ ].*//' | wc -c)
        indent=$((indent - 1))
        if [ $indent -gt $max_indent ]; then
            max_indent=$indent
        fi
    done < "$file" 2>/dev/null
    
    # –†–∞—Å—á–µ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    complexity=$((if_count + loop_count + try_count + function_count + class_count))
    
    # –®—Ç—Ä–∞—Ñ –∑–∞ –≤—ã—Å–æ–∫—É—é –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç—å
    if [ $max_indent -gt 4 ]; then
        complexity=$((complexity + 3))
    fi
    
    echo "$complexity"
}

# –§—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ TODO –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
analyze_todos() {
    local file="$1"
    local todos=()
    
    # –ü–æ–∏—Å–∫ TODO –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
    while IFS= read -r line; do
        local line_num=$(echo "$line" | cut -d: -f1)
        local content=$(echo "$line" | cut -d: -f2-)
        todos+=("$line_num:$content")
    done < <(grep -n "TODO\|FIXME\|HACK\|XXX" "$file" 2>/dev/null)
    
    printf '%s\n' "${todos[@]}"
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞
analyze_file() {
    local file="$1"
    local file_ext="${file##*.}"
    local complexity=0
    local todos=()
    
    echo "üìÑ –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞: $file"
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞ –∏ –∞–Ω–∞–ª–∏–∑
    case "$file_ext" in
        "js"|"ts"|"jsx"|"tsx")
            complexity=$(analyze_js_complexity "$file")
            ;;
        "go")
            complexity=$(analyze_go_complexity "$file")
            ;;
        "py")
            complexity=$(analyze_python_complexity "$file")
            ;;
        *)
            echo "‚ö†Ô∏è –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞: $file_ext"
            return
            ;;
    esac
    
    # –ê–Ω–∞–ª–∏–∑ TODO –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
    todos=($(analyze_todos "$file"))
    
    # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    echo "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:"
    echo "  –°–ª–æ–∂–Ω–æ—Å—Ç—å: $complexity"
    echo "  TODO –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: ${#todos[@]}"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä–æ–≥–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    if [ $complexity -gt $COMPLEXITY_THRESHOLD ]; then
        echo "‚ö†Ô∏è –í—ã—Å–æ–∫–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å! –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥"
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –¥–ª—è —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞
        local task_title="Refactor $(basename "$file")"
        local task_description="–§–∞–π–ª –∏–º–µ–µ—Ç –≤—ã—Å–æ–∫—É—é —Å–ª–æ–∂–Ω–æ—Å—Ç—å ($complexity). –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Ä–∞–∑–±–∏—Ç—å –Ω–∞ –±–æ–ª–µ–µ –º–µ–ª–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏."
        
        echo "üìù –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –¥–ª—è —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞..."
        ./ricochet-task tasks create \
            --title "$task_title" \
            --description "$task_description" \
            --type "refactoring" \
            --priority "medium" \
            --labels "complexity,refactoring" \
            --project "0-1"
    fi
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á –¥–ª—è TODO –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
    if [ ${#todos[@]} -gt 0 ]; then
        echo "üìù –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á –¥–ª—è TODO –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤..."
        
        for todo in "${todos[@]}"; do
            local line_num=$(echo "$todo" | cut -d: -f1)
            local content=$(echo "$todo" | cut -d: -f2- | sed 's/^[[:space:]]*//')
            
            local task_title="TODO: $content"
            local task_description="–ù–∞–π–¥–µ–Ω –≤ —Ñ–∞–π–ª–µ $file –Ω–∞ —Å—Ç—Ä–æ–∫–µ $line_num"
            
            ./ricochet-task tasks create \
                --title "$task_title" \
                --description "$task_description" \
                --type "task" \
                --priority "low" \
                --labels "todo,code-review" \
                --project "0-1"
        done
    fi
}

# –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞ –∏–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
if [ -f "$FILE_PATH" ]; then
    analyze_file "$FILE_PATH"
elif [ -d "$FILE_PATH" ]; then
    echo "üìÅ –ê–Ω–∞–ª–∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: $FILE_PATH"
    
    # –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    find "$FILE_PATH" -name "*.js" -o -name "*.ts" -o -name "*.go" -o -name "*.py" | while read -r file; do
        analyze_file "$file"
        echo "---"
    done
else
    echo "‚ùå –§–∞–π–ª –∏–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã: $FILE_PATH"
    exit 1
fi

echo "‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω"
