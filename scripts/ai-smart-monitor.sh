#!/bin/bash
# –ú–æ—â–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è AI

PROJECT_PATH=${1:-.}
MODE=${2:-"full"}  # full, quick, critical
OUTPUT_FORMAT=${3:-"ai"}  # ai, json, table

echo "üß† AI Smart Monitor - –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è AI"
echo "üìÅ –ü—Ä–æ–µ–∫—Ç: $PROJECT_PATH"
echo "üîç –†–µ–∂–∏–º: $MODE"
echo "ÔøΩÔøΩ –§–æ—Ä–º–∞—Ç: $OUTPUT_FORMAT"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è AI-–¥—Ä—É–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
ai_output() {
    local message="$1"
    local level="$2"  # info, warning, critical, success
    local action="$3"  # optional action for AI
    
    case "$level" in
        "critical")
            echo "üö® CRITICAL: $message"
            if [ ! -z "$action" ]; then
                echo "   üí° AI Action: $action"
            fi
            ;;
        "warning")
            echo "‚ö†Ô∏è  WARNING: $message"
            if [ ! -z "$action" ]; then
                echo "   üí° AI Action: $action"
            fi
            ;;
        "success")
            echo "‚úÖ SUCCESS: $message"
            ;;
        *)
            echo "‚ÑπÔ∏è  INFO: $message"
            ;;
    esac
}

# –§—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –±–ª–æ–∫–µ—Ä–æ–≤
analyze_blockers() {
    local blockers=()
    local critical_count=0
    local warning_count=0
    
    echo "üîç –ê–Ω–∞–ª–∏–∑ –±–ª–æ–∫–µ—Ä–æ–≤..."
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á
    local critical_tasks=$(./ricochet-task tasks list --priority "critical" --status "open" --limit 10 2>/dev/null | grep -v "ID.*PROVIDER" | grep -v "^--" | wc -l)
    if [ "$critical_tasks" -gt 0 ]; then
        blockers+=("$critical_tasks –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á —Ç—Ä–µ–±—É—é—Ç –≤–Ω–∏–º–∞–Ω–∏—è")
        critical_count=$((critical_count + critical_tasks))
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á (–µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)
    local overdue_tasks=$(./ricochet-task tasks list --status "open" --limit 50 2>/dev/null | grep -i "overdue\|–ø—Ä–æ—Å—Ä–æ—á" | wc -l)
    if [ "$overdue_tasks" -gt 0 ]; then
        blockers+=("$overdue_tasks –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á")
        warning_count=$((warning_count + overdue_tasks))
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
    local blocked_tasks=$(./ricochet-task tasks list --status "blocked" --limit 10 2>/dev/null | grep -v "ID.*PROVIDER" | grep -v "^--" | wc -l)
    if [ "$blocked_tasks" -gt 0 ]; then
        blockers+=("$blocked_tasks –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á")
        warning_count=$((warning_count + blocked_tasks))
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–∞—á –±–µ–∑ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
    local unassigned_tasks=$(./ricochet-task tasks list --status "open" --limit 50 2>/dev/null | grep -v "ID.*PROVIDER" | grep -v "^--" | grep -v "admin" | wc -l)
    if [ "$unassigned_tasks" -gt 5 ]; then
        blockers+=("$unassigned_tasks –∑–∞–¥–∞—á –±–µ–∑ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è")
        warning_count=$((warning_count + 1))
    fi
    
    # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è AI
    if [ ${#blockers[@]} -gt 0 ]; then
        ai_output "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –±–ª–æ–∫–µ—Ä—ã:" "warning"
        for blocker in "${blockers[@]}"; do
            echo "   ‚Ä¢ $blocker"
        done
        
        # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è AI
        if [ $critical_count -gt 0 ]; then
            ai_output "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏ —Ç—Ä–µ–±—É—é—Ç –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è" "critical" "–ò—Å–ø–æ–ª—å–∑—É–π 'ricochet-task tasks list --priority critical' –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞"
        fi
        
        if [ $warning_count -gt 0 ]; then
            ai_output "–ï—Å—Ç—å –∑–∞–¥–∞—á–∏, —Ç—Ä–µ–±—É—é—â–∏–µ –≤–Ω–∏–º–∞–Ω–∏—è" "warning" "–†–∞—Å—Å–º–æ—Ç—Ä–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏"
        fi
    else
        ai_output "–ë–ª–æ–∫–µ—Ä–æ–≤ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ" "success"
    fi
    
    return $critical_count
}

# –§—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—ã
analyze_team_performance() {
    echo "üë• –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—ã..."
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–¥–∞—á
    local total_tasks=$(./ricochet-task tasks list --limit 100 2>/dev/null | grep -v "ID.*PROVIDER" | grep -v "^--" | wc -l)
    local completed_tasks=$(./ricochet-task tasks list --status "completed" --limit 100 2>/dev/null | grep -v "ID.*PROVIDER" | grep -v "^--" | wc -l)
    local in_progress_tasks=$(./ricochet-task tasks list --status "in_progress" --limit 100 2>/dev/null | grep -v "ID.*PROVIDER" | grep -v "^--" | wc -l)
    
    # –†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫
    local completion_rate=0
    if [ $total_tasks -gt 0 ]; then
        completion_rate=$((completed_tasks * 100 / total_tasks))
    fi
    
    local active_rate=0
    if [ $total_tasks -gt 0 ]; then
        active_rate=$((in_progress_tasks * 100 / total_tasks))
    fi
    
    # –ê–Ω–∞–ª–∏–∑ –¥–ª—è AI
    ai_output "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã:" "info"
    echo "   üìä –í—Å–µ–≥–æ –∑–∞–¥–∞—á: $total_tasks"
    echo "   ‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: $completed_tasks ($completion_rate%)"
    echo "   üîÑ –í —Ä–∞–±–æ—Ç–µ: $in_progress_tasks ($active_rate%)"
    
    # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –¥–ª—è AI
    if [ $completion_rate -lt 30 ]; then
        ai_output "–ù–∏–∑–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á ($completion_rate%)" "warning" "–†–∞—Å—Å–º–æ—Ç—Ä–∏ —É–ø—Ä–æ—â–µ–Ω–∏–µ –∑–∞–¥–∞—á –∏–ª–∏ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã"
    elif [ $completion_rate -gt 80 ]; then
        ai_output "–í—ã—Å–æ–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è ($completion_rate%)" "success"
    fi
    
    if [ $active_rate -lt 10 ]; then
        ai_output "–ú–∞–ª–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á ($active_rate%)" "warning" "–í–æ–∑–º–æ–∂–Ω–æ, –∫–æ–º–∞–Ω–¥–∞ –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω–∞ –∏–ª–∏ –∑–∞–¥–∞—á–∏ —Å–ª–∏—à–∫–æ–º —Å–ª–æ–∂–Ω—ã–µ"
    elif [ $active_rate -gt 50 ]; then
        ai_output "–ú–Ω–æ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á ($active_rate%)" "warning" "–í–æ–∑–º–æ–∂–Ω–∞ –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∞ –∫–æ–º–∞–Ω–¥—ã"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–¥–∞ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –ø—Ä–æ–±–ª–µ–º
analyze_code_issues() {
    echo "üîç –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –ø—Ä–æ–±–ª–µ–º..."
    
    local issues=()
    local critical_issues=0
    
    # –ü–æ–∏—Å–∫ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö TODO
    local critical_todos=$(find "$PROJECT_PATH" -name "*.js" -o -name "*.ts" -o -name "*.go" -o -name "*.py" 2>/dev/null | xargs grep -l "FIXME\|HACK\|XXX" 2>/dev/null | wc -l)
    if [ "$critical_todos" -gt 0 ]; then
        issues+=("$critical_todos —Ñ–∞–π–ª–æ–≤ —Å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–º–∏ TODO")
        critical_issues=$((critical_issues + critical_todos))
    fi
    
    # –ü–æ–∏—Å–∫ –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
    local large_files=$(find "$PROJECT_PATH" -name "*.js" -o -name "*.ts" -o -name "*.go" -o -name "*.py" 2>/dev/null | xargs wc -l 2>/dev/null | awk '$1 > 500 {print $2}' | wc -l)
    if [ "$large_files" -gt 0 ]; then
        issues+=("$large_files —Ñ–∞–π–ª–æ–≤ –±–æ–ª—å—à–µ 500 —Å—Ç—Ä–æ–∫")
    fi
    
    # –ü–æ–∏—Å–∫ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
    local duplicate_files=$(find "$PROJECT_PATH" -name "*.js" -o -name "*.ts" 2>/dev/null | head -10 | xargs -I {} sh -c 'echo "{}:$(sort "{}" | uniq -d | wc -l)"' 2>/dev/null | awk -F: '$2 > 10 {print $1}' | wc -l)
    if [ "$duplicate_files" -gt 0 ]; then
        issues+=("$duplicate_files —Ñ–∞–π–ª–æ–≤ —Å –≤–æ–∑–º–æ–∂–Ω—ã–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ–º")
    fi
    
    # –í—ã–≤–æ–¥ –¥–ª—è AI
    if [ ${#issues[@]} -gt 0 ]; then
        ai_output "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ –∫–æ–¥–µ:" "warning"
        for issue in "${issues[@]}"; do
            echo "   ‚Ä¢ $issue"
        done
        
        if [ $critical_issues -gt 0 ]; then
            ai_output "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –≤ –∫–æ–¥–µ —Ç—Ä–µ–±—É—é—Ç –≤–Ω–∏–º–∞–Ω–∏—è" "critical" "–ò—Å–ø–æ–ª—å–∑—É–π 'scripts/analyze-code-complexity.sh' –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"
        fi
    else
        ai_output "–ü—Ä–æ–±–ª–µ–º –≤ –∫–æ–¥–µ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ" "success"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–∏—Å–∫–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞
analyze_project_risks() {
    echo "‚ö†Ô∏è –ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞..."
    
    local risks=()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞
    local project_size=$(find "$PROJECT_PATH" -name "*.js" -o -name "*.ts" -o -name "*.go" -o -name "*.py" 2>/dev/null | wc -l)
    if [ "$project_size" -gt 100 ]; then
        risks+=("–ë–æ–ª—å—à–æ–π –ø—Ä–æ–µ–∫—Ç ($project_size —Ñ–∞–π–ª–æ–≤) - —Å–ª–æ–∂–Ω–æ—Å—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    if [ -f "package.json" ]; then
        local dependencies=$(grep -c '"dependencies"' package.json 2>/dev/null || echo "0")
        if [ "$dependencies" -gt 0 ]; then
            local dep_count=$(grep -A 20 '"dependencies"' package.json | grep -c '".*":' 2>/dev/null || echo "0")
            if [ "$dep_count" -gt 50 ]; then
                risks+=("–ú–Ω–æ–≥–æ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π ($dep_count) - —Ä–∏—Å–∫ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤")
            fi
        fi
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ git —Å—Ç–∞—Ç—É—Å–∞
    if [ -d ".git" ]; then
        local uncommitted=$(git status --porcelain 2>/dev/null | wc -l)
        if [ "$uncommitted" -gt 20 ]; then
            risks+=("–ú–Ω–æ–≥–æ –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π ($uncommitted —Ñ–∞–π–ª–æ–≤)")
        fi
        
        local unpushed=$(git log --oneline origin/HEAD..HEAD 2>/dev/null | wc -l)
        if [ "$unpushed" -gt 10 ]; then
            risks+=("–ú–Ω–æ–≥–æ –Ω–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–æ–º–º–∏—Ç–æ–≤ ($unpushed)")
        fi
    fi
    
    # –í—ã–≤–æ–¥ –¥–ª—è AI
    if [ ${#risks[@]} -gt 0 ]; then
        ai_output "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Ä–∏—Å–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞:" "warning"
        for risk in "${risks[@]}"; do
            echo "   ‚Ä¢ $risk"
        done
    else
        ai_output "–†–∏—Å–∫–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ" "success"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è AI
generate_ai_recommendations() {
    echo "üí° –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è AI..."
    
    local recommendations=()
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞
    local critical_tasks=$(./ricochet-task tasks list --priority "critical" --status "open" --limit 5 2>/dev/null | grep -v "ID.*PROVIDER" | grep -v "^--" | wc -l)
    if [ "$critical_tasks" -gt 0 ]; then
        recommendations+=("–°–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Å—è –Ω–∞ $critical_tasks –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á–∞—Ö")
    fi
    
    local todo_count=$(find "$PROJECT_PATH" -name "*.js" -o -name "*.ts" -o -name "*.go" -o -name "*.py" 2>/dev/null | xargs grep -c "TODO\|FIXME" 2>/dev/null | awk '{sum+=$1} END {print sum+0}')
    if [ "$todo_count" -gt 10 ]; then
        recommendations+=("–û–±—Ä–∞—Ç–∏ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ $todo_count TODO –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –≤ –∫–æ–¥–µ")
    fi
    
    local large_files=$(find "$PROJECT_PATH" -name "*.js" -o -name "*.ts" -o -name "*.go" -o -name "*.py" 2>/dev/null | xargs wc -l 2>/dev/null | awk '$1 > 500 {print $2}' | wc -l)
    if [ "$large_files" -gt 0 ]; then
        recommendations+=("–†–∞—Å—Å–º–æ—Ç—Ä–∏ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ $large_files –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤")
    fi
    
    # –í—ã–≤–æ–¥ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    if [ ${#recommendations[@]} -gt 0 ]; then
        ai_output "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è AI:" "info"
        for rec in "${recommendations[@]}"; do
            echo "   üí° $rec"
        done
    else
        ai_output "–ü—Ä–æ–µ–∫—Ç –≤ —Ö–æ—Ä–æ—à–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏" "success"
    fi
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
main_monitor() {
    local start_time=$(date +%s)
    
    echo "üöÄ –ó–∞–ø—É—Å–∫ AI Smart Monitor..."
    echo "=========================================="
    
    # –ê–Ω–∞–ª–∏–∑ –±–ª–æ–∫–µ—Ä–æ–≤
    analyze_blockers
    local blocker_status=$?
    
    echo ""
    
    # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—ã
    analyze_team_performance
    
    echo ""
    
    # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º –≤ –∫–æ–¥–µ
    analyze_code_issues
    
    echo ""
    
    # –ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞
    analyze_project_risks
    
    echo ""
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    generate_ai_recommendations
    
    echo ""
    echo "=========================================="
    
    local end_time=$(date +%s)
    local duration=$((end_time - start_time))
    
    ai_output "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ ${duration}—Å" "success"
    
    # –í–æ–∑–≤—Ä–∞—Ç —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è AI
    if [ $blocker_status -gt 0 ]; then
        return 1  # –ï—Å—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
    else
        return 0  # –í—Å–µ –≤ –ø–æ—Ä—è–¥–∫–µ
    fi
}

# –ó–∞–ø—É—Å–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
case "$MODE" in
    "quick")
        echo "‚ö° –ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"
        analyze_blockers
        ;;
    "critical")
        echo "üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"
        analyze_blockers
        analyze_code_issues
        ;;
    "full"|*)
        main_monitor
        ;;
esac

exit $?
