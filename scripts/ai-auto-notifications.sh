#!/bin/bash
# –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è AI

PROJECT_PATH=${1:-.}
CHECK_INTERVAL=${2:-300}  # 5 –º–∏–Ω—É—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
NOTIFICATION_LEVEL=${3:-"all"}  # all, critical, warnings

echo "üîî AI Auto Notifications - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è AI"
echo "üìÅ –ü—Ä–æ–µ–∫—Ç: $PROJECT_PATH"
echo "‚è±Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª: ${CHECK_INTERVAL}—Å"
echo "üìä –£—Ä–æ–≤–µ–Ω—å: $NOTIFICATION_LEVEL"

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
STATE_FILE=".ai-notifications-state.json"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
init_state() {
    if [ ! -f "$STATE_FILE" ]; then
        cat > "$STATE_FILE" << JSON
{
  "last_check": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
  "notifications_sent": 0,
  "critical_alerts": 0,
  "warning_alerts": 0,
  "last_tasks_count": 0,
  "last_critical_count": 0
}
JSON
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è AI
send_ai_notification() {
    local message="$1"
    local level="$2"
    local action="$3"
    local timestamp=$(date '+%H:%M:%S')
    
    echo "[$timestamp] üîî AI NOTIFICATION [$level]: $message"
    if [ ! -z "$action" ]; then
        echo "[$timestamp] üí° AI ACTION: $action"
    fi
    
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª
    echo "[$timestamp] [$level] $message" >> .ai-notifications.log
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
check_critical_changes() {
    local current_critical=$(./ricochet-task tasks list --priority "critical" --status "open" --limit 10 2>/dev/null | grep -v "ID.*PROVIDER" | grep -v "^--" | wc -l)
    local last_critical=$(jq -r '.last_critical_count' "$STATE_FILE")
    
    if [ "$current_critical" -gt "$last_critical" ]; then
        local new_critical=$((current_critical - last_critical))
        send_ai_notification "–ü–æ—è–≤–∏–ª–æ—Å—å $new_critical –Ω–æ–≤—ã—Ö –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á (–≤—Å–µ–≥–æ: $current_critical)" "CRITICAL" "–ò—Å–ø–æ–ª—å–∑—É–π 'ricochet-task tasks list --priority critical' –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞"
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        jq --arg count "$current_critical" '.last_critical_count = ($count | tonumber)' "$STATE_FILE" > "$STATE_FILE.tmp" && mv "$STATE_FILE.tmp" "$STATE_FILE"
        return 1
    fi
    
    return 0
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
check_new_tasks() {
    local current_tasks=$(./ricochet-task tasks list --limit 100 2>/dev/null | grep -v "ID.*PROVIDER" | grep -v "^--" | wc -l)
    local last_tasks=$(jq -r '.last_tasks_count' "$STATE_FILE")
    
    if [ "$current_tasks" -gt "$last_tasks" ]; then
        local new_tasks=$((current_tasks - last_tasks))
        send_ai_notification "–°–æ–∑–¥–∞–Ω–æ $new_tasks –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á (–≤—Å–µ–≥–æ: $current_tasks)" "INFO" "–ò—Å–ø–æ–ª—å–∑—É–π 'ricochet-task tasks list --limit 10' –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö"
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        jq --arg count "$current_tasks" '.last_tasks_count = ($count | tonumber)' "$STATE_FILE" > "$STATE_FILE.tmp" && mv "$STATE_FILE.tmp" "$STATE_FILE"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–ª–æ–∫–µ—Ä–æ–≤
check_blockers() {
    local blockers=()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
    local blocked_tasks=$(./ricochet-task tasks list --status "blocked" --limit 10 2>/dev/null | grep -v "ID.*PROVIDER" | grep -v "^--" | wc -l)
    if [ "$blocked_tasks" -gt 0 ]; then
        blockers+=("$blocked_tasks –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á")
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–∞—á –±–µ–∑ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
    local unassigned_tasks=$(./ricochet-task tasks list --status "open" --limit 50 2>/dev/null | grep -v "ID.*PROVIDER" | grep -v "^--" | grep -v "admin" | wc -l)
    if [ "$unassigned_tasks" -gt 10 ]; then
        blockers+=("$unassigned_tasks –∑–∞–¥–∞—á –±–µ–∑ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è")
    fi
    
    if [ ${#blockers[@]} -gt 0 ]; then
        local blocker_message="–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –±–ª–æ–∫–µ—Ä—ã: ${blockers[*]}"
        send_ai_notification "$blocker_message" "WARNING" "–†–∞—Å—Å–º–æ—Ç—Ä–∏ –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á –∏–ª–∏ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –±–ª–æ–∫–µ—Ä–æ–≤"
        return 1
    fi
    
    return 0
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–±–ª–µ–º –≤ –∫–æ–¥–µ
check_code_issues() {
    local issues=()
    
    # –ü–æ–∏—Å–∫ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö TODO
    local critical_todos=$(find "$PROJECT_PATH" -name "*.js" -o -name "*.ts" -o -name "*.go" -o -name "*.py" 2>/dev/null | xargs grep -l "FIXME\|HACK\|XXX" 2>/dev/null | wc -l)
    if [ "$critical_todos" -gt 0 ]; then
        issues+=("$critical_todos —Ñ–∞–π–ª–æ–≤ —Å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–º–∏ TODO")
    fi
    
    # –ü–æ–∏—Å–∫ –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
    local large_files=$(find "$PROJECT_PATH" -name "*.js" -o -name "*.ts" -o -name "*.go" -o -name "*.py" 2>/dev/null | xargs wc -l 2>/dev/null | awk '$1 > 1000 {print $2}' | wc -l)
    if [ "$large_files" -gt 0 ]; then
        issues+=("$large_files —Ñ–∞–π–ª–æ–≤ –±–æ–ª—å—à–µ 1000 —Å—Ç—Ä–æ–∫")
    fi
    
    if [ ${#issues[@]} -gt 0 ]; then
        local issue_message="–ü—Ä–æ–±–ª–µ–º—ã –≤ –∫–æ–¥–µ: ${issues[*]}"
        send_ai_notification "$issue_message" "WARNING" "–ò—Å–ø–æ–ª—å–∑—É–π 'scripts/analyze-code-complexity.sh' –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"
        return 1
    fi
    
    return 0
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
check_performance() {
    local total_tasks=$(./ricochet-task tasks list --limit 100 2>/dev/null | grep -v "ID.*PROVIDER" | grep -v "^--" | wc -l)
    local completed_tasks=$(./ricochet-task tasks list --status "completed" --limit 100 2>/dev/null | grep -v "ID.*PROVIDER" | grep -v "^--" | wc -l)
    
    if [ $total_tasks -gt 0 ]; then
        local completion_rate=$((completed_tasks * 100 / total_tasks))
        
        if [ $completion_rate -lt 20 ]; then
            send_ai_notification "–ù–∏–∑–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á ($completion_rate%)" "WARNING" "–†–∞—Å—Å–º–æ—Ç—Ä–∏ —É–ø—Ä–æ—â–µ–Ω–∏–µ –∑–∞–¥–∞—á –∏–ª–∏ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã"
            return 1
        elif [ $completion_rate -gt 90 ]; then
            send_ai_notification "–û—Ç–ª–∏—á–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è ($completion_rate%)" "SUCCESS" "–ö–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ"
        fi
    fi
    
    return 0
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ git —Å—Ç–∞—Ç—É—Å–∞
check_git_status() {
    if [ -d ".git" ]; then
        local uncommitted=$(git status --porcelain 2>/dev/null | wc -l)
        if [ "$uncommitted" -gt 50 ]; then
            send_ai_notification "–ú–Ω–æ–≥–æ –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π ($uncommitted —Ñ–∞–π–ª–æ–≤)" "WARNING" "–†–∞—Å—Å–º–æ—Ç—Ä–∏ –∫–æ–º–º–∏—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π"
            return 1
        fi
        
        local unpushed=$(git log --oneline origin/HEAD..HEAD 2>/dev/null | wc -l)
        if [ "$unpushed" -gt 20 ]; then
            send_ai_notification "–ú–Ω–æ–≥–æ –Ω–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–æ–º–º–∏—Ç–æ–≤ ($unpushed)" "WARNING" "–†–∞—Å—Å–º–æ—Ç—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫—É –∏–∑–º–µ–Ω–µ–Ω–∏–π"
            return 1
        fi
    fi
    
    return 0
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏
run_check() {
    local alerts=0
    
    echo "üîç –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏..."
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
    if ! check_critical_changes; then
        alerts=$((alerts + 1))
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
    check_new_tasks
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–µ—Ä–æ–≤
    if ! check_blockers; then
        alerts=$((alerts + 1))
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–±–ª–µ–º –≤ –∫–æ–¥–µ
    if ! check_code_issues; then
        alerts=$((alerts + 1))
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    if ! check_performance; then
        alerts=$((alerts + 1))
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ git —Å—Ç–∞—Ç—É—Å–∞
    if ! check_git_status; then
        alerts=$((alerts + 1))
    fi
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
    jq --arg time "$(date -u +%Y-%m-%dT%H:%M:%SZ)" '.last_check = $time' "$STATE_FILE" > "$STATE_FILE.tmp" && mv "$STATE_FILE.tmp" "$STATE_FILE"
    
    if [ $alerts -eq 0 ]; then
        echo "‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ"
    else
        echo "‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ $alerts –ø—Ä–æ–±–ª–µ–º"
    fi
    
    return $alerts
}

# –§—É–Ω–∫—Ü–∏—è –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
continuous_monitor() {
    echo "üîÑ –ó–∞–ø—É—Å–∫ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞..."
    echo "–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C"
    
    while true; do
        run_check
        sleep "$CHECK_INTERVAL"
    done
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
init_state

# –ó–∞–ø—É—Å–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
case "$NOTIFICATION_LEVEL" in
    "critical")
        echo "üö® –†–µ–∂–∏–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"
        check_critical_changes
        check_blockers
        ;;
    "warnings")
        echo "‚ö†Ô∏è –†–µ–∂–∏–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π"
        run_check
        ;;
    "all"|*)
        if [ "$CHECK_INTERVAL" = "0" ]; then
            echo "üîç –û–¥–Ω–æ–∫—Ä–∞—Ç–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞"
            run_check
        else
            continuous_monitor
        fi
        ;;
esac
