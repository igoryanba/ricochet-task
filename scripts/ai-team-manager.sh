#!/bin/bash
# –ú–æ—â–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥–æ–π –¥–ª—è AI

PROJECT_PATH=${1:-.}
MODE=${2:-"analyze"}  # analyze, balance, assign, report
OUTPUT_FORMAT=${3:-"ai"}  # ai, json, table

echo "üë• AI Team Manager - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π –¥–ª—è AI"
echo "üìÅ –ü—Ä–æ–µ–∫—Ç: $PROJECT_PATH"
echo "üîç –†–µ–∂–∏–º: $MODE"
echo "üìä –§–æ—Ä–º–∞—Ç: $OUTPUT_FORMAT"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è AI-–¥—Ä—É–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
ai_team_output() {
    local message="$1"
    local level="$2"  # info, warning, critical, success
    local action="$3"  # optional action for AI
    
    case "$level" in
        "critical")
            echo "üö® CRITICAL: $message"
            if [ ! -z "$action" ]; then
                echo "   üí° AI Action: $action"
            fi
            ;;
        "warning")
            echo "‚ö†Ô∏è  WARNING: $message"
            if [ ! -z "$action" ]; then
                echo "   üí° AI Action: $action"
            fi
            ;;
        "success")
            echo "‚úÖ SUCCESS: $message"
            ;;
        *)
            echo "‚ÑπÔ∏è  INFO: $message"
            ;;
    esac
}

# –§—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–∞–Ω–¥—ã
analyze_team_load() {
    echo "üìä –ê–Ω–∞–ª–∏–∑ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–∞–Ω–¥—ã..."
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º
    local team_stats=$(./ricochet-task tasks list --limit 100 2>/dev/null | grep -v "ID.*PROVIDER" | grep -v "^--" | awk '{print $NF}' | sort | uniq -c | sort -nr)
    
    if [ -z "$team_stats" ]; then
        ai_team_output "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∫–æ–º–∞–Ω–¥–µ" "warning" "–°–æ–∑–¥–∞–π –∑–∞–¥–∞—á–∏ —Å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º–∏"
        return
    fi
    
    # –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–∞–¥–∞—á
    local total_tasks=0
    local max_tasks=0
    local min_tasks=999999
    local team_members=()
    
    while IFS= read -r line; do
        local count=$(echo "$line" | awk '{print $1}')
        local member=$(echo "$line" | awk '{print $2}')
        
        if [ "$member" != "admin" ] && [ ! -z "$member" ]; then
            team_members+=("$member:$count")
            total_tasks=$((total_tasks + count))
            
            if [ $count -gt $max_tasks ]; then
                max_tasks=$count
            fi
            if [ $count -lt $min_tasks ]; then
                min_tasks=$count
            fi
        fi
    done <<< "$team_stats"
    
    # –†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫
    local team_size=${#team_members[@]}
    local avg_tasks=0
    if [ $team_size -gt 0 ]; then
        avg_tasks=$((total_tasks / team_size))
    fi
    
    local load_imbalance=0
    if [ $max_tasks -gt 0 ] && [ $min_tasks -gt 0 ]; then
        load_imbalance=$((max_tasks * 100 / min_tasks))
    fi
    
    # –í—ã–≤–æ–¥ –∞–Ω–∞–ª–∏–∑–∞
    ai_team_output "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã:" "info"
    echo "   üë• –†–∞–∑–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã: $team_size"
    echo "   üìä –í—Å–µ–≥–æ –∑–∞–¥–∞—á: $total_tasks"
    echo "   üìà –°—Ä–µ–¥–Ω—è—è –∑–∞–≥—Ä—É–∑–∫–∞: $avg_tasks –∑–∞–¥–∞—á –Ω–∞ —á–µ–ª–æ–≤–µ–∫–∞"
    echo "   ‚öñÔ∏è  –î–∏—Å–±–∞–ª–∞–Ω—Å –Ω–∞–≥—Ä—É–∑–∫–∏: $load_imbalance%"
    
    # –ê–Ω–∞–ª–∏–∑ –∫–∞–∂–¥–æ–≥–æ —á–ª–µ–Ω–∞ –∫–æ–º–∞–Ω–¥—ã
    for member_data in "${team_members[@]}"; do
        local member=$(echo "$member_data" | cut -d: -f1)
        local count=$(echo "$member_data" | cut -d: -f2)
        local load_percent=0
        if [ $avg_tasks -gt 0 ]; then
            load_percent=$((count * 100 / avg_tasks))
        fi
        
        echo "   üë§ $member: $count –∑–∞–¥–∞—á ($load_percent% –æ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ)"
        
        # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –ø–µ—Ä–µ–≥—Ä—É–∑–∫–µ
        if [ $load_percent -gt 150 ]; then
            ai_team_output "$member –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω ($load_percent%)" "warning" "–†–∞—Å—Å–º–æ—Ç—Ä–∏ –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á"
        elif [ $load_percent -lt 50 ]; then
            ai_team_output "$member –Ω–µ–¥–æ–≥—Ä—É–∂–µ–Ω ($load_percent%)" "warning" "–†–∞—Å—Å–º–æ—Ç—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á"
        fi
    done
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–µ
    if [ $load_imbalance -gt 200 ]; then
        ai_team_output "–í—ã—Å–æ–∫–∏–π –¥–∏—Å–±–∞–ª–∞–Ω—Å –Ω–∞–≥—Ä—É–∑–∫–∏ ($load_imbalance%)" "critical" "–ò—Å–ø–æ–ª—å–∑—É–π 'ai-team-manager.sh balance' –¥–ª—è –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏"
    elif [ $load_imbalance -gt 150 ]; then
        ai_team_output "–£–º–µ—Ä–µ–Ω–Ω—ã–π –¥–∏—Å–±–∞–ª–∞–Ω—Å –Ω–∞–≥—Ä—É–∑–∫–∏ ($load_imbalance%)" "warning" "–†–∞—Å—Å–º–æ—Ç—Ä–∏ –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á"
    else
        ai_team_output "–ù–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–∞–Ω–¥—ã —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∞" "success"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞–≤—ã–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã
analyze_team_skills() {
    echo "üéØ –ê–Ω–∞–ª–∏–∑ –Ω–∞–≤—ã–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã..."
    
    # –ê–Ω–∞–ª–∏–∑ —Ç–∏–ø–æ–≤ –∑–∞–¥–∞—á –ø–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º
    local skill_analysis=$(./ricochet-task tasks list --limit 100 2>/dev/null | grep -v "ID.*PROVIDER" | grep -v "^--" | awk '{print $NF, $3}' | sort | uniq -c | sort -nr)
    
    if [ -z "$skill_analysis" ]; then
        ai_team_output "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –Ω–∞–≤—ã–∫–∞—Ö –∫–æ–º–∞–Ω–¥—ã" "warning" "–°–æ–∑–¥–∞–π –∑–∞–¥–∞—á–∏ —Å —Ç–∏–ø–∞–º–∏ –∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º–∏"
        return
    fi
    
    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º
    local member_skills=()
    while IFS= read -r line; do
        local count=$(echo "$line" | awk '{print $1}')
        local member=$(echo "$line" | awk '{print $2}')
        local task_type=$(echo "$line" | awk '{print $3}')
        
        if [ "$member" != "admin" ] && [ ! -z "$member" ] && [ ! -z "$task_type" ]; then
            member_skills+=("$member:$task_type:$count")
        fi
    done <<< "$skill_analysis"
    
    # –ê–Ω–∞–ª–∏–∑ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    local members=$(printf '%s\n' "${member_skills[@]}" | cut -d: -f1 | sort -u)
    
    ai_team_output "–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã:" "info"
    for member in $members; do
        echo "   üë§ $member:"
        local member_tasks=$(printf '%s\n' "${member_skills[@]}" | grep "^$member:" | sort -t: -k3 -nr)
        while IFS= read -r task_data; do
            local task_type=$(echo "$task_data" | cut -d: -f2)
            local count=$(echo "$task_data" | cut -d: -f3)
            echo "      ‚Ä¢ $task_type: $count –∑–∞–¥–∞—á"
        done <<< "$member_tasks"
    done
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–∞–∑–≤–∏—Ç–∏—é –Ω–∞–≤—ã–∫–æ–≤
    ai_team_output "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–∞–∑–≤–∏—Ç–∏—é:" "info"
    echo "   üí° –†–∞—Å—Å–º–æ—Ç—Ä–∏ –∫—Ä–æ—Å—Å-—Ç—Ä–µ–Ω–∏–Ω–≥ –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–∞–¥–∞—á"
    echo "   üí° –°–æ–∑–¥–∞–π –∑–∞–¥–∞—á–∏ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –Ω–∞–≤—ã–∫–æ–≤"
    echo "   üí° –ò—Å–ø–æ–ª—å–∑—É–π –ø–∞—Ä–Ω–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –∑–Ω–∞–Ω–∏–π"
}

# –§—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—ã
analyze_team_performance() {
    echo "üìà –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—ã..."
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
    local status_stats=$(./ricochet-task tasks list --limit 100 2>/dev/null | grep -v "ID.*PROVIDER" | grep -v "^--" | awk '{print $4}' | sort | uniq -c | sort -nr)
    
    local total_tasks=0
    local completed_tasks=0
    local in_progress_tasks=0
    local blocked_tasks=0
    
    while IFS= read -r line; do
        local count=$(echo "$line" | awk '{print $1}')
        local status=$(echo "$line" | awk '{print $2}')
        
        total_tasks=$((total_tasks + count))
        
        case "$status" in
            "completed"|"done")
                completed_tasks=$((completed_tasks + count))
                ;;
            "in_progress"|"in-progress")
                in_progress_tasks=$((in_progress_tasks + count))
                ;;
            "blocked")
                blocked_tasks=$((blocked_tasks + count))
                ;;
        esac
    done <<< "$status_stats"
    
    # –†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    local completion_rate=0
    if [ $total_tasks -gt 0 ]; then
        completion_rate=$((completed_tasks * 100 / total_tasks))
    fi
    
    local active_rate=0
    if [ $total_tasks -gt 0 ]; then
        active_rate=$((in_progress_tasks * 100 / total_tasks))
    fi
    
    local blocked_rate=0
    if [ $total_tasks -gt 0 ]; then
        blocked_rate=$((blocked_tasks * 100 / total_tasks))
    fi
    
    # –í—ã–≤–æ–¥ –∞–Ω–∞–ª–∏–∑–∞
    ai_team_output "–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–æ–º–∞–Ω–¥—ã:" "info"
    echo "   üìä –í—Å–µ–≥–æ –∑–∞–¥–∞—á: $total_tasks"
    echo "   ‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: $completed_tasks ($completion_rate%)"
    echo "   üîÑ –í —Ä–∞–±–æ—Ç–µ: $in_progress_tasks ($active_rate%)"
    echo "   üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: $blocked_tasks ($blocked_rate%)"
    
    # –û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    if [ $completion_rate -gt 80 ]; then
        ai_team_output "–û—Ç–ª–∏—á–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å ($completion_rate%)" "success"
    elif [ $completion_rate -gt 60 ]; then
        ai_team_output "–•–æ—Ä–æ—à–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å ($completion_rate%)" "info"
    elif [ $completion_rate -gt 40 ]; then
        ai_team_output "–°—Ä–µ–¥–Ω—è—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å ($completion_rate%)" "warning" "–†–∞—Å—Å–º–æ—Ç—Ä–∏ —É–ø—Ä–æ—â–µ–Ω–∏–µ –∑–∞–¥–∞—á"
    else
        ai_team_output "–ù–∏–∑–∫–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å ($completion_rate%)" "critical" "–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–Ω–∞–ª–∏–∑ –±–ª–æ–∫–µ—Ä–æ–≤ –∏ —É–ø—Ä–æ—â–µ–Ω–∏–µ –∑–∞–¥–∞—á"
    fi
    
    if [ $blocked_rate -gt 20 ]; then
        ai_team_output "–í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –±–ª–æ–∫–µ—Ä–æ–≤ ($blocked_rate%)" "critical" "–ò—Å–ø–æ–ª—å–∑—É–π 'ai-team-manager.sh unblock' –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏"
    elif [ $blocked_rate -gt 10 ]; then
        ai_team_output "–£–º–µ—Ä–µ–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –±–ª–æ–∫–µ—Ä–æ–≤ ($blocked_rate%)" "warning" "–†–∞—Å—Å–º–æ—Ç—Ä–∏ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –±–ª–æ–∫–µ—Ä–æ–≤"
    else
        ai_team_output "–ù–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –±–ª–æ–∫–µ—Ä–æ–≤ ($blocked_rate%)" "success"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∑–∞–¥–∞—á
auto_assign_tasks() {
    echo "ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞–¥–∞—á..."
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ–∑–∞–Ω—è—Ç—ã—Ö –∑–∞–¥–∞—á
    local unassigned_tasks=$(./ricochet-task tasks list --status "open" --limit 50 2>/dev/null | grep -v "ID.*PROVIDER" | grep -v "^--" | grep "admin" | head -10)
    
    if [ -z "$unassigned_tasks" ]; then
        ai_team_output "–ù–µ—Ç –Ω–µ–∑–∞–Ω—è—Ç—ã—Ö –∑–∞–¥–∞—á" "info"
        return
    fi
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
    local team_members=($(./ricochet-task tasks list --limit 100 2>/dev/null | grep -v "ID.*PROVIDER" | grep -v "^--" | awk '{print $NF}' | sort | uniq | grep -v "admin"))
    
    if [ ${#team_members[@]} -eq 0 ]; then
        ai_team_output "–ù–µ—Ç —á–ª–µ–Ω–æ–≤ –∫–æ–º–∞–Ω–¥—ã" "warning" "–î–æ–±–∞–≤—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –≤ –∑–∞–¥–∞—á–∏"
        return
    fi
    
    # –ü—Ä–æ—Å—Ç–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ –∫—Ä—É–≥—É
    local member_index=0
    local assigned_count=0
    
    while IFS= read -r task_line; do
        if [ ! -z "$task_line" ]; then
            local task_id=$(echo "$task_line" | awk '{print $1}')
            local member="${team_members[$member_index]}"
            
            echo "   üìù –ù–∞–∑–Ω–∞—á–∞—é –∑–∞–¥–∞—á—É $task_id –Ω–∞ $member"
            
            # –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ (–µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)
            # ./ricochet-task tasks update "$task_id" --assignee "$member"
            
            member_index=$((member_index + 1))
            if [ $member_index -ge ${#team_members[@]} ]; then
                member_index=0
            fi
            
            assigned_count=$((assigned_count + 1))
        fi
    done <<< "$unassigned_tasks"
    
    ai_team_output "–ù–∞–∑–Ω–∞—á–µ–Ω–æ $assigned_count –∑–∞–¥–∞—á" "success"
}

# –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ –ø–æ –∫–æ–º–∞–Ω–¥–µ
generate_team_report() {
    echo "üìã –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ –∫–æ–º–∞–Ω–¥–µ..."
    
    local report_file="team-report-$(date +%Y%m%d-%H%M%S).md"
    
    cat > "$report_file" << REPORT
# üìä –û—Ç—á–µ—Ç –ø–æ –∫–æ–º–∞–Ω–¥–µ - $(date '+%d.%m.%Y %H:%M')

## üë• –°–æ—Å—Ç–∞–≤ –∫–æ–º–∞–Ω–¥—ã
REPORT
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ–º–∞–Ω–¥—ã
    local team_stats=$(./ricochet-task tasks list --limit 100 2>/dev/null | grep -v "ID.*PROVIDER" | grep -v "^--" | awk '{print $NF}' | sort | uniq -c | sort -nr)
    
    while IFS= read -r line; do
        local count=$(echo "$line" | awk '{print $1}')
        local member=$(echo "$line" | awk '{print $2}')
        
        if [ "$member" != "admin" ] && [ ! -z "$member" ]; then
            echo "- **$member**: $count –∑–∞–¥–∞—á" >> "$report_file"
        fi
    done <<< "$team_stats"
    
    cat >> "$report_file" << REPORT

## üìà –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
REPORT
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    local total_tasks=$(./ricochet-task tasks list --limit 100 2>/dev/null | grep -v "ID.*PROVIDER" | grep -v "^--" | wc -l)
    local completed_tasks=$(./ricochet-task tasks list --status "completed" --limit 100 2>/dev/null | grep -v "ID.*PROVIDER" | grep -v "^--" | wc -l)
    local completion_rate=0
    if [ $total_tasks -gt 0 ]; then
        completion_rate=$((completed_tasks * 100 / total_tasks))
    fi
    
    echo "- –í—Å–µ–≥–æ –∑–∞–¥–∞—á: $total_tasks" >> "$report_file"
    echo "- –ó–∞–≤–µ—Ä—à–µ–Ω–æ: $completed_tasks ($completion_rate%)" >> "$report_file"
    
    cat >> "$report_file" << REPORT

## üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è AI
- –ò—Å–ø–æ–ª—å–∑—É–π 'ai-team-manager.sh analyze' –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–≥—Ä—É–∑–∫–∏
- –ò—Å–ø–æ–ª—å–∑—É–π 'ai-team-manager.sh balance' –¥–ª—è –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏ –Ω–∞–≥—Ä—É–∑–∫–∏
- –ò—Å–ø–æ–ª—å–∑—É–π 'ai-team-manager.sh assign' –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
REPORT
    
    ai_team_output "–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ $report_file" "success"
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    case "$MODE" in
        "analyze")
            analyze_team_load
            analyze_team_skills
            analyze_team_performance
            ;;
        "balance")
            analyze_team_load
            ai_team_output "–ò—Å–ø–æ–ª—å–∑—É–π 'ai-team-manager.sh assign' –¥–ª—è –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏" "info"
            ;;
        "assign")
            auto_assign_tasks
            ;;
        "report")
            generate_team_report
            ;;
        *)
            echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [–ø—É—Ç—å] [—Ä–µ–∂–∏–º] [—Ñ–æ—Ä–º–∞—Ç]"
            echo "–†–µ–∂–∏–º—ã: analyze, balance, assign, report"
            ;;
    esac
}

# –ó–∞–ø—É—Å–∫
main
