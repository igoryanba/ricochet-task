#!/bin/bash
# –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –Ω–∞–≤—ã–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è AI

PROJECT_PATH=${1:-.}
ANALYSIS_TYPE=${2:-"full"}  # full, quick, gaps
OUTPUT_FORMAT=${3:-"ai"}  # ai, json, table

echo "üéØ AI Skill Analyzer - –ê–Ω–∞–ª–∏–∑ –Ω–∞–≤—ã–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è AI"
echo "üìÅ –ü—Ä–æ–µ–∫—Ç: $PROJECT_PATH"
echo "üîç –¢–∏–ø: $ANALYSIS_TYPE"
echo "üìä –§–æ—Ä–º–∞—Ç: $OUTPUT_FORMAT"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è AI-–¥—Ä—É–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
ai_skill_output() {
    local message="$1"
    local level="$2"  # info, warning, critical, success
    local action="$3"  # optional action for AI
    
    case "$level" in
        "critical")
            echo "üö® CRITICAL: $message"
            if [ ! -z "$action" ]; then
                echo "   üí° AI Action: $action"
            fi
            ;;
        "warning")
            echo "‚ö†Ô∏è  WARNING: $message"
            if [ ! -z "$action" ]; then
                echo "   üí° AI Action: $action"
            fi
            ;;
        "success")
            echo "‚úÖ SUCCESS: $message"
            ;;
        *)
            echo "‚ÑπÔ∏è  INFO: $message"
            ;;
    esac
}

# –§—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞–≤—ã–∫–æ–≤ –ø–æ —Ç–∏–ø–∞–º –∑–∞–¥–∞—á
analyze_task_skills() {
    echo "üìä –ê–Ω–∞–ª–∏–∑ –Ω–∞–≤—ã–∫–æ–≤ –ø–æ —Ç–∏–ø–∞–º –∑–∞–¥–∞—á..."
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Ç–∏–ø–∞–º –∑–∞–¥–∞—á –∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º
    local skill_data=$(./ricochet-task tasks list --limit 100 2>/dev/null | grep -v "ID.*PROVIDER" | grep -v "^--" | awk '{print $NF, $3}' | sort | uniq -c | sort -nr)
    
    if [ -z "$skill_data" ]; then
        ai_skill_output "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –Ω–∞–≤—ã–∫–∞—Ö –∫–æ–º–∞–Ω–¥—ã" "warning" "–°–æ–∑–¥–∞–π –∑–∞–¥–∞—á–∏ —Å —Ç–∏–ø–∞–º–∏ –∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º–∏"
        return
    fi
    
    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º
    local members=($(echo "$skill_data" | awk '{print $2}' | sort -u | grep -v "admin"))
    local skill_matrix=()
    
    for member in "${members[@]}"; do
        if [ ! -z "$member" ]; then
            local member_skills=$(echo "$skill_data" | grep "^[[:space:]]*[0-9]*[[:space:]]*$member " | sort -nr)
            local total_tasks=0
            local skill_types=()
            
            while IFS= read -r line; do
                local count=$(echo "$line" | awk '{print $1}')
                local task_type=$(echo "$line" | awk '{print $3}')
                total_tasks=$((total_tasks + count))
                skill_types+=("$task_type:$count")
            done <<< "$member_skills"
            
            skill_matrix+=("$member:$total_tasks:${skill_types[*]}")
        fi
    done
    
    # –í—ã–≤–æ–¥ –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞–≤—ã–∫–æ–≤
    ai_skill_output "–ù–∞–≤—ã–∫–∏ –∫–æ–º–∞–Ω–¥—ã:" "info"
    for member_data in "${skill_matrix[@]}"; do
        local member=$(echo "$member_data" | cut -d: -f1)
        local total=$(echo "$member_data" | cut -d: -f2)
        local skills=$(echo "$member_data" | cut -d: -f3-)
        
        echo "   üë§ $member (–≤—Å–µ–≥–æ –∑–∞–¥–∞—á: $total):"
        
        # –ê–Ω–∞–ª–∏–∑ –Ω–∞–≤—ã–∫–æ–≤
        local skill_array=($skills)
        for skill_data in "${skill_array[@]}"; do
            local skill_type=$(echo "$skill_data" | cut -d: -f1)
            local count=$(echo "$skill_data" | cut -d: -f2)
            local percentage=0
            if [ $total -gt 0 ]; then
                percentage=$((count * 100 / total))
            fi
            
            echo "      ‚Ä¢ $skill_type: $count –∑–∞–¥–∞—á ($percentage%)"
        done
    done
}

# –§—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–±–µ–ª–æ–≤ –≤ –Ω–∞–≤—ã–∫–∞—Ö
analyze_skill_gaps() {
    echo "üîç –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –≤ –Ω–∞–≤—ã–∫–∞—Ö..."
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –∑–∞–¥–∞—á
    local all_task_types=$(./ricochet-task tasks list --limit 100 2>/dev/null | grep -v "ID.*PROVIDER" | grep -v "^--" | awk '{print $3}' | sort | uniq)
    local all_members=$(./ricochet-task tasks list --limit 100 2>/dev/null | grep -v "ID.*PROVIDER" | grep -v "^--" | awk '{print $NF}' | sort | uniq | grep -v "admin")
    
    local gaps=()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –∑–∞–¥–∞—á
    for task_type in $all_task_types; do
        if [ ! -z "$task_type" ]; then
            local has_expert=false
            local has_any=false
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —ç—Ç–æ–º—É —Ç–∏–ø—É
            for member in $all_members; do
                if [ ! -z "$member" ]; then
                    local member_tasks=$(./ricochet-task tasks list --limit 100 2>/dev/null | grep -v "ID.*PROVIDER" | grep -v "^--" | grep "$member" | grep "$task_type" | wc -l)
                    
                    if [ $member_tasks -gt 0 ]; then
                        has_any=true
                        if [ $member_tasks -gt 5 ]; then
                            has_expert=true
                        fi
                    fi
                fi
            done
            
            if [ "$has_any" = false ]; then
                gaps+=("$task_type: –ù–µ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π")
            elif [ "$has_expert" = false ]; then
                gaps+=("$task_type: –ù–µ—Ç —ç–∫—Å–ø–µ—Ä—Ç–æ–≤")
            fi
        fi
    done
    
    # –í—ã–≤–æ–¥ –ø—Ä–æ–±–µ–ª–æ–≤
    if [ ${#gaps[@]} -gt 0 ]; then
        ai_skill_output "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞–≤—ã–∫–∞—Ö:" "warning"
        for gap in "${gaps[@]}"; do
            local skill_type=$(echo "$gap" | cut -d: -f1)
            local issue=$(echo "$gap" | cut -d: -f2)
            echo "   ‚Ä¢ $skill_type: $issue"
        done
        
        ai_skill_output "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–∞–∑–≤–∏—Ç–∏—é –Ω–∞–≤—ã–∫–æ–≤" "info" "–°–æ–∑–¥–∞–π –∑–∞–¥–∞—á–∏ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–º –Ω–∞–≤—ã–∫–∞–º"
    else
        ai_skill_output "–ü—Ä–æ–±–µ–ª–æ–≤ –≤ –Ω–∞–≤—ã–∫–∞—Ö –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ" "success"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
analyze_specialization() {
    echo "üéØ –ê–Ω–∞–ª–∏–∑ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥—ã..."
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –Ω–∞–≤—ã–∫–∞—Ö
    local skill_data=$(./ricochet-task tasks list --limit 100 2>/dev/null | grep -v "ID.*PROVIDER" | grep -v "^--" | awk '{print $NF, $3}' | sort | uniq -c | sort -nr)
    
    if [ -z "$skill_data" ]; then
        ai_skill_output "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏" "warning"
        return
    fi
    
    # –ê–Ω–∞–ª–∏–∑ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ —Ç–∏–ø–∞–º –∑–∞–¥–∞—á
    local task_types=($(echo "$skill_data" | awk '{print $3}' | sort -u | grep -v "admin"))
    local specialization_map=()
    
    for task_type in "${task_types[@]}"; do
        if [ ! -z "$task_type" ]; then
            local type_data=$(echo "$skill_data" | grep " $task_type$" | sort -nr)
            local total_tasks=0
            local top_member=""
            local top_count=0
            
            while IFS= read -r line; do
                local count=$(echo "$line" | awk '{print $1}')
                local member=$(echo "$line" | awk '{print $2}')
                total_tasks=$((total_tasks + count))
                
                if [ $count -gt $top_count ]; then
                    top_count=$count
                    top_member="$member"
                fi
            done <<< "$type_data"
            
            if [ $total_tasks -gt 0 ]; then
                local concentration=$((top_count * 100 / total_tasks))
                specialization_map+=("$task_type:$top_member:$concentration:$total_tasks")
            fi
        fi
    done
    
    # –í—ã–≤–æ–¥ –∞–Ω–∞–ª–∏–∑–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    ai_skill_output "–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã:" "info"
    for spec_data in "${specialization_map[@]}"; do
        local task_type=$(echo "$spec_data" | cut -d: -f1)
        local top_member=$(echo "$spec_data" | cut -d: -f2)
        local concentration=$(echo "$spec_data" | cut -d: -f3)
        local total_tasks=$(echo "$spec_data" | cut -d: -f4)
        
        echo "   üéØ $task_type:"
        echo "      üë§ –≠–∫—Å–ø–µ—Ä—Ç: $top_member ($concentration% –æ—Ç $total_tasks –∑–∞–¥–∞—á)"
        
        if [ $concentration -gt 80 ]; then
            ai_skill_output "–í—ã—Å–æ–∫–∞—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è –Ω–∞–≤—ã–∫–æ–≤ –≤ $task_type" "warning" "–†–∞—Å—Å–º–æ—Ç—Ä–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–Ω–∞–Ω–∏–π"
        elif [ $concentration -lt 30 ]; then
            ai_skill_output "–ù–∏–∑–∫–∞—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è –Ω–∞–≤—ã–∫–æ–≤ –≤ $task_type" "warning" "–†–∞—Å—Å–º–æ—Ç—Ä–∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é"
        fi
    done
}

# –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ —Ä–∞–∑–≤–∏—Ç–∏—é
generate_development_recommendations() {
    echo "üí° –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ —Ä–∞–∑–≤–∏—Ç–∏—é..."
    
    local recommendations=()
    
    # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –≤ –Ω–∞–≤—ã–∫–∞—Ö
    local all_task_types=$(./ricochet-task tasks list --limit 100 2>/dev/null | grep -v "ID.*PROVIDER" | grep -v "^--" | awk '{print $3}' | sort | uniq)
    local all_members=$(./ricochet-task tasks list --limit 100 2>/dev/null | grep -v "ID.*PROVIDER" | grep -v "^--" | awk '{print $NF}' | sort | uniq | grep -v "admin")
    
    for task_type in $all_task_types; do
        if [ ! -z "$task_type" ]; then
            local has_any=false
            local member_count=0
            
            for member in $all_members; do
                if [ ! -z "$member" ]; then
                    local member_tasks=$(./ricochet-task tasks list --limit 100 2>/dev/null | grep -v "ID.*PROVIDER" | grep -v "^--" | grep "$member" | grep "$task_type" | wc -l)
                    
                    if [ $member_tasks -gt 0 ]; then
                        has_any=true
                        member_count=$((member_count + 1))
                    fi
                fi
            done
            
            if [ "$has_any" = false ]; then
                recommendations+=("–°–æ–∑–¥–∞–π –∑–∞–¥–∞—á–∏ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è $task_type")
            elif [ $member_count -eq 1 ]; then
                recommendations+=("–†–∞—Å—Å–º–æ—Ç—Ä–∏ –∫—Ä–æ—Å—Å-—Ç—Ä–µ–Ω–∏–Ω–≥ –¥–ª—è $task_type")
            fi
        fi
    done
    
    # –í—ã–≤–æ–¥ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    if [ ${#recommendations[@]} -gt 0 ]; then
        ai_skill_output "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–∞–∑–≤–∏—Ç–∏—é –Ω–∞–≤—ã–∫–æ–≤:" "info"
        for rec in "${recommendations[@]}"; do
            echo "   üí° $rec"
        done
    else
        ai_skill_output "–ö–æ–º–∞–Ω–¥–∞ –∏–º–µ–µ—Ç —Ö–æ—Ä–æ—à–µ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ –Ω–∞–≤—ã–∫–æ–≤" "success"
    fi
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    case "$ANALYSIS_TYPE" in
        "quick")
            analyze_task_skills
            ;;
        "gaps")
            analyze_skill_gaps
            ;;
        "full"|*)
            analyze_task_skills
            analyze_skill_gaps
            analyze_specialization
            generate_development_recommendations
            ;;
    esac
}

# –ó–∞–ø—É—Å–∫
main
