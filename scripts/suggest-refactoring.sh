#!/bin/bash
# –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥—É

FILE_PATH=${1:-.}
PRIORITY=${2:-"medium"}

echo "üîß –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞ –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥—É: $FILE_PATH"

# –§—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –¥–ª–∏–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
analyze_long_functions() {
    local file="$1"
    local file_ext="${file##*.}"
    local suggestions=()
    
    case "$file_ext" in
        "js"|"ts"|"jsx"|"tsx")
            # –ê–Ω–∞–ª–∏–∑ JavaScript/TypeScript —Ñ—É–Ω–∫—Ü–∏–π
            while IFS= read -r line; do
                local line_num=$(echo "$line" | cut -d: -f1)
                local content=$(echo "$line" | cut -d: -f2-)
                
                # –ü–æ–∏—Å–∫ –¥–ª–∏–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
                if echo "$content" | grep -q "function\|=>"; then
                    # –ü–æ–¥—Å—á–µ—Ç —Å—Ç—Ä–æ–∫ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ (–ø—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞)
                    local func_start=$line_num
                    local func_end=$((func_start + 50)) # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º –º–∞–∫—Å–∏–º—É–º 50 —Å—Ç—Ä–æ–∫
                    
                    local func_lines=$(sed -n "${func_start},${func_end}p" "$file" | wc -l)
                    
                    if [ $func_lines -gt 30 ]; then
                        local func_name=$(echo "$content" | grep -o "function [a-zA-Z_][a-zA-Z0-9_]*" | head -1)
                        suggestions+=("$line_num:–î–ª–∏–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è $func_name ($func_lines —Å—Ç—Ä–æ–∫)")
                    fi
                fi
            done < <(grep -n "function\|=>" "$file" 2>/dev/null)
            ;;
        "go")
            # –ê–Ω–∞–ª–∏–∑ Go —Ñ—É–Ω–∫—Ü–∏–π
            while IFS= read -r line; do
                local line_num=$(echo "$line" | cut -d: -f1)
                local content=$(echo "$line" | cut -d: -f2-)
                
                if echo "$content" | grep -q "func "; then
                    local func_start=$line_num
                    local func_end=$((func_start + 100)) # Go —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –¥–ª–∏–Ω–Ω–µ–µ
                    
                    local func_lines=$(sed -n "${func_start},${func_end}p" "$file" | wc -l)
                    
                    if [ $func_lines -gt 50 ]; then
                        local func_name=$(echo "$content" | grep -o "func [a-zA-Z_][a-zA-Z0-9_]*" | head -1)
                        suggestions+=("$line_num:–î–ª–∏–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è $func_name ($func_lines —Å—Ç—Ä–æ–∫)")
                    fi
                fi
            done < <(grep -n "func " "$file" 2>/dev/null)
            ;;
        "py")
            # –ê–Ω–∞–ª–∏–∑ Python —Ñ—É–Ω–∫—Ü–∏–π
            while IFS= read -r line; do
                local line_num=$(echo "$line" | cut -d: -f1)
                local content=$(echo "$line" | cut -d: -f2-)
                
                if echo "$content" | grep -q "def "; then
                    local func_start=$line_num
                    local func_end=$((func_start + 50))
                    
                    local func_lines=$(sed -n "${func_start},${func_end}p" "$file" | wc -l)
                    
                    if [ $func_lines -gt 30 ]; then
                        local func_name=$(echo "$content" | grep -o "def [a-zA-Z_][a-zA-Z0-9_]*" | head -1)
                        suggestions+=("$line_num:–î–ª–∏–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è $func_name ($func_lines —Å—Ç—Ä–æ–∫)")
                    fi
                fi
            done < <(grep -n "def " "$file" 2>/dev/null)
            ;;
    esac
    
    printf '%s\n' "${suggestions[@]}"
}

# –§—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞
analyze_duplication() {
    local file="$1"
    local suggestions=()
    
    # –ü–æ–∏—Å–∫ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –±–ª–æ–∫–æ–≤ –∫–æ–¥–∞ (–ø—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞)
    local lines=$(wc -l < "$file" 2>/dev/null || echo "0")
    
    if [ $lines -gt 100 ]; then
        # –ü–æ–∏—Å–∫ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —Å—Ç—Ä–æ–∫
        local duplicates=$(sort "$file" | uniq -d | wc -l)
        
        if [ $duplicates -gt 5 ]; then
            suggestions+=("0:–í–æ–∑–º–æ–∂–Ω–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞ ($duplicates –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —Å—Ç—Ä–æ–∫)")
        fi
    fi
    
    printf '%s\n' "${suggestions[@]}"
}

# –§—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ —Å–ª–æ–∂–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
analyze_complex_conditions() {
    local file="$1"
    local suggestions=()
    
    # –ü–æ–∏—Å–∫ —Å–ª–æ–∂–Ω—ã—Ö if —É—Å–ª–æ–≤–∏–π
    while IFS= read -r line; do
        local line_num=$(echo "$line" | cut -d: -f1)
        local content=$(echo "$line" | cut -d: -f2-)
        
        # –ü–æ–¥—Å—á–µ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –≤ —É—Å–ª–æ–≤–∏–∏
        local and_count=$(echo "$content" | grep -o "&&" | wc -l)
        local or_count=$(echo "$content" | grep -o "||" | wc -l)
        local total_ops=$((and_count + or_count))
        
        if [ $total_ops -gt 3 ]; then
            suggestions+=("$line_num:–°–ª–æ–∂–Ω–æ–µ —É—Å–ª–æ–≤–∏–µ ($total_ops –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤)")
        fi
    done < <(grep -n "if.*(" "$file" 2>/dev/null)
    
    printf '%s\n' "${suggestions[@]}"
}

# –§—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –±–æ–ª—å—à–∏—Ö –∫–ª–∞—Å—Å–æ–≤/–º–æ–¥—É–ª–µ–π
analyze_large_modules() {
    local file="$1"
    local file_ext="${file##*.}"
    local suggestions=()
    
    local line_count=$(wc -l < "$file" 2>/dev/null || echo "0")
    
    case "$file_ext" in
        "js"|"ts"|"jsx"|"tsx")
            if [ $line_count -gt 200 ]; then
                suggestions+=("0:–ë–æ–ª—å—à–æ–π –º–æ–¥—É–ª—å ($line_count —Å—Ç—Ä–æ–∫) - —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ")
            fi
            ;;
        "go")
            if [ $line_count -gt 500 ]; then
                suggestions+=("0:–ë–æ–ª—å—à–æ–π —Ñ–∞–π–ª ($line_count —Å—Ç—Ä–æ–∫) - —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –ø–∞–∫–µ—Ç—ã")
            fi
            ;;
        "py")
            if [ $line_count -gt 300 ]; then
                suggestions+=("0:–ë–æ–ª—å—à–æ–π –º–æ–¥—É–ª—å ($line_count —Å—Ç—Ä–æ–∫) - —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ")
            fi
            ;;
    esac
    
    printf '%s\n' "${suggestions[@]}"
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞
analyze_file() {
    local file="$1"
    local file_ext="${file##*.}"
    
    echo "üìÑ –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞ –¥–ª—è —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞: $file"
    
    # –ê–Ω–∞–ª–∏–∑ –¥–ª–∏–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
    echo "üîç –ü–æ–∏—Å–∫ –¥–ª–∏–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π..."
    local long_functions=($(analyze_long_functions "$file"))
    
    # –ê–Ω–∞–ª–∏–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
    echo "üîç –ü–æ–∏—Å–∫ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞..."
    local duplications=($(analyze_duplication "$file"))
    
    # –ê–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
    echo "üîç –ü–æ–∏—Å–∫ —Å–ª–æ–∂–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π..."
    local complex_conditions=($(analyze_complex_conditions "$file"))
    
    # –ê–Ω–∞–ª–∏–∑ –±–æ–ª—å—à–∏—Ö –º–æ–¥—É–ª–µ–π
    echo "üîç –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–º–µ—Ä–∞ –º–æ–¥—É–ª—è..."
    local large_modules=($(analyze_large_modules "$file"))
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á –¥–ª—è —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞
    local task_count=0
    
    # –ó–∞–¥–∞—á–∏ –¥–ª—è –¥–ª–∏–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
    for suggestion in "${long_functions[@]}"; do
        local line_num=$(echo "$suggestion" | cut -d: -f1)
        local description=$(echo "$suggestion" | cut -d: -f2-)
        
        local task_title="Refactor: $description"
        local task_description="–ù–∞–π–¥–µ–Ω –≤ —Ñ–∞–π–ª–µ $file –Ω–∞ —Å—Ç—Ä–æ–∫–µ $line_num. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Ä–∞–∑–±–∏—Ç—å –Ω–∞ –±–æ–ª–µ–µ –º–µ–ª–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏."
        
        echo "üìù –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏: $task_title"
        ./ricochet-task tasks create \
            --title "$task_title" \
            --description "$task_description" \
            --type "refactoring" \
            --priority "$PRIORITY" \
            --labels "refactoring,code-quality" \
            --project "0-1"
        
        task_count=$((task_count + 1))
    done
    
    # –ó–∞–¥–∞—á–∏ –¥–ª—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
    for suggestion in "${duplications[@]}"; do
        local line_num=$(echo "$suggestion" | cut -d: -f1)
        local description=$(echo "$suggestion" | cut -d: -f2-)
        
        local task_title="Refactor: $description"
        local task_description="–ù–∞–π–¥–µ–Ω –≤ —Ñ–∞–π–ª–µ $file. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –≤—ã–Ω–µ—Å—Ç–∏ –¥—É–±–ª–∏—Ä—É—é—â–∏–π—Å—è –∫–æ–¥ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏."
        
        echo "üìù –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏: $task_title"
        ./ricochet-task tasks create \
            --title "$task_title" \
            --description "$task_description" \
            --type "refactoring" \
            --priority "$PRIORITY" \
            --labels "refactoring,duplication" \
            --project "0-1"
        
        task_count=$((task_count + 1))
    done
    
    # –ó–∞–¥–∞—á–∏ –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
    for suggestion in "${complex_conditions[@]}"; do
        local line_num=$(echo "$suggestion" | cut -d: -f1)
        local description=$(echo "$suggestion" | cut -d: -f2-)
        
        local task_title="Refactor: $description"
        local task_description="–ù–∞–π–¥–µ–Ω –≤ —Ñ–∞–π–ª–µ $file –Ω–∞ —Å—Ç—Ä–æ–∫–µ $line_num. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É–ø—Ä–æ—Å—Ç–∏—Ç—å —É—Å–ª–æ–≤–∏–µ."
        
        echo "üìù –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏: $task_title"
        ./ricochet-task tasks create \
            --title "$task_title" \
            --description "$task_description" \
            --type "refactoring" \
            --priority "$PRIORITY" \
            --labels "refactoring,complexity" \
            --project "0-1"
        
        task_count=$((task_count + 1))
    done
    
    # –ó–∞–¥–∞—á–∏ –¥–ª—è –±–æ–ª—å—à–∏—Ö –º–æ–¥—É–ª–µ–π
    for suggestion in "${large_modules[@]}"; do
        local line_num=$(echo "$suggestion" | cut -d: -f1)
        local description=$(echo "$suggestion" | cut -d: -f2-)
        
        local task_title="Refactor: $description"
        local task_description="–ù–∞–π–¥–µ–Ω –≤ —Ñ–∞–π–ª–µ $file. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Ä–∞–∑–¥–µ–ª–∏—Ç—å –Ω–∞ –±–æ–ª–µ–µ –º–µ–ª–∫–∏–µ –º–æ–¥—É–ª–∏."
        
        echo "üìù –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏: $task_title"
        ./ricochet-task tasks create \
            --title "$task_title" \
            --description "$task_description" \
            --type "refactoring" \
            --priority "$PRIORITY" \
            --labels "refactoring,architecture" \
            --project "0-1"
        
        task_count=$((task_count + 1))
    done
    
    echo "üìä –°–æ–∑–¥–∞–Ω–æ –∑–∞–¥–∞—á –¥–ª—è —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞: $task_count"
}

# –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞ –∏–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
if [ -f "$FILE_PATH" ]; then
    analyze_file "$FILE_PATH"
elif [ -d "$FILE_PATH" ]; then
    echo "üìÅ –ê–Ω–∞–ª–∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞: $FILE_PATH"
    
    # –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    find "$FILE_PATH" -name "*.js" -o -name "*.ts" -o -name "*.go" -o -name "*.py" | while read -r file; do
        analyze_file "$file"
        echo "---"
    done
else
    echo "‚ùå –§–∞–π–ª –∏–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã: $FILE_PATH"
    exit 1
fi

echo "‚úÖ –ê–Ω–∞–ª–∏–∑ –¥–ª—è —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω"
