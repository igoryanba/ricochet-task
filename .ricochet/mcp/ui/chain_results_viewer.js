/**
 * –ú–æ–¥—É–ª—å –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ü–µ–ø–æ—á–µ–∫ –≤ MCP-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
 */

/**
 * –°–æ–∑–¥–∞–µ—Ç –ø–∞–Ω–µ–ª—å –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ü–µ–ø–æ—á–∫–∏
 * @param {Object} options - –û–ø—Ü–∏–∏ –ø–∞–Ω–µ–ª–∏
 * @param {string} options.chainId - ID —Ü–µ–ø–æ—á–∫–∏
 * @param {string} options.runId - ID –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
 * @param {boolean} options.includeStats - –í–∫–ª—é—á–∞—Ç—å –ª–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
 * @returns {Promise<string>} HTML-—Ä–∞–∑–º–µ—Ç–∫–∞ –ø–∞–Ω–µ–ª–∏
 */
async function createChainResultsPanel(options) {
  const { chainId, runId, includeStats = true } = options;
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ü–µ–ø–æ—á–∫–∏
    const response = await mcp.sendCommand('chain_results', { 
      chain_id: chainId,
      run_id: runId,
      include_stats: includeStats
    });
    
    if (!response || !response.results || response.results.length === 0) {
      return `
        <div class="cr-panel">
          <div class="cr-header">
            <h2>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è —Ü–µ–ø–æ—á–∫–∏: ${chainId}</h2>
          </div>
          <div class="cr-empty-state">
            <p>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è —ç—Ç–æ–π —Ü–µ–ø–æ—á–∫–∏.</p>
          </div>
        </div>
      `;
    }
    
    // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    const resultsTable = createResultsTableHTML(response.results);
    
    // –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
    const statsSection = includeStats && response.stats 
      ? createStatsHTML(response.stats) 
      : '';
    
    // –°–æ–∑–¥–∞–µ–º —Å–µ–∫—Ü–∏—é —á–µ–∫–ø–æ–∏–Ω—Ç–æ–≤, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω runId
    const checkpointsSection = runId && response.checkpoints 
      ? createCheckpointsHTML(response.checkpoints)
      : '';
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º HTML-—Ä–∞–∑–º–µ—Ç–∫—É
    return `
      <div class="cr-panel">
        <div class="cr-header">
          <h2>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è —Ü–µ–ø–æ—á–∫–∏: ${response.chain_name || chainId}</h2>
          ${runId ? `<div class="cr-subheader">–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: ${runId}</div>` : ''}
        </div>
        
        ${statsSection}
        
        <div class="cr-results-container">
          <h3>–ò—Å—Ç–æ—Ä–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π</h3>
          ${resultsTable}
        </div>
        
        ${checkpointsSection}
      </div>
    `;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:', error);
    return `
      <div class="cr-panel cr-error">
        <h2>–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤</h2>
        <p>${error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ü–µ–ø–æ—á–∫–∏'}</p>
      </div>
    `;
  }
}

/**
 * –°–æ–∑–¥–∞–µ—Ç HTML-—Ä–∞–∑–º–µ—Ç–∫—É —Ç–∞–±–ª–∏—Ü—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
 * @param {Array} results - –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
 * @returns {string} HTML-—Ä–∞–∑–º–µ—Ç–∫–∞
 */
function createResultsTableHTML(results) {
  if (!results || results.length === 0) {
    return '<div class="cr-results-empty">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ü–µ–ø–æ—á–∫–∏</div>';
  }
  
  // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
  const tableRows = results.map(result => {
    const startDate = new Date(result.started_at);
    const formattedStartDate = startDate.toLocaleString();
    
    const duration = result.duration_ms 
      ? formatDuration(result.duration_ms) 
      : '–ù/–î';
    
    const statusClass = getStatusClass(result.status);
    const statusText = getStatusText(result.status);
    
    return `
      <tr data-run-id="${result.run_id}" onclick="showRunDetails('${result.run_id}')">
        <td><div class="cr-run-id">${result.run_id}</div></td>
        <td><div class="cr-status ${statusClass}">${statusText}</div></td>
        <td>${formattedStartDate}</td>
        <td>${duration}</td>
        <td>${result.result_summary}</td>
        <td>
          <button class="cr-btn cr-btn-view" onclick="event.stopPropagation(); showRunDetails('${result.run_id}')">
            –î–µ—Ç–∞–ª–∏
          </button>
        </td>
      </tr>
    `;
  });
  
  return `
    <div class="cr-table-container">
      <table class="cr-results-table">
        <thead>
          <tr>
            <th>ID –∑–∞–ø—É—Å–∫–∞</th>
            <th>–°—Ç–∞—Ç—É—Å</th>
            <th>–î–∞—Ç–∞ –∑–∞–ø—É—Å–∫–∞</th>
            <th>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å</th>
            <th>–†–µ–∑—É–ª—å—Ç–∞—Ç</th>
            <th>–î–µ–π—Å—Ç–≤–∏—è</th>
          </tr>
        </thead>
        <tbody>
          ${tableRows.join('')}
        </tbody>
      </table>
    </div>
  `;
}

/**
 * –°–æ–∑–¥–∞–µ—Ç HTML-—Ä–∞–∑–º–µ—Ç–∫—É —Å–µ–∫—Ü–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
 * @param {Object} stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
 * @returns {string} HTML-—Ä–∞–∑–º–µ—Ç–∫–∞
 */
function createStatsHTML(stats) {
  if (!stats) {
    return '';
  }
  
  const lastRunDate = new Date(stats.last_run_date);
  const formattedLastRunDate = lastRunDate.toLocaleString();
  
  const lastSuccessDate = new Date(stats.last_successful_date);
  const formattedLastSuccessDate = lastSuccessDate.toLocaleString();
  
  return `
    <div class="cr-stats-container">
      <h3>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π</h3>
      <div class="cr-stats-grid">
        <div class="cr-stat-item">
          <div class="cr-stat-value">${stats.total_runs}</div>
          <div class="cr-stat-label">–í—Å–µ–≥–æ –∑–∞–ø—É—Å–∫–æ–≤</div>
        </div>
        <div class="cr-stat-item">
          <div class="cr-stat-value">${stats.successful_runs}</div>
          <div class="cr-stat-label">–£—Å–ø–µ—à–Ω—ã—Ö</div>
        </div>
        <div class="cr-stat-item">
          <div class="cr-stat-value">${stats.failed_runs}</div>
          <div class="cr-stat-label">–û—à–∏–±–æ–∫</div>
        </div>
        <div class="cr-stat-item">
          <div class="cr-stat-value">${stats.success_rate.toFixed(1)}%</div>
          <div class="cr-stat-label">–£—Å–ø–µ—à–Ω–æ—Å—Ç—å</div>
        </div>
        <div class="cr-stat-item">
          <div class="cr-stat-value">${formatDuration(stats.average_duration_ms)}</div>
          <div class="cr-stat-label">–°—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å</div>
        </div>
        <div class="cr-stat-item">
          <div class="cr-stat-value">${stats.average_tokens_used}</div>
          <div class="cr-stat-label">–°—Ä–µ–¥–Ω. —Ç–æ–∫–µ–Ω–æ–≤</div>
        </div>
        <div class="cr-stat-item">
          <div class="cr-stat-value">${stats.total_tokens_used}</div>
          <div class="cr-stat-label">–í—Å–µ–≥–æ —Ç–æ–∫–µ–Ω–æ–≤</div>
        </div>
        <div class="cr-stat-item">
          <div class="cr-stat-value">$${stats.estimated_cost.toFixed(2)}</div>
          <div class="cr-stat-label">–°—Ç–æ–∏–º–æ—Å—Ç—å</div>
        </div>
      </div>
      <div class="cr-stats-dates">
        <div><strong>–ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—É—Å–∫:</strong> ${formattedLastRunDate}</div>
        <div><strong>–ü–æ—Å–ª–µ–¥–Ω–∏–π —É—Å–ø–µ—à–Ω—ã–π:</strong> ${formattedLastSuccessDate}</div>
      </div>
    </div>
  `;
}

/**
 * –°–æ–∑–¥–∞–µ—Ç HTML-—Ä–∞–∑–º–µ—Ç–∫—É —Å–µ–∫—Ü–∏–∏ —á–µ–∫–ø–æ–∏–Ω—Ç–æ–≤
 * @param {Array} checkpoints - –°–ø–∏—Å–æ–∫ —á–µ–∫–ø–æ–∏–Ω—Ç–æ–≤
 * @returns {string} HTML-—Ä–∞–∑–º–µ—Ç–∫–∞
 */
function createCheckpointsHTML(checkpoints) {
  if (!checkpoints || checkpoints.length === 0) {
    return '';
  }
  
  const checkpointTimeline = createCheckpointTimelineHTML(checkpoints);
  
  return `
    <div class="cr-checkpoints-container">
      <h3>–ß–µ–∫–ø–æ–∏–Ω—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è</h3>
      ${checkpointTimeline}
      <div class="cr-view-all-checkpoints">
        <button class="cr-btn cr-btn-view-all" onclick="showAllCheckpoints('${checkpoints[0].chain_id}')">
          –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ —á–µ–∫–ø–æ–∏–Ω—Ç—ã
        </button>
      </div>
    </div>
  `;
}

/**
 * –°–æ–∑–¥–∞–µ—Ç HTML-—Ä–∞–∑–º–µ—Ç–∫—É –≤—Ä–µ–º–µ–Ω–Ω–æ–π —à–∫–∞–ª—ã —á–µ–∫–ø–æ–∏–Ω—Ç–æ–≤
 * @param {Array} checkpoints - –°–ø–∏—Å–æ–∫ —á–µ–∫–ø–æ–∏–Ω—Ç–æ–≤
 * @returns {string} HTML-—Ä–∞–∑–º–µ—Ç–∫–∞
 */
function createCheckpointTimelineHTML(checkpoints) {
  if (!checkpoints || checkpoints.length === 0) {
    return '<div class="cr-checkpoints-empty">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —á–µ–∫–ø–æ–∏–Ω—Ç–∞—Ö</div>';
  }
  
  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è
  const sortedCheckpoints = [...checkpoints].sort((a, b) => 
    new Date(a.created_at) - new Date(b.created_at)
  );
  
  // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —à–∫–∞–ª–µ
  const timelineItems = sortedCheckpoints.map((cp, index) => {
    const typeClass = `cr-cp-type-${cp.type.toLowerCase()}`;
    const progressPercentage = ((index + 1) / sortedCheckpoints.length) * 100;
    
    let icon = 'üìÑ';
    switch (cp.type.toLowerCase()) {
      case 'input':
        icon = 'üì•';
        break;
      case 'output':
        icon = 'üì§';
        break;
      case 'intermediate':
        icon = 'üîÑ';
        break;
      case 'complete':
        icon = '‚úÖ';
        break;
      case 'error':
        icon = '‚ùå';
        break;
      case 'segment':
        icon = 'üìë';
        break;
    }
    
    return `
      <div class="cr-timeline-item ${typeClass}" style="left: ${progressPercentage}%;" 
           data-checkpoint-id="${cp.id}" 
           onclick="showCheckpointDetails('${cp.id}')">
        <div class="cr-timeline-icon">${icon}</div>
        <div class="cr-timeline-tooltip">
          <div>${cp.type}</div>
          <div>${formatContentSize(cp.content_size)}</div>
        </div>
      </div>
    `;
  });
  
  return `
    <div class="cr-timeline">
      <div class="cr-timeline-track"></div>
      ${timelineItems.join('')}
    </div>
  `;
}

/**
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –∑–∞–ø—É—Å–∫–∞
 * @param {string} runId - ID –∑–∞–ø—É—Å–∫–∞
 */
async function showRunDetails(runId) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—É—Å–∫–µ
    const response = await mcp.sendCommand('chain_run_result', { 
      run_id: runId 
    });
    
    // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –¥–µ—Ç–∞–ª—è–º–∏
    const modal = document.createElement('div');
    modal.className = 'cr-modal';
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    let resultContent = '';
    if (response.result && response.result.text) {
      resultContent = `<pre class="cr-result-content">${escapeHtml(response.result.text)}</pre>`;
    } else if (response.result) {
      resultContent = `<pre class="cr-result-content">${escapeHtml(JSON.stringify(response.result, null, 2))}</pre>`;
    } else {
      resultContent = '<div class="cr-result-empty">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ</div>';
    }
    
    // –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —á–µ–∫–ø–æ–∏–Ω—Ç–æ–≤
    let checkpointsContent = '';
    if (response.checkpoints && response.checkpoints.length > 0) {
      const checkpointsList = response.checkpoints.map(cp => {
        const typeClass = `cr-cp-type-${cp.type.toLowerCase()}`;
        return `
          <div class="cr-cp-item ${typeClass}">
            <div class="cr-cp-item-header">
              <div class="cr-cp-item-type">${cp.type}</div>
              <div class="cr-cp-item-model">${cp.model_id || '–ù–µ—Ç –º–æ–¥–µ–ª–∏'}</div>
              <div class="cr-cp-item-size">${formatContentSize(cp.content_size)}</div>
            </div>
            <div class="cr-cp-item-actions">
              <button class="cr-btn cr-btn-view" onclick="showCheckpointDetails('${cp.id}')">–ü—Ä–æ—Å–º–æ—Ç—Ä</button>
            </div>
          </div>
        `;
      }).join('');
      
      checkpointsContent = `
        <div class="cr-modal-checkpoints">
          <h4>–ß–µ–∫–ø–æ–∏–Ω—Ç—ã:</h4>
          <div class="cr-cp-list">
            ${checkpointsList}
          </div>
        </div>
      `;
    }
    
    modal.innerHTML = `
      <div class="cr-modal-content">
        <div class="cr-modal-header">
          <h3>–†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${runId}</h3>
          <button class="cr-modal-close" onclick="this.parentNode.parentNode.parentNode.remove()">√ó</button>
        </div>
        <div class="cr-modal-body">
          <div class="cr-modal-result">
            <h4>–†–µ–∑—É–ª—å—Ç–∞—Ç:</h4>
            ${resultContent}
          </div>
          ${checkpointsContent}
        </div>
        <div class="cr-modal-footer">
          <button class="cr-btn cr-btn-close" onclick="this.parentNode.parentNode.parentNode.remove()">–ó–∞–∫—Ä—ã—Ç—å</button>
        </div>
      </div>
    `;
    
    document.body.appendChild(modal);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–µ—Ç–∞–ª–µ–π –∑–∞–ø—É—Å–∫–∞:', error);
    alert(`–û—à–∏–±–∫–∞: ${error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∑–∞–ø—É—Å–∫–∞'}`);
  }
}

/**
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ —á–µ–∫–ø–æ–∏–Ω—Ç—ã —Ü–µ–ø–æ—á–∫–∏
 * @param {string} chainId - ID —Ü–µ–ø–æ—á–∫–∏
 */
function showAllCheckpoints(chainId) {
  // –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —á–µ–∫–ø–æ–∏–Ω—Ç–æ–≤
  window.checkpointViewer.createCheckpointViewerPanel({ chainId })
    .then(html => {
      const modal = document.createElement('div');
      modal.className = 'cr-modal';
      modal.innerHTML = `
        <div class="cr-modal-content cr-modal-content-wide">
          <div class="cr-modal-header">
            <h3>–í—Å–µ —á–µ–∫–ø–æ–∏–Ω—Ç—ã —Ü–µ–ø–æ—á–∫–∏: ${chainId}</h3>
            <button class="cr-modal-close" onclick="this.parentNode.parentNode.parentNode.remove()">√ó</button>
          </div>
          <div class="cr-modal-body">
            ${html}
          </div>
          <div class="cr-modal-footer">
            <button class="cr-btn cr-btn-close" onclick="this.parentNode.parentNode.parentNode.remove()">–ó–∞–∫—Ä—ã—Ç—å</button>
          </div>
        </div>
      `;
      
      document.body.appendChild(modal);
    })
    .catch(error => {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —á–µ–∫–ø–æ–∏–Ω—Ç–æ–≤:', error);
      alert(`–û—à–∏–±–∫–∞: ${error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —á–µ–∫–ø–æ–∏–Ω—Ç—ã'}`);
    });
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
 * @param {number} ms - –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
 * @returns {string} –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
 */
function formatDuration(ms) {
  if (ms < 1000) {
    return `${ms} –º—Å`;
  } else if (ms < 60000) {
    return `${(ms / 1000).toFixed(1)} —Å–µ–∫`;
  } else if (ms < 3600000) {
    const minutes = Math.floor(ms / 60000);
    const seconds = Math.floor((ms % 60000) / 1000);
    return `${minutes}–º ${seconds}—Å`;
  } else {
    const hours = Math.floor(ms / 3600000);
    const minutes = Math.floor((ms % 3600000) / 60000);
    return `${hours}—á ${minutes}–º`;
  }
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—Ä —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
 * @param {number} size - –†–∞–∑–º–µ—Ä –≤ –±–∞–π—Ç–∞—Ö
 * @returns {string} –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä
 */
function formatContentSize(size) {
  if (size < 1024) {
    return `${size} –ë`;
  } else if (size < 1024 * 1024) {
    return `${(size / 1024).toFixed(1)} –ö–ë`;
  } else {
    return `${(size / (1024 * 1024)).toFixed(1)} –ú–ë`;
  }
}

/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç CSS-–∫–ª–∞—Å—Å –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
 * @param {string} status - –°—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
 * @returns {string} CSS-–∫–ª–∞—Å—Å
 */
function getStatusClass(status) {
  switch (status.toLowerCase()) {
    case 'completed':
    case 'done':
    case 'success':
      return 'cr-status-success';
    case 'failed':
    case 'error':
      return 'cr-status-error';
    case 'running':
    case 'in-progress':
      return 'cr-status-running';
    case 'pending':
    case 'waiting':
      return 'cr-status-pending';
    case 'cancelled':
      return 'cr-status-cancelled';
    default:
      return 'cr-status-unknown';
  }
}

/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
 * @param {string} status - –°—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
 * @returns {string} –¢–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞
 */
function getStatusText(status) {
  switch (status.toLowerCase()) {
    case 'completed':
    case 'done':
    case 'success':
      return '–£—Å–ø–µ—à–Ω–æ';
    case 'failed':
    case 'error':
      return '–û—à–∏–±–∫–∞';
    case 'running':
    case 'in-progress':
      return '–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è';
    case 'pending':
    case 'waiting':
      return '–û–∂–∏–¥–∞–Ω–∏–µ';
    case 'cancelled':
      return '–û—Ç–º–µ–Ω–µ–Ω–æ';
    default:
      return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
  }
}

/**
 * –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç HTML-—Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
 * @param {string} text - –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
 * @returns {string} –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
 */
function escapeHtml(text) {
  if (!text) return '';
  return text
    .replace(/&/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/"/g, '&quot;')
    .replace(/'/g, '&#039;');
}

/**
 * –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ MCP
 */
module.exports = {
  createChainResultsPanel,
  showRunDetails,
  showAllCheckpoints
}; 