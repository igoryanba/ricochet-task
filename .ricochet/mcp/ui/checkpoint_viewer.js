/**
 * –ú–æ–¥—É–ª—å –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —á–µ–∫–ø–æ–∏–Ω—Ç–æ–≤ –≤ MCP-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
 */

/**
 * –°–æ–∑–¥–∞–µ—Ç –ø–∞–Ω–µ–ª—å –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —á–µ–∫–ø–æ–∏–Ω—Ç–æ–≤
 * @param {Object} options - –û–ø—Ü–∏–∏ –ø–∞–Ω–µ–ª–∏
 * @param {string} options.chainId - ID —Ü–µ–ø–æ—á–∫–∏
 * @param {string} options.runId - ID –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
 * @returns {Promise<string>} HTML-—Ä–∞–∑–º–µ—Ç–∫–∞ –ø–∞–Ω–µ–ª–∏
 */
async function createCheckpointViewerPanel(options) {
  const { chainId, runId } = options;
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —á–µ–∫–ø–æ–∏–Ω—Ç–æ–≤
    const response = await mcp.sendCommand('checkpoint_list', { 
      chain_id: chainId,
      run_id: runId
    });
    
    if (!response || !response.checkpoints || response.checkpoints.length === 0) {
      return `
        <div class="cp-panel">
          <div class="cp-header">
            <h2>–ß–µ–∫–ø–æ–∏–Ω—Ç—ã –¥–ª—è —Ü–µ–ø–æ—á–∫–∏: ${chainId}</h2>
          </div>
          <div class="cp-empty-state">
            <p>–ß–µ–∫–ø–æ–∏–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è —ç—Ç–æ–π —Ü–µ–ø–æ—á–∫–∏.</p>
          </div>
        </div>
      `;
    }
    
    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —à–∫–∞–ª—É
    const timeline = createTimelineHTML(response.timeline);
    
    // –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —á–µ–∫–ø–æ–∏–Ω—Ç–æ–≤
    const checkpointsList = createCheckpointsListHTML(response.checkpoints);
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º HTML-—Ä–∞–∑–º–µ—Ç–∫—É
    return `
      <div class="cp-panel">
        <div class="cp-header">
          <h2>–ß–µ–∫–ø–æ–∏–Ω—Ç—ã –¥–ª—è —Ü–µ–ø–æ—á–∫–∏: ${chainId}</h2>
          ${runId ? `<div class="cp-subheader">–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: ${runId}</div>` : ''}
        </div>
        
        <div class="cp-timeline-container">
          <h3>–í—Ä–µ–º–µ–Ω–Ω–∞—è —à–∫–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è</h3>
          ${timeline}
        </div>
        
        <div class="cp-list-container">
          <h3>–°–ø–∏—Å–æ–∫ —á–µ–∫–ø–æ–∏–Ω—Ç–æ–≤</h3>
          ${checkpointsList}
        </div>
      </div>
    `;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —á–µ–∫–ø–æ–∏–Ω—Ç–æ–≤:', error);
    return `
      <div class="cp-panel cp-error">
        <h2>–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —á–µ–∫–ø–æ–∏–Ω—Ç–æ–≤</h2>
        <p>${error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —á–µ–∫–ø–æ–∏–Ω—Ç—ã'}</p>
      </div>
    `;
  }
}

/**
 * –°–æ–∑–¥–∞–µ—Ç HTML-—Ä–∞–∑–º–µ—Ç–∫—É –≤—Ä–µ–º–µ–Ω–Ω–æ–π —à–∫–∞–ª—ã
 * @param {Array} timeline - –°–æ–±—ã—Ç–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–π —à–∫–∞–ª—ã
 * @returns {string} HTML-—Ä–∞–∑–º–µ—Ç–∫–∞
 */
function createTimelineHTML(timeline) {
  if (!timeline || timeline.length === 0) {
    return '<div class="cp-timeline-empty">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–π —à–∫–∞–ª—ã</div>';
  }
  
  // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏
  const sortedEvents = [...timeline].sort((a, b) => 
    new Date(a.timestamp) - new Date(b.timestamp)
  );
  
  // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —à–∫–∞–ª—ã
  const timelineItems = sortedEvents.map((event, index) => {
    const date = new Date(event.timestamp);
    const formattedTime = date.toLocaleTimeString();
    const typeClass = `cp-event-${event.type.toLowerCase()}`;
    const progressPercentage = ((index + 1) / sortedEvents.length) * 100;
    
    let icon = 'üìÑ';
    switch (event.type.toLowerCase()) {
      case 'input':
        icon = 'üì•';
        break;
      case 'output':
        icon = 'üì§';
        break;
      case 'intermediate':
        icon = 'üîÑ';
        break;
      case 'complete':
        icon = '‚úÖ';
        break;
      case 'error':
        icon = '‚ùå';
        break;
      case 'segment':
        icon = 'üìë';
        break;
    }
    
    return `
      <div class="cp-timeline-item ${typeClass}" style="left: ${progressPercentage}%;" 
           data-checkpoint-id="${event.id}" 
           onclick="showCheckpointDetails('${event.id}')">
        <div class="cp-timeline-icon">${icon}</div>
        <div class="cp-timeline-tooltip">
          <div>${event.type}</div>
          <div>${event.model_name || ''}</div>
          <div>${formattedTime}</div>
        </div>
      </div>
    `;
  });
  
  return `
    <div class="cp-timeline">
      <div class="cp-timeline-track"></div>
      ${timelineItems.join('')}
    </div>
  `;
}

/**
 * –°–æ–∑–¥–∞–µ—Ç HTML-—Ä–∞–∑–º–µ—Ç–∫—É —Å–ø–∏—Å–∫–∞ —á–µ–∫–ø–æ–∏–Ω—Ç–æ–≤
 * @param {Array} checkpoints - –°–ø–∏—Å–æ–∫ —á–µ–∫–ø–æ–∏–Ω—Ç–æ–≤
 * @returns {string} HTML-—Ä–∞–∑–º–µ—Ç–∫–∞
 */
function createCheckpointsListHTML(checkpoints) {
  if (!checkpoints || checkpoints.length === 0) {
    return '<div class="cp-list-empty">–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —á–µ–∫–ø–æ–∏–Ω—Ç–æ–≤</div>';
  }
  
  // –°–æ—Ä—Ç–∏—Ä—É–µ–º —á–µ–∫–ø–æ–∏–Ω—Ç—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è (–æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º)
  const sortedCheckpoints = [...checkpoints].sort((a, b) => 
    new Date(b.created_at) - new Date(a.created_at)
  );
  
  // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å–ø–∏—Å–∫–∞
  const checkpointItems = sortedCheckpoints.map(cp => {
    const date = new Date(cp.created_at);
    const formattedDate = date.toLocaleString();
    const typeClass = `cp-type-${cp.type.toLowerCase()}`;
    const sizeFormatted = formatContentSize(cp.content_size);
    
    return `
      <div class="cp-list-item ${typeClass}" data-checkpoint-id="${cp.id}">
        <div class="cp-item-header" onclick="toggleCheckpointDetails('${cp.id}')">
          <div class="cp-item-type">${cp.type}</div>
          <div class="cp-item-model">${cp.model_id || '–ù–µ—Ç –º–æ–¥–µ–ª–∏'}</div>
          <div class="cp-item-time">${formattedDate}</div>
          <div class="cp-item-size">${sizeFormatted}</div>
        </div>
        <div class="cp-item-actions">
          <button onclick="showCheckpointDetails('${cp.id}')" class="cp-btn cp-btn-view">–ü—Ä–æ—Å–º–æ—Ç—Ä</button>
          <button onclick="deleteCheckpoint('${cp.id}')" class="cp-btn cp-btn-delete">–£–¥–∞–ª–∏—Ç—å</button>
        </div>
        <div id="cp-details-${cp.id}" class="cp-item-details" style="display: none;">
          <div class="cp-details-loading">–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ...</div>
        </div>
      </div>
    `;
  });
  
  return `
    <div class="cp-list">
      ${checkpointItems.join('')}
    </div>
  `;
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—Ä —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
 * @param {number} size - –†–∞–∑–º–µ—Ä –≤ –±–∞–π—Ç–∞—Ö
 * @returns {string} –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä
 */
function formatContentSize(size) {
  if (size < 1024) {
    return `${size} –ë`;
  } else if (size < 1024 * 1024) {
    return `${(size / 1024).toFixed(1)} –ö–ë`;
  } else {
    return `${(size / (1024 * 1024)).toFixed(1)} –ú–ë`;
  }
}

/**
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ —á–µ–∫–ø–æ–∏–Ω—Ç–∞
 * @param {string} checkpointId - ID —á–µ–∫–ø–æ–∏–Ω—Ç–∞
 */
async function showCheckpointDetails(checkpointId) {
  try {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–µ—Ç–∞–ª–∏ —á–µ–∫–ø–æ–∏–Ω—Ç–∞
    const checkpoint = await mcp.sendCommand('checkpoint_get', { 
      checkpoint_id: checkpointId 
    });
    
    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥–µ—Ç–∞–ª–∏ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
    const modal = document.createElement('div');
    modal.className = 'cp-modal';
    modal.innerHTML = `
      <div class="cp-modal-content">
        <div class="cp-modal-header">
          <h3>–ß–µ–∫–ø–æ–∏–Ω—Ç: ${checkpoint.type}</h3>
          <button class="cp-modal-close" onclick="this.parentNode.parentNode.parentNode.remove()">√ó</button>
        </div>
        <div class="cp-modal-body">
          <div class="cp-modal-info">
            <div><strong>ID:</strong> ${checkpoint.id}</div>
            <div><strong>–¢–∏–ø:</strong> ${checkpoint.type}</div>
            <div><strong>–ú–æ–¥–µ–ª—å:</strong> ${checkpoint.model_id || '–ù–µ—Ç'}</div>
            <div><strong>–°–æ–∑–¥–∞–Ω:</strong> ${new Date(checkpoint.created_at).toLocaleString()}</div>
            <div><strong>–†–∞–∑–º–µ—Ä:</strong> ${formatContentSize(checkpoint.content_size)}</div>
          </div>
          <div class="cp-modal-content-container">
            <h4>–°–æ–¥–µ—Ä–∂–∏–º–æ–µ:</h4>
            <pre class="cp-modal-content-pre">${escapeHtml(checkpoint.content)}</pre>
          </div>
          ${checkpoint.metadata ? `
            <div class="cp-modal-metadata">
              <h4>–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ:</h4>
              <pre>${escapeHtml(JSON.stringify(checkpoint.metadata, null, 2))}</pre>
            </div>
          ` : ''}
        </div>
        <div class="cp-modal-footer">
          <button class="cp-btn cp-btn-delete" onclick="deleteCheckpoint('${checkpoint.id}', true)">–£–¥–∞–ª–∏—Ç—å</button>
          <button class="cp-btn cp-btn-close" onclick="this.parentNode.parentNode.parentNode.remove()">–ó–∞–∫—Ä—ã—Ç—å</button>
        </div>
      </div>
    `;
    
    document.body.appendChild(modal);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–µ—Ç–∞–ª–µ–π —á–µ–∫–ø–æ–∏–Ω—Ç–∞:', error);
    alert(`–û—à–∏–±–∫–∞: ${error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–µ—Ç–∞–ª–∏ —á–µ–∫–ø–æ–∏–Ω—Ç–∞'}`);
  }
}

/**
 * –£–¥–∞–ª—è–µ—Ç —á–µ–∫–ø–æ–∏–Ω—Ç
 * @param {string} checkpointId - ID —á–µ–∫–ø–æ–∏–Ω—Ç–∞
 * @param {boolean} isModal - –§–ª–∞–≥, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π, —á—Ç–æ –≤—ã–∑–æ–≤ –∏–∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
 */
async function deleteCheckpoint(checkpointId, isModal = false) {
  if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —á–µ–∫–ø–æ–∏–Ω—Ç?')) {
    return;
  }
  
  try {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ
    await mcp.sendCommand('checkpoint_delete', { 
      checkpoint_id: checkpointId 
    });
    
    // –£–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –∏–∑ DOM
    const element = document.querySelector(`[data-checkpoint-id="${checkpointId}"]`);
    if (element) {
      element.remove();
    }
    
    // –ï—Å–ª–∏ –≤—ã–∑–æ–≤ –∏–∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞, –∑–∞–∫—Ä—ã–≤–∞–µ–º –µ–≥–æ
    if (isModal) {
      const modal = document.querySelector('.cp-modal');
      if (modal) {
        modal.remove();
      }
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫, –µ—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –±—ã–ª –≤ –Ω–µ–º
    const listContainer = document.querySelector('.cp-list-container');
    if (listContainer) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ —Å–ø–∏—Å–∫–µ
      const remainingItems = listContainer.querySelectorAll('.cp-list-item');
      if (remainingItems.length === 0) {
        listContainer.querySelector('.cp-list').innerHTML = 
          '<div class="cp-list-empty">–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —á–µ–∫–ø–æ–∏–Ω—Ç–æ–≤</div>';
      }
    }
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    alert('–ß–µ–∫–ø–æ–∏–Ω—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —á–µ–∫–ø–æ–∏–Ω—Ç–∞:', error);
    alert(`–û—à–∏–±–∫–∞: ${error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —á–µ–∫–ø–æ–∏–Ω—Ç'}`);
  }
}

/**
 * –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π —á–µ–∫–ø–æ–∏–Ω—Ç–∞ –≤ —Å–ø–∏—Å–∫–µ
 * @param {string} checkpointId - ID —á–µ–∫–ø–æ–∏–Ω—Ç–∞
 */
async function toggleCheckpointDetails(checkpointId) {
  const detailsElement = document.getElementById(`cp-details-${checkpointId}`);
  
  if (!detailsElement) return;
  
  const isVisible = detailsElement.style.display !== 'none';
  
  if (isVisible) {
    detailsElement.style.display = 'none';
    return;
  }
  
  detailsElement.style.display = 'block';
  
  // –ï—Å–ª–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
  if (detailsElement.querySelector('.cp-details-loading')) {
    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–µ—Ç–∞–ª–∏ —á–µ–∫–ø–æ–∏–Ω—Ç–∞
      const checkpoint = await mcp.sendCommand('checkpoint_get', { 
        checkpoint_id: checkpointId 
      });
      
      // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
      const previewContent = checkpoint.content.length > 500 
        ? checkpoint.content.substring(0, 500) + '...' 
        : checkpoint.content;
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
      detailsElement.innerHTML = `
        <div class="cp-preview">
          <pre>${escapeHtml(previewContent)}</pre>
          <button class="cp-btn cp-btn-view" onclick="showCheckpointDetails('${checkpoint.id}')">
            –ü–æ–ª–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
          </button>
        </div>
      `;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–µ–≤—å—é —á–µ–∫–ø–æ–∏–Ω—Ç–∞:', error);
      detailsElement.innerHTML = `
        <div class="cp-error">
          –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —á–µ–∫–ø–æ–∏–Ω—Ç–∞'}
        </div>
      `;
    }
  }
}

/**
 * –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç HTML-—Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
 * @param {string} text - –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
 * @returns {string} –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
 */
function escapeHtml(text) {
  if (!text) return '';
  return text
    .replace(/&/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/"/g, '&quot;')
    .replace(/'/g, '&#039;');
}

/**
 * –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ MCP
 */
module.exports = {
  createCheckpointViewerPanel,
  showCheckpointDetails,
  deleteCheckpoint,
  toggleCheckpointDetails
}; 