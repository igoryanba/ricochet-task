/**
 * ChainInteractiveBuilderPanel - UI-–∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–æ–Ω—Å—Ç—Ä—É–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–µ–ø–æ—á–µ–∫ –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ
 * 
 * –≠—Ç–æ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–µ–ø–æ—á–µ–∫ –º–æ–¥–µ–ª–µ–π,
 * –≤–∫–ª—é—á–∞—è drag-and-drop –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å, –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–µ–π –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é —Ü–µ–ø–æ—á–µ–∫.
 */

class ChainInteractiveBuilderPanel {
    /**
     * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –ø–∞–Ω–µ–ª—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ —Ü–µ–ø–æ—á–µ–∫
     * @param {Object} options - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
     * @param {String} options.containerId - ID –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è –ø–∞–Ω–µ–ª–∏
     * @param {Object} options.mcp - –û–±—ä–µ–∫—Ç MCP-–∫–ª–∏–µ–Ω—Ç–∞
     * @param {Function} options.onClose - –ö–æ–ª–ª–±—ç–∫ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–∞–Ω–µ–ª–∏
     * @param {Function} options.onChainCreated - –ö–æ–ª–ª–±—ç–∫ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ü–µ–ø–æ—á–∫–∏
     */
    constructor(options) {
        this.container = document.getElementById(options.containerId);
        this.mcp = options.mcp;
        this.onClose = options.onClose || (() => {});
        this.onChainCreated = options.onChainCreated || (() => {});
        
        this.sessionId = null;
        this.chainId = null;
        this.chainName = '–ù–æ–≤–∞—è —Ü–µ–ø–æ—á–∫–∞';
        this.models = [];
        this.format = 'ui';
        this.editorMode = 'panel';
        
        this.initPanel();
        this.bindEvents();
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–∞–Ω–µ–ª—å
     */
    initPanel() {
        if (!this.container) {
            console.error('–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ —Ü–µ–ø–æ—á–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }
        
        this.container.innerHTML = `
            <div class="ricochet-panel chain-interactive-builder">
                <div class="ricochet-panel-header">
                    <h3>–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Ü–µ–ø–æ—á–µ–∫</h3>
                    <div class="ricochet-panel-actions">
                        <button id="chain-builder-view-toggle" title="–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞" class="icon-button">üîÑ</button>
                        <button id="chain-builder-close" title="–ó–∞–∫—Ä—ã—Ç—å" class="icon-button">‚úï</button>
                    </div>
                </div>
                
                <div class="ricochet-panel-content">
                    <div id="builder-control-panel" class="builder-control-panel">
                        <div class="form-group">
                            <label for="chain-name-input">–ù–∞–∑–≤–∞–Ω–∏–µ —Ü–µ–ø–æ—á–∫–∏:</label>
                            <input type="text" id="chain-name-input" placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ü–µ–ø–æ—á–∫–∏" value="${this.chainName}">
                        </div>
                        
                        <div class="form-group builder-actions">
                            <button id="add-model-btn" class="primary-button">
                                <i class="fas fa-plus"></i> –î–æ–±–∞–≤–∏—Ç—å –º–æ–¥–µ–ª—å
                            </button>
                            <button id="save-chain-btn" class="success-button">
                                <i class="fas fa-save"></i> –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ü–µ–ø–æ—á–∫—É
                            </button>
                        </div>
                    </div>
                    
                    <div id="builder-workspace" class="builder-workspace">
                        <div id="models-container" class="models-container">
                            <div class="empty-state">
                                <p>–ù–µ—Ç –º–æ–¥–µ–ª–µ–π –≤ —Ü–µ–ø–æ—á–∫–µ</p>
                                <p>–ù–∞–∂–º–∏—Ç–µ "–î–æ–±–∞–≤–∏—Ç—å –º–æ–¥–µ–ª—å" –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã</p>
                            </div>
                        </div>
                    </div>
                    
                    <div id="model-selection-panel" class="model-selection-panel" style="display: none;">
                        <div class="panel-header">
                            <h4>–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å</h4>
                            <button id="close-model-selection" class="icon-button">‚úï</button>
                        </div>
                        
                        <div class="form-group">
                            <label for="model-role-input">–†–æ–ª—å –º–æ–¥–µ–ª–∏:</label>
                            <input type="text" id="model-role-input" placeholder="analyzer, summarizer, integrator...">
                        </div>
                        
                        <div id="models-list" class="models-list">
                            <div class="loading">–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π...</div>
                        </div>
                    </div>
                    
                    <div id="model-edit-panel" class="model-edit-panel" style="display: none;">
                        <div class="panel-header">
                            <h4>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏</h4>
                            <button id="close-model-edit" class="icon-button">‚úï</button>
                        </div>
                        
                        <div class="form-group">
                            <label for="edit-model-role">–†–æ–ª—å –º–æ–¥–µ–ª–∏:</label>
                            <input type="text" id="edit-model-role" placeholder="analyzer, summarizer, integrator...">
                        </div>
                        
                        <div class="form-group">
                            <label for="edit-model-prompt">–ü—Ä–æ–º–ø—Ç:</label>
                            <textarea id="edit-model-prompt" placeholder="–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–ø—Ç –¥–ª—è –º–æ–¥–µ–ª–∏" rows="5"></textarea>
                        </div>
                        
                        <div class="form-group">
                            <label>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:</label>
                            <div class="parameters-container">
                                <div class="parameter-row">
                                    <label for="edit-param-temperature">–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:</label>
                                    <input type="range" id="edit-param-temperature" min="0" max="1" step="0.1" value="0.7">
                                    <span id="edit-param-temperature-value">0.7</span>
                                </div>
                                <div class="parameter-row">
                                    <label for="edit-param-max-tokens">–ú–∞–∫—Å. —Ç–æ–∫–µ–Ω–æ–≤:</label>
                                    <input type="number" id="edit-param-max-tokens" min="1" max="8000" value="2000">
                                </div>
                            </div>
                        </div>
                        
                        <div class="form-actions">
                            <button id="save-model-edit" class="primary-button">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
                            <button id="cancel-model-edit" class="secondary-button">–û—Ç–º–µ–Ω–∞</button>
                        </div>
                    </div>
                </div>
                
                <div id="builder-preview-panel" class="builder-preview-panel">
                    <div class="preview-header">
                        <h4>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ü–µ–ø–æ—á–∫–∏</h4>
                        <div class="preview-controls">
                            <button id="refresh-preview" class="icon-button" title="–û–±–Ω–æ–≤–∏—Ç—å">üîÑ</button>
                            <select id="preview-format">
                                <option value="ui">UI</option>
                                <option value="mermaid">Mermaid</option>
                                <option value="text">–¢–µ–∫—Å—Ç</option>
                            </select>
                        </div>
                    </div>
                    <div id="preview-container" class="preview-container">
                        <div class="empty-preview">
                            –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π
                        </div>
                    </div>
                </div>
            </div>
        `;
    }
    
    /**
     * –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
     */
    bindEvents() {
        // –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞–Ω–µ–ª—å—é
        document.getElementById('chain-builder-close').addEventListener('click', () => this.close());
        document.getElementById('chain-builder-view-toggle').addEventListener('click', () => this.toggleViewMode());
        
        // –û—Å–Ω–æ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        document.getElementById('add-model-btn').addEventListener('click', () => this.openModelSelection());
        document.getElementById('save-chain-btn').addEventListener('click', () => this.saveChain());
        document.getElementById('chain-name-input').addEventListener('input', (e) => {
            this.chainName = e.target.value;
        });
        
        // –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏
        document.getElementById('close-model-selection').addEventListener('click', () => this.closeModelSelection());
        document.getElementById('model-role-input').addEventListener('input', (e) => {
            this.filterModelsByRole(e.target.value);
        });
        
        // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
        document.getElementById('close-model-edit').addEventListener('click', () => this.closeModelEdit());
        document.getElementById('save-model-edit').addEventListener('click', () => this.saveModelEdit());
        document.getElementById('cancel-model-edit').addEventListener('click', () => this.closeModelEdit());
        
        // –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
        document.getElementById('refresh-preview').addEventListener('click', () => this.refreshPreview());
        document.getElementById('preview-format').addEventListener('change', (e) => {
            this.format = e.target.value;
            this.refreshPreview();
        });
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–ª–∑—É–Ω–∫–∞
        document.getElementById('edit-param-temperature').addEventListener('input', (e) => {
            document.getElementById('edit-param-temperature-value').textContent = e.target.value;
        });
        
        // –î–µ–ª–∞–µ–º –º–æ–¥–µ–ª–∏ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–µ–º—ã–º–∏
        this.initDragAndDrop();
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å drag-and-drop –¥–ª—è –º–æ–¥–µ–ª–µ–π
     */
    initDragAndDrop() {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É Sortable.js –∏–ª–∏ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–µ HTML5 Drag and Drop
        // –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø—Ä–∏–º–µ—Ä —Å HTML5 Drag and Drop
        const container = document.getElementById('models-container');
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        container.addEventListener('dragover', (e) => {
            e.preventDefault();
            const afterElement = this.getDragAfterElement(container, e.clientY);
            const draggable = document.querySelector('.dragging');
            if (afterElement == null) {
                container.appendChild(draggable);
            } else {
                container.insertBefore(draggable, afterElement);
            }
        });
        
        // –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Ä—è–¥–æ–∫ –º–æ–¥–µ–ª–µ–π
        container.addEventListener('dragend', () => {
            const modelElements = container.querySelectorAll('.model-item');
            this.reorderModels(Array.from(modelElements).map(el => parseInt(el.dataset.position)));
        });
    }
    
    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç, –ø–æ—Å–ª–µ –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –≤—Å—Ç–∞–≤–∏—Ç—å –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–µ–º—ã–π —ç–ª–µ–º–µ–Ω—Ç
     */
    getDragAfterElement(container, y) {
        const draggableElements = [...container.querySelectorAll('.model-item:not(.dragging)')];
        
        return draggableElements.reduce((closest, child) => {
            const box = child.getBoundingClientRect();
            const offset = y - box.top - box.height / 2;
            
            if (offset < 0 && offset > closest.offset) {
                return { offset: offset, element: child };
            } else {
                return closest;
            }
        }, { offset: Number.NEGATIVE_INFINITY }).element;
    }
    
    /**
     * –ü–µ—Ä–µ—É–ø–æ—Ä—è–¥–æ—á–∏–≤–∞–µ—Ç –º–æ–¥–µ–ª–∏ –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
     * @param {Array} newOrder - –ù–æ–≤—ã–π –ø–æ—Ä—è–¥–æ–∫ –ø–æ–∑–∏—Ü–∏–π –º–æ–¥–µ–ª–µ–π
     */
    reorderModels(newOrder) {
        if (!this.sessionId) return;
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∫–∞–∂–¥–æ–π –º–æ–¥–µ–ª–∏ –Ω–∞ –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é
        // –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –≤ –ø—Ä–∏–º–µ—Ä–µ –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        const newModels = [];
        
        for (let i = 0; i < newOrder.length; i++) {
            const oldPos = newOrder[i];
            if (this.models[oldPos]) {
                const model = { ...this.models[oldPos] };
                newModels.push(model);
            }
        }
        
        this.models = newModels;
        this.renderModels();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
        this.refreshPreview();
    }
    
    /**
     * –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –ø–∞–Ω–µ–ª—å –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏
     */
    async openModelSelection() {
        // –ï—Å–ª–∏ —Å–µ—Å—Å–∏—è –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞, —Å–æ–∑–¥–∞–µ–º –µ–µ
        if (!this.sessionId) {
            await this.createSession();
        }
        
        const modelSelectionPanel = document.getElementById('model-selection-panel');
        modelSelectionPanel.style.display = 'block';
        
        // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
        this.loadAvailableModels();
    }
    
    /**
     * –ó–∞–∫—Ä—ã–≤–∞–µ—Ç –ø–∞–Ω–µ–ª—å –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏
     */
    closeModelSelection() {
        document.getElementById('model-selection-panel').style.display = 'none';
        document.getElementById('model-role-input').value = '';
    }
    
    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
     * @param {String} role - –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ä–æ–ª—å –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –º–æ–¥–µ–ª–µ–π
     */
    async loadAvailableModels(role = '') {
        const modelsList = document.getElementById('models-list');
        modelsList.innerHTML = '<div class="loading">–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π...</div>';
        
        try {
            const response = await this.mcp.send('chain_get_available_models', {
                role: role
            });
            
            if (response.status === 'success' && response.data && response.data.models) {
                this.renderModelsList(response.data.models);
            } else {
                modelsList.innerHTML = '<div class="error">–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥–µ–ª–µ–π</div>';
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥–µ–ª–µ–π:', error);
            modelsList.innerHTML = '<div class="error">–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥–µ–ª–µ–π</div>';
        }
    }
    
    /**
     * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
     * @param {Array} models - –ú–∞—Å—Å–∏–≤ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
     */
    renderModelsList(models) {
        const modelsList = document.getElementById('models-list');
        modelsList.innerHTML = '';
        
        if (!models || models.length === 0) {
            modelsList.innerHTML = '<div class="empty-list">–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π</div>';
            return;
        }
        
        models.forEach(model => {
            const modelElement = document.createElement('div');
            modelElement.className = 'model-option';
            if (model.role) {
                modelElement.classList.add('recommended');
            }
            
            modelElement.innerHTML = `
                <div class="model-option-header">
                    <span class="model-name">${model.name}</span>
                    <span class="model-provider">${model.provider}</span>
                    ${model.role ? `<span class="model-role">–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è: ${model.role}</span>` : ''}
                </div>
                <div class="model-details">${model.details || ''}</div>
                <button class="select-model-btn">–í—ã–±—Ä–∞—Ç—å</button>
            `;
            
            modelElement.querySelector('.select-model-btn').addEventListener('click', () => {
                this.selectModel(model);
            });
            
            modelsList.appendChild(modelElement);
        });
    }
    
    /**
     * –§–∏–ª—å—Ç—Ä—É–µ—Ç –º–æ–¥–µ–ª–∏ –ø–æ —Ä–æ–ª–∏
     * @param {String} role - –†–æ–ª—å –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
     */
    filterModelsByRole(role) {
        if (role.trim() === '') {
            this.loadAvailableModels();
            return;
        }
        
        this.loadAvailableModels(role.trim());
    }
    
    /**
     * –í—ã–±–∏—Ä–∞–µ—Ç –º–æ–¥–µ–ª—å –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –µ–µ –≤ —Ü–µ–ø–æ—á–∫—É
     * @param {Object} model - –í—ã–±—Ä–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å
     */
    async selectModel(model) {
        if (!this.sessionId) return;
        
        const role = document.getElementById('model-role-input').value.trim() || model.role || 'default';
        
        try {
            const response = await this.mcp.send('chain_add_model', {
                session_id: this.sessionId,
                provider: model.provider,
                model_id: model.id,
                role: role,
                position: this.models.length
            });
            
            if (response.status === 'success') {
                // –î–æ–±–∞–≤–ª—è–µ–º –º–æ–¥–µ–ª—å –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π –º–∞—Å—Å–∏–≤
                this.models.push({
                    id: model.id,
                    provider: model.provider,
                    name: model.name,
                    role: role,
                    position: this.models.length,
                    parameters: {
                        temperature: 0.7,
                        max_tokens: 2000
                    },
                    prompt: ''
                });
                
                // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å –≤—ã–±–æ—Ä–∞
                this.closeModelSelection();
                
                // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –º–æ–¥–µ–ª–∏
                this.renderModels();
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
                this.refreshPreview();
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–æ–¥–µ–ª–∏:', error);
            alert('–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –º–æ–¥–µ–ª—å: ' + (error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'));
        }
    }
    
    /**
     * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–æ–¥–µ–ª–∏ –≤ —Ä–∞–±–æ—á–µ–π –æ–±–ª–∞—Å—Ç–∏
     */
    renderModels() {
        const container = document.getElementById('models-container');
        
        if (!this.models || this.models.length === 0) {
            container.innerHTML = `
                <div class="empty-state">
                    <p>–ù–µ—Ç –º–æ–¥–µ–ª–µ–π –≤ —Ü–µ–ø–æ—á–∫–µ</p>
                    <p>–ù–∞–∂–º–∏—Ç–µ "–î–æ–±–∞–≤–∏—Ç—å –º–æ–¥–µ–ª—å" –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã</p>
                </div>
            `;
            return;
        }
        
        container.innerHTML = '';
        
        this.models.forEach((model, index) => {
            const modelElement = document.createElement('div');
            modelElement.className = 'model-item';
            modelElement.draggable = true;
            modelElement.dataset.position = index;
            
            modelElement.innerHTML = `
                <div class="model-header">
                    <span class="model-role">${model.role}</span>
                    <span class="model-name">${model.name}</span>
                    <span class="model-provider">${model.provider}</span>
                </div>
                <div class="model-actions">
                    <button class="edit-model-btn" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">‚úé</button>
                    <button class="remove-model-btn" title="–£–¥–∞–ª–∏—Ç—å">‚úï</button>
                </div>
            `;
            
            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è drag and drop
            modelElement.addEventListener('dragstart', () => {
                modelElement.classList.add('dragging');
            });
            
            modelElement.addEventListener('dragend', () => {
                modelElement.classList.remove('dragging');
            });
            
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π
            modelElement.querySelector('.edit-model-btn').addEventListener('click', () => {
                this.editModel(index);
            });
            
            modelElement.querySelector('.remove-model-btn').addEventListener('click', () => {
                this.removeModel(index);
            });
            
            container.appendChild(modelElement);
        });
    }
    
    /**
     * –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –ø–∞–Ω–µ–ª—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏
     * @param {Number} index - –ò–Ω–¥–µ–∫—Å –º–æ–¥–µ–ª–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    editModel(index) {
        if (index < 0 || index >= this.models.length) return;
        
        const model = this.models[index];
        const editPanel = document.getElementById('model-edit-panel');
        
        // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É –¥–∞–Ω–Ω—ã–º–∏ –º–æ–¥–µ–ª–∏
        document.getElementById('edit-model-role').value = model.role || '';
        document.getElementById('edit-model-prompt').value = model.prompt || '';
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        if (model.parameters) {
            if (model.parameters.temperature !== undefined) {
                const tempValue = model.parameters.temperature;
                document.getElementById('edit-param-temperature').value = tempValue;
                document.getElementById('edit-param-temperature-value').textContent = tempValue;
            }
            
            if (model.parameters.max_tokens !== undefined) {
                document.getElementById('edit-param-max-tokens').value = model.parameters.max_tokens;
            }
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω–¥–µ–∫—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–π –º–æ–¥–µ–ª–∏
        editPanel.dataset.modelIndex = index;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        editPanel.style.display = 'block';
    }
    
    /**
     * –ó–∞–∫—Ä—ã–≤–∞–µ—Ç –ø–∞–Ω–µ–ª—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏
     */
    closeModelEdit() {
        document.getElementById('model-edit-panel').style.display = 'none';
        document.getElementById('model-edit-panel').removeAttribute('data-model-index');
    }
    
    /**
     * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–æ–¥–µ–ª–∏
     */
    saveModelEdit() {
        const editPanel = document.getElementById('model-edit-panel');
        const index = parseInt(editPanel.dataset.modelIndex);
        
        if (isNaN(index) || index < 0 || index >= this.models.length) {
            this.closeModelEdit();
            return;
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–æ—Ä–º—ã
        const role = document.getElementById('edit-model-role').value.trim();
        const prompt = document.getElementById('edit-model-prompt').value.trim();
        const temperature = parseFloat(document.getElementById('edit-param-temperature').value);
        const maxTokens = parseInt(document.getElementById('edit-param-max-tokens').value);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –º–æ–¥–µ–ª—å
        this.models[index].role = role;
        this.models[index].prompt = prompt;
        this.models[index].parameters = {
            temperature: temperature,
            max_tokens: maxTokens
        };
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        this.closeModelEdit();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        this.renderModels();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
        this.refreshPreview();
    }
    
    /**
     * –£–¥–∞–ª—è–µ—Ç –º–æ–¥–µ–ª—å –∏–∑ —Ü–µ–ø–æ—á–∫–∏
     * @param {Number} index - –ò–Ω–¥–µ–∫—Å –º–æ–¥–µ–ª–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
     */
    async removeModel(index) {
        if (!this.sessionId || index < 0 || index >= this.models.length) return;
        
        if (!confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –º–æ–¥–µ–ª—å "${this.models[index].name}" –∏–∑ —Ü–µ–ø–æ—á–∫–∏?`)) {
            return;
        }
        
        try {
            const response = await this.mcp.send('chain_remove_model', {
                session_id: this.sessionId,
                position: index
            });
            
            if (response.status === 'success') {
                // –£–¥–∞–ª—è–µ–º –º–æ–¥–µ–ª—å –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞
                this.models.splice(index, 1);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ –º–æ–¥–µ–ª–µ–π
                this.models.forEach((model, i) => {
                    model.position = i;
                });
                
                // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –º–æ–¥–µ–ª–∏
                this.renderModels();
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
                this.refreshPreview();
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º–æ–¥–µ–ª–∏:', error);
            alert('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –º–æ–¥–µ–ª—å: ' + (error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'));
        }
    }
    
    /**
     * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞
     */
    async createSession() {
        try {
            const response = await this.mcp.send('chain_interactive_builder', {
                chain_name: this.chainName,
                format: this.format,
                editor_mode: this.editorMode
            });
            
            if (response.status === 'success') {
                this.sessionId = response.data.session_id;
                this.chainName = response.data.chain_name;
                document.getElementById('chain-name-input').value = this.chainName;
                
                // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
                if (response.data.editor_content) {
                    document.getElementById('preview-container').innerHTML = response.data.editor_content;
                }
                
                return true;
            } else {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ—Å—Å–∏–∏:', response.error);
                return false;
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ—Å—Å–∏–∏:', error);
            return false;
        }
    }
    
    /**
     * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ü–µ–ø–æ—á–∫—É
     */
    async saveChain() {
        if (!this.sessionId) {
            await this.createSession();
        }
        
        if (this.models.length === 0) {
            alert('–î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –º–æ–¥–µ–ª—å –≤ —Ü–µ–ø–æ—á–∫—É –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º');
            return;
        }
        
        try {
            const response = await this.mcp.send('chain_save_interactive', {
                session_id: this.sessionId,
                chain_name: this.chainName
            });
            
            if (response.status === 'success') {
                alert('–¶–µ–ø–æ—á–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!');
                
                // –í—ã–∑—ã–≤–∞–µ–º –∫–æ–ª–ª–±—ç–∫ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ü–µ–ø–æ—á–∫–∏
                if (response.data.chain_id) {
                    this.chainId = response.data.chain_id;
                    this.onChainCreated(response.data.chain_id);
                }
                
                // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å
                this.close();
            } else {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ü–µ–ø–æ—á–∫–∏:', response.error);
                alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ü–µ–ø–æ—á–∫–∏: ' + (response.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'));
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ü–µ–ø–æ—á–∫–∏:', error);
            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ü–µ–ø–æ—á–∫–∏: ' + (error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'));
        }
    }
    
    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ü–µ–ø–æ—á–∫–∏
     */
    async refreshPreview() {
        if (!this.sessionId) return;
        
        const previewContainer = document.getElementById('preview-container');
        previewContainer.innerHTML = '<div class="loading">–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞...</div>';
        
        try {
            // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ MCP –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
            // –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
            
            let previewContent = '';
            
            switch (this.format) {
                case 'mermaid':
                    previewContent = this.generateMermaidPreview();
                    break;
                case 'text':
                    previewContent = this.generateTextPreview();
                    break;
                default:
                    previewContent = this.generateUIPreview();
                    break;
            }
            
            previewContainer.innerHTML = previewContent;
            
            // –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è mermaid, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –µ–≥–æ
            if (this.format === 'mermaid' && window.mermaid) {
                window.mermaid.init(undefined, document.querySelectorAll('.mermaid'));
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞:', error);
            previewContainer.innerHTML = '<div class="error">–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞</div>';
        }
    }
    
    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç UI-–ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ü–µ–ø–æ—á–∫–∏
     * @returns {String} HTML-—Ä–∞–∑–º–µ—Ç–∫–∞ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
     */
    generateUIPreview() {
        if (this.models.length === 0) {
            return '<div class="empty-preview">–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π</div>';
        }
        
        let preview = `
            <div class="chain-preview ui-preview">
                <div class="chain-title">${this.chainName}</div>
                <div class="chain-models">
        `;
        
        this.models.forEach((model, index) => {
            preview += `
                <div class="chain-model">
                    <div class="model-box">
                        <div class="model-title">${model.role}</div>
                        <div class="model-details">${model.name}</div>
                    </div>
                    ${index < this.models.length - 1 ? '<div class="model-arrow">‚Üí</div>' : ''}
                </div>
            `;
        });
        
        preview += `
                </div>
            </div>
        `;
        
        return preview;
    }
    
    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç Mermaid-–ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ü–µ–ø–æ—á–∫–∏
     * @returns {String} HTML-—Ä–∞–∑–º–µ—Ç–∫–∞ —Å Mermaid-–¥–∏–∞–≥—Ä–∞–º–º–æ–π
     */
    generateMermaidPreview() {
        if (this.models.length === 0) {
            return '<div class="empty-preview">–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π</div>';
        }
        
        let mermaidCode = 'graph LR\n';
        mermaidCode += `    title["${this.chainName}"]\n`;
        
        // –î–æ–±–∞–≤–ª—è–µ–º —É–∑–ª—ã –º–æ–¥–µ–ª–µ–π
        this.models.forEach((model, index) => {
            const nodeId = `model${index}`;
            mermaidCode += `    ${nodeId}["${model.role}<br/>(${model.name})"]\n`;
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–≤—è–∑–∏ –º–µ–∂–¥—É –º–æ–¥–µ–ª—è–º–∏
        for (let i = 0; i < this.models.length - 1; i++) {
            mermaidCode += `    model${i} --> model${i+1}\n`;
        }
        
        mermaidCode += '    style title fill:#f9f9f9,stroke:#333,stroke-width:1px\n';
        
        return `<div class="mermaid">${mermaidCode}</div>`;
    }
    
    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ü–µ–ø–æ—á–∫–∏
     * @returns {String} HTML-—Ä–∞–∑–º–µ—Ç–∫–∞ —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ–º
     */
    generateTextPreview() {
        if (this.models.length === 0) {
            return '<div class="empty-preview">–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π</div>';
        }
        
        let text = `–¶–µ–ø–æ—á–∫–∞: ${this.chainName}\n`;
        text += `–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–µ–π: ${this.models.length}\n\n`;
        
        text += '–ú–æ–¥–µ–ª–∏ –≤ —Ü–µ–ø–æ—á–∫–µ:\n';
        this.models.forEach((model, index) => {
            text += `${index + 1}. ${model.role} (${model.name}, ${model.provider})\n`;
            if (model.prompt) {
                text += `   –ü—Ä–æ–º–ø—Ç: ${model.prompt.substring(0, 50)}${model.prompt.length > 50 ? '...' : ''}\n`;
            }
            if (model.parameters) {
                text += `   –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞=${model.parameters.temperature}, –º–∞–∫—Å. —Ç–æ–∫–µ–Ω–æ–≤=${model.parameters.max_tokens}\n`;
            }
            text += '\n';
        });
        
        return `<pre class="text-preview">${text}</pre>`;
    }
    
    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Ä–µ–∂–∏–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
     */
    toggleViewMode() {
        const previewPanel = document.getElementById('builder-preview-panel');
        const workspacePanel = document.getElementById('builder-workspace');
        
        if (previewPanel.classList.contains('expanded')) {
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º—É –≤–∏–¥—É
            previewPanel.classList.remove('expanded');
            workspacePanel.style.display = 'block';
        } else {
            // –†–∞—Å—à–∏—Ä—è–µ–º –ø–∞–Ω–µ–ª—å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
            previewPanel.classList.add('expanded');
            workspacePanel.style.display = 'none';
        }
    }
    
    /**
     * –ó–∞–∫—Ä—ã–≤–∞–µ—Ç –ø–∞–Ω–µ–ª—å –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞
     */
    close() {
        if (this.sessionId && this.models.length > 0 && !confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫—Ä—ã—Ç—å –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä? –í—Å–µ –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±—É–¥—É—Ç –ø–æ—Ç–µ—Ä—è–Ω—ã.')) {
            return;
        }
        
        this.onClose();
    }
} 