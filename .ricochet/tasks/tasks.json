{
  "tasks": [
    {
      "id": "1",
      "title": "Настройка базовой структуры проекта",
      "description": "Создание первоначальной структуры директорий и базовых файлов проекта",
      "status": "done",
      "priority": "high",
      "dependencies": [],
      "details": "Создать основную структуру директорий проекта:\n1. Настроить Go модуль\n2. Создать основные пакеты: cmd, pkg, internal\n3. Добавить базовую документацию и README\n4. Настроить .gitignore\n\nВсе должно следовать стандартным Go-практикам организации кода.",
      "testStrategy": "Проверить, что структура директорий создана правильно и Go модуль корректно инициализирован командой `go mod tidy`."
    },
    {
      "id": "2",
      "title": "Реализация базового CLI интерфейса",
      "description": "Создание командного интерфейса с основными командами",
      "status": "done",
      "priority": "high",
      "dependencies": ["1"],
      "details": "Использовать библиотеку Cobra для реализации CLI. Основные команды:\n- init: Инициализация нового проекта\n- list: Отображение списка задач\n- show: Показать детали задачи\n- add: Добавить новую задачу\n- update: Обновить существующую задачу\n- status: Изменить статус задачи\n\nДобавить глобальные флаги для настройки вывода и путей к файлам конфигурации.",
      "testStrategy": "Проверить работу каждой команды с различными флагами и аргументами. Убедиться, что справка и сообщения об ошибках понятны и полезны."
    },
    {
      "id": "3",
      "title": "Модель данных для задач",
      "description": "Определение структур данных для представления задач и зависимостей",
      "status": "done",
      "priority": "high",
      "dependencies": ["1"],
      "details": "Определить следующие структуры данных:\n- Task: основная структура для представления задачи\n- TaskStatus: перечисление для статусов задач\n- Priority: перечисление для приоритетов\n- TaskList: контейнер для управления списком задач\n\nРеализовать методы для сериализации/десериализации в JSON и из него.",
      "testStrategy": "Написать юнит-тесты для проверки корректности сериализации/десериализации, а также для проверки логики работы с зависимостями."
    },
    {
      "id": "4",
      "title": "Хранилище задач",
      "description": "Реализация интерфейса для хранения и загрузки задач",
      "status": "done",
      "priority": "high",
      "dependencies": ["3"],
      "details": "Определить интерфейс TaskStore с методами:\n- List(): получение списка всех задач\n- Get(id): получение задачи по ID\n- Save(task): сохранение задачи\n- Delete(id): удаление задачи\n\nРеализовать FileTaskStore, который сохраняет задачи в JSON-файле.",
      "testStrategy": "Написать интеграционные тесты для проверки операций чтения/записи задач в файловую систему."
    },
    {
      "id": "5",
      "title": "Логика управления задачами",
      "description": "Создание сервиса для работы с задачами и их зависимостями",
      "status": "in-progress",
      "priority": "high",
      "dependencies": ["4"],
      "details": "Реализовать TaskManager с методами:\n- GetNextTask(): получение следующей задачи для работы\n- AddTask(task): добавление новой задачи\n- UpdateTask(task): обновление существующей задачи\n- SetStatus(id, status): изменение статуса задачи\n- AddDependency(id, dependsOn): добавление зависимости\n- RemoveDependency(id, dependsOn): удаление зависимости\n- ValidateDependencies(): проверка на циклические зависимости",
      "testStrategy": "Написать юнит-тесты для проверки логики управления задачами, особенно обработки зависимостей и определения следующей задачи.",
      "subtasks": [
        {
          "id": "5.1",
          "title": "Реализация основных методов TaskManager",
          "description": "Имплементация базовых операций с задачами",
          "status": "done",
          "details": "Реализовать методы:\n- AddTask(task)\n- UpdateTask(task)\n- SetStatus(id, status)\n- GetTask(id)"
        },
        {
          "id": "5.2",
          "title": "Управление зависимостями задач",
          "description": "Добавление логики для работы с зависимостями между задачами",
          "status": "in-progress",
          "details": "Реализовать методы:\n- AddDependency(id, dependsOn)\n- RemoveDependency(id, dependsOn)\n- ValidateDependencies()\n- FixDependencies()"
        },
        {
          "id": "5.3",
          "title": "Алгоритм определения следующей задачи",
          "description": "Логика для определения следующей задачи для работы на основе зависимостей и приоритетов",
          "status": "pending",
          "details": "Реализовать метод GetNextTask(), который будет:\n1. Отфильтровывать завершенные задачи\n2. Исключать задачи с невыполненными зависимостями\n3. Сортировать оставшиеся задачи по приоритету и количеству зависимых от них задач\n4. Возвращать задачу с наивысшим приоритетом"
        }
      ]
    },
    {
      "id": "6",
      "title": "Интеграция с ИИ-моделями",
      "description": "Подключение к API провайдеров моделей ИИ для анализа и генерации задач",
      "status": "pending",
      "priority": "medium",
      "dependencies": ["3", "4"],
      "details": "Создать модуль для работы с различными провайдерами моделей ИИ (OpenAI, Anthropic, и т.д.):\n1. Определить общий интерфейс ModelProvider\n2. Реализовать конкретные провайдеры (OpenAIProvider, AnthropicProvider)\n3. Создать фабрику провайдеров\n4. Реализовать логику для анализа сложности задач\n5. Добавить функционал для автоматического разбиения задач на подзадачи\n\nОбеспечить безопасное хранение API ключей в конфигурации.",
      "testStrategy": "Создать моки для тестирования без реальных API вызовов. Для интеграционных тестов использовать ограниченные API ключи с минимальным использованием."
    },
    {
      "id": "7",
      "title": "Интеграция с MCP",
      "description": "Реализация MCP-сервера для интеграции с IDE и ИИ-ассистентами",
      "status": "in-progress",
      "priority": "medium",
      "dependencies": ["5"],
      "details": "Создать MCP-сервер, который будет предоставлять инструменты для работы с Ricochet:\n1. Определить спецификацию API для MCP-инструментов\n2. Реализовать базовые инструменты (get_tasks, get_task, add_task, и т.д.)\n3. Добавить обработчики для инструментов ИИ-интеграции\n4. Настроить безопасный обмен данными между клиентом и сервером\n\nОбеспечить совместимость с существующими MCP-клиентами, такими как Cursor.",
      "testStrategy": "Создать тестовый MCP-клиент для проверки корректности работы сервера. Проверить взаимодействие с реальным MCP-клиентом (например, Cursor).",
      "progress": 45
    },
    {
      "id": "8",
      "title": "Улучшение интеграции с MCP",
      "description": "Расширение функциональности MCP-интеграции для взаимодействия с редакторами кода",
      "status": "in-progress",
      "priority": "high",
      "dependencies": ["5", "7"],
      "details": "Необходимо реализовать следующие компоненты MCP-интеграции:\n1. Улучшить базовый MCP-сервер\n2. Реализовать визуализацию прогресса выполнения цепочек\n3. Создать интерактивный конструктор цепочек для редактора\n4. Интегрировать систему выбора моделей с MCP",
      "testStrategy": "Тестировать интеграцию с реальными редакторами кода (Cursor, VS Code). Провести пользовательское тестирование для проверки удобства использования интерфейса.",
      "progress": 45,
      "subtasks": [
        {
          "id": "8.1",
          "title": "Расширение набора MCP-команд",
          "description": "Добавление новых команд для работы с чекпоинтами, мониторинга и моделями",
          "status": "in-progress",
          "details": "Добавить команды для работы с чекпоинтами, мониторинга выполнения, расширить команды для работы с моделями",
          "progress": 60
        },
        {
          "id": "8.2",
          "title": "Визуализация в редакторе",
          "description": "Разработка механизмов отображения прогресса и статистики в редакторе",
          "status": "in-progress",
          "details": "Разработать форматы отображения прогресса, реализовать отображение статистики и метрик, добавить интерактивные элементы управления",
          "progress": 30
        },
        {
          "id": "8.3",
          "title": "Интерактивное создание цепочек",
          "description": "Разработка интерфейса для создания и редактирования цепочек в редакторе",
          "status": "in-progress",
          "details": "Разработать структуру мастера создания цепочек, реализовать пошаговый процесс с валидацией, интегрировать с системой выбора моделей",
          "progress": 10
        },
        {
          "id": "8.4",
          "title": "Документация и примеры",
          "description": "Создание документации и примеров использования MCP-интеграции",
          "status": "in-progress",
          "details": "Обновить документацию по MCP-интеграции, создать примеры использования в редакторах, добавить руководства по настройке и использованию",
          "progress": 50
        }
      ]
    }
  ],
  "projectInfo": {
    "name": "Ricochet",
    "description": "Инструмент для управления задачами проекта с использованием ИИ",
    "version": "0.1.0",
    "createdAt": "2024-08-15T12:00:00Z",
    "updatedAt": "2024-08-25T15:30:00Z"
  },
  "stats": {
    "total": 8,
    "done": 4,
    "inProgress": 3,
    "pending": 1,
    "deferred": 0
  }
} 