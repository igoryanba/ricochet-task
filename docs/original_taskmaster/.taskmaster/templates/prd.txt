# Overview  
GamesDrop is a B2C game key aggregator platform that provides a unified marketplace for purchasing digital game keys. It solves the problem of fragmented game key marketplaces by aggregating multiple suppliers into one platform, offering competitive pricing and a seamless purchasing experience for gamers.

# Core Features  
1. **Product Aggregation & Display**
   - Aggregates game keys from multiple suppliers
   - Unified product catalog with filtering and search
   - Real-time pricing and availability

2. **Secure Payment Processing**
   - PayPal integration for payment processing
   - Order processing and fulfillment pipeline
   - Transaction security and fraud prevention

3. **User Management**
   - Customer account creation and management
   - Purchase history tracking
   - Wishlist functionality

4. **Admin Dashboard**
   - Inventory management
   - Order processing and tracking
   - Sales analytics and reporting

5. **Supplier Integration**
   - API integrations with key suppliers (Kinguin, Digiflazz, etc.)
   - Automated inventory synchronization
   - Supplier performance monitoring

# User Experience  
**User Personas:**
1. Gamers (primary users)
2. Suppliers (game key providers)
3. Admin/Operations team

**Key User Flows:**
1. Browse → Search → Add to Cart → Checkout → Payment → Receipt
2. Supplier: API integration → Inventory sync → Order fulfillment
3. Admin: Dashboard → Manage orders → View reports → System configuration

**UI/UX Considerations:**
- Responsive design for desktop/mobile
- Intuitive product discovery
- Streamlined checkout process
- Clear order status tracking

# Technical Architecture  
**System Components:**
1. Frontend (Next.js)
2. BFF (Backend for Frontend - NestJS)
3. Kernel API (Core business logic)
4. PostgreSQL (Main database)
5. Redis (Caching and sessions)
6. Nginx (Reverse proxy)

**Data Models:**
- Products
- Orders
- Users
- Suppliers
- Inventory

**APIs and Integrations:**
- PayPal payment gateway
- Supplier APIs (Kinguin, Digiflazz, etc.)
- Telegram notification service
- Google Sheets integration for reporting

**Infrastructure Requirements:**
- Docker Swarm orchestration
- DigitalOcean droplets (Manager + Worker nodes)
- Overlay networks for service communication
- SSL/TLS encryption

# Development Roadmap  
**MVP Requirements:**
1. Core product catalog with search
2. User registration/login
3. Cart and checkout functionality
4. PayPal payment integration
5. Basic order management
6. Supplier API integration (min. 1 supplier)

**Future Enhancements:**
1. Multi-supplier inventory sync
2. Advanced search/filtering
3. User wishlists and favorites
4. Affiliate program
5. Mobile app
6. Advanced analytics dashboard

# Logical Dependency Chain  
1. **Foundation:**
   - Docker Swarm setup
   - Core database schema
   - Authentication service
   - Payment gateway integration

2. **Core Functionality:**
   - Product aggregation pipeline
   - Order processing system
   - Supplier integration framework

3. **User Experience:**
   - Frontend interface
   - Search and filtering
   - Cart and checkout flow

4. **Advanced Features:**
   - Admin dashboard
   - Reporting and analytics
   - Mobile optimization

# Risks and Mitigations  
**Technical Challenges:**
- Complex supplier API integrations
- Payment gateway reliability
- Inventory synchronization issues

**Mitigations:**
- Implement circuit breaker pattern for external APIs
- Use idempotency keys for payment processing
- Batch processing for inventory sync

**Resource Constraints:**
- Limited DevOps expertise
- Budget constraints for infrastructure

**Mitigations:**
- Use managed services where possible
- Optimize resource usage with Docker constraints
- Implement monitoring for cost control

# Appendix  
**Technical Specifications:**
- Docker Swarm architecture (Manager/Worker nodes)
- Network configuration (Overlay networks: gamesdrop, b2c_network, shared_network)
- Service discovery via Docker DNS

**Deployment Process:**
1. Build Docker images
2. Push to GitLab registry
3. Update docker-compose files on manager node
4. Deploy stacks:
   ```bash
   docker stack deploy -c /home/app/docker-compose.yml app
   docker stack deploy -c /home/app/docker-compose.b2c.yml b2c_store
   ```

**Key Environment Configurations:**
- PostgreSQL connection settings
- Redis credentials
- PayPal API credentials
- Supplier API keys 